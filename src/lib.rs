#![doc = "Peripheral access API for MKE04Z4 microcontrollers (generated using svd2rust v0.17.0)\n\nYou can find an overview of the API [here].\n\n[here]: https://docs.rs/svd2rust/0.17.0/svd2rust/#peripheral-api"]
#![deny(const_err)]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
extern crate cortex_m;
#[cfg(feature = "rt")]
extern crate cortex_m_rt;
extern crate vcell;
use core::marker::PhantomData;
use core::ops::Deref;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 2;
#[cfg(feature = "rt")]
extern "C" {
    fn FTMRE();
    fn PMC();
    fn IRQ();
    fn I2C0();
    fn SPI0();
    fn UART0();
    fn ADC();
    fn ACMP0();
    fn FTM0();
    fn FTM2();
    fn RTC();
    fn ACMP1();
    fn PIT_CH0();
    fn PIT_CH1();
    fn KBI0();
    fn KBI1();
    fn ICS();
    fn WDOG();
    fn PWT();
}
#[doc(hidden)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 30] = [
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: FTMRE },
    Vector { _handler: PMC },
    Vector { _handler: IRQ },
    Vector { _handler: I2C0 },
    Vector { _reserved: 0 },
    Vector { _handler: SPI0 },
    Vector { _reserved: 0 },
    Vector { _handler: UART0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: ADC },
    Vector { _handler: ACMP0 },
    Vector { _handler: FTM0 },
    Vector { _reserved: 0 },
    Vector { _handler: FTM2 },
    Vector { _handler: RTC },
    Vector { _handler: ACMP1 },
    Vector { _handler: PIT_CH0 },
    Vector { _handler: PIT_CH1 },
    Vector { _handler: KBI0 },
    Vector { _handler: KBI1 },
    Vector { _reserved: 0 },
    Vector { _handler: ICS },
    Vector { _handler: WDOG },
    Vector { _handler: PWT },
];
#[doc = r"Enumeration of all the interrupts"]
#[derive(Copy, Clone, Debug)]
#[repr(u8)]
pub enum Interrupt {
    #[doc = "5 - FTMRE"]
    FTMRE = 5,
    #[doc = "6 - PMC"]
    PMC = 6,
    #[doc = "7 - IRQ"]
    IRQ = 7,
    #[doc = "8 - I2C0"]
    I2C0 = 8,
    #[doc = "10 - SPI0"]
    SPI0 = 10,
    #[doc = "12 - UART0"]
    UART0 = 12,
    #[doc = "15 - ADC"]
    ADC = 15,
    #[doc = "16 - ACMP0"]
    ACMP0 = 16,
    #[doc = "17 - FTM0"]
    FTM0 = 17,
    #[doc = "19 - FTM2"]
    FTM2 = 19,
    #[doc = "20 - RTC"]
    RTC = 20,
    #[doc = "21 - ACMP1"]
    ACMP1 = 21,
    #[doc = "22 - PIT_CH0"]
    PIT_CH0 = 22,
    #[doc = "23 - PIT_CH1"]
    PIT_CH1 = 23,
    #[doc = "24 - KBI0"]
    KBI0 = 24,
    #[doc = "25 - KBI1"]
    KBI1 = 25,
    #[doc = "27 - ICS"]
    ICS = 27,
    #[doc = "28 - WDOG"]
    WDOG = 28,
    #[doc = "29 - PWT"]
    PWT = 29,
}
unsafe impl cortex_m::interrupt::Nr for Interrupt {
    #[inline(always)]
    fn nr(&self) -> u8 {
        *self as u8
    }
}
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic {
    use core::marker;
    #[doc = "This trait shows that register has `read` method"]
    #[doc = ""]
    #[doc = "Registers marked with `Writable` can be also `modify`'ed"]
    pub trait Readable {}
    #[doc = "This trait shows that register has `write`, `write_with_zero` and `reset` method"]
    #[doc = ""]
    #[doc = "Registers marked with `Readable` can be also `modify`'ed"]
    pub trait Writable {}
    #[doc = "Reset value of the register"]
    #[doc = ""]
    #[doc = "This value is initial value for `write` method."]
    #[doc = "It can be also directly writed to register by `reset` method."]
    pub trait ResetValue {
        #[doc = "Register size"]
        type Type;
        #[doc = "Reset value of the register"]
        fn reset_value() -> Self::Type;
    }
    #[doc = "This structure provides volatile access to register"]
    pub struct Reg<U, REG> {
        register: vcell::VolatileCell<U>,
        _marker: marker::PhantomData<REG>,
    }
    unsafe impl<U: Send, REG> Send for Reg<U, REG> {}
    impl<U, REG> Reg<U, REG>
    where
        Self: Readable,
        U: Copy,
    {
        #[doc = "Reads the contents of `Readable` register"]
        #[doc = ""]
        #[doc = "You can read the contents of a register in such way:"]
        #[doc = "```ignore"]
        #[doc = "let bits = periph.reg.read().bits();"]
        #[doc = "```"]
        #[doc = "or get the content of a particular field of a register."]
        #[doc = "```ignore"]
        #[doc = "let reader = periph.reg.read();"]
        #[doc = "let bits = reader.field1().bits();"]
        #[doc = "let flag = reader.field2().bit_is_set();"]
        #[doc = "```"]
        #[inline(always)]
        pub fn read(&self) -> R<U, Self> {
            R {
                bits: self.register.get(),
                _reg: marker::PhantomData,
            }
        }
    }
    impl<U, REG> Reg<U, REG>
    where
        Self: ResetValue<Type = U> + Writable,
        U: Copy,
    {
        #[doc = "Writes the reset value to `Writable` register"]
        #[doc = ""]
        #[doc = "Resets the register to its initial state"]
        #[inline(always)]
        pub fn reset(&self) {
            self.register.set(Self::reset_value())
        }
    }
    impl<U, REG> Reg<U, REG>
    where
        Self: ResetValue<Type = U> + Writable,
        U: Copy,
    {
        #[doc = "Writes bits to `Writable` register"]
        #[doc = ""]
        #[doc = "You can write raw bits into a register:"]
        #[doc = "```ignore"]
        #[doc = "periph.reg.write(|w| unsafe { w.bits(rawbits) });"]
        #[doc = "```"]
        #[doc = "or write only the fields you need:"]
        #[doc = "```ignore"]
        #[doc = "periph.reg.write(|w| w"]
        #[doc = "    .field1().bits(newfield1bits)"]
        #[doc = "    .field2().set_bit()"]
        #[doc = "    .field3().variant(VARIANT)"]
        #[doc = ");"]
        #[doc = "```"]
        #[doc = "Other fields will have reset value."]
        #[inline(always)]
        pub fn write<F>(&self, f: F)
        where
            F: FnOnce(&mut W<U, Self>) -> &mut W<U, Self>,
        {
            self.register.set(
                f(&mut W {
                    bits: Self::reset_value(),
                    _reg: marker::PhantomData,
                })
                .bits,
            );
        }
    }
    impl<U, REG> Reg<U, REG>
    where
        Self: Writable,
        U: Copy + Default,
    {
        #[doc = "Writes Zero to `Writable` register"]
        #[doc = ""]
        #[doc = "Similar to `write`, but unused bits will contain 0."]
        #[inline(always)]
        pub fn write_with_zero<F>(&self, f: F)
        where
            F: FnOnce(&mut W<U, Self>) -> &mut W<U, Self>,
        {
            self.register.set(
                f(&mut W {
                    bits: U::default(),
                    _reg: marker::PhantomData,
                })
                .bits,
            );
        }
    }
    impl<U, REG> Reg<U, REG>
    where
        Self: Readable + Writable,
        U: Copy,
    {
        #[doc = "Modifies the contents of the register"]
        #[doc = ""]
        #[doc = "E.g. to do a read-modify-write sequence to change parts of a register:"]
        #[doc = "```ignore"]
        #[doc = "periph.reg.modify(|r, w| unsafe { w.bits("]
        #[doc = "   r.bits() | 3"]
        #[doc = ") });"]
        #[doc = "```"]
        #[doc = "or"]
        #[doc = "```ignore"]
        #[doc = "periph.reg.modify(|_, w| w"]
        #[doc = "    .field1().bits(newfield1bits)"]
        #[doc = "    .field2().set_bit()"]
        #[doc = "    .field3().variant(VARIANT)"]
        #[doc = ");"]
        #[doc = "```"]
        #[doc = "Other fields will have value they had before call `modify`."]
        #[inline(always)]
        pub fn modify<F>(&self, f: F)
        where
            for<'w> F: FnOnce(&R<U, Self>, &'w mut W<U, Self>) -> &'w mut W<U, Self>,
        {
            let bits = self.register.get();
            self.register.set(
                f(
                    &R {
                        bits,
                        _reg: marker::PhantomData,
                    },
                    &mut W {
                        bits,
                        _reg: marker::PhantomData,
                    },
                )
                .bits,
            );
        }
    }
    #[doc = "Register/field reader"]
    #[doc = ""]
    #[doc = "Result of the [`read`](Reg::read) method of a register."]
    #[doc = "Also it can be used in the [`modify`](Reg::read) method"]
    pub struct R<U, T> {
        pub(crate) bits: U,
        _reg: marker::PhantomData<T>,
    }
    impl<U, T> R<U, T>
    where
        U: Copy,
    {
        #[doc = "Create new instance of reader"]
        #[inline(always)]
        pub(crate) fn new(bits: U) -> Self {
            Self {
                bits,
                _reg: marker::PhantomData,
            }
        }
        #[doc = "Read raw bits from register/field"]
        #[inline(always)]
        pub fn bits(&self) -> U {
            self.bits
        }
    }
    impl<U, T, FI> PartialEq<FI> for R<U, T>
    where
        U: PartialEq,
        FI: Copy + Into<U>,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&(*other).into())
        }
    }
    impl<FI> R<bool, FI> {
        #[doc = "Value of the field as raw bits"]
        #[inline(always)]
        pub fn bit(&self) -> bool {
            self.bits
        }
        #[doc = "Returns `true` if the bit is clear (0)"]
        #[inline(always)]
        pub fn bit_is_clear(&self) -> bool {
            !self.bit()
        }
        #[doc = "Returns `true` if the bit is set (1)"]
        #[inline(always)]
        pub fn bit_is_set(&self) -> bool {
            self.bit()
        }
    }
    #[doc = "Register writer"]
    #[doc = ""]
    #[doc = "Used as an argument to the closures in the [`write`](Reg::write) and [`modify`](Reg::modify) methods of the register"]
    pub struct W<U, REG> {
        #[doc = "Writable bits"]
        pub(crate) bits: U,
        _reg: marker::PhantomData<REG>,
    }
    impl<U, REG> W<U, REG> {
        #[doc = "Writes raw bits to the register"]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: U) -> &mut Self {
            self.bits = bits;
            self
        }
    }
    #[doc = "Used if enumerated values cover not the whole range"]
    #[derive(Clone, Copy, PartialEq)]
    pub enum Variant<U, T> {
        #[doc = "Expected variant"]
        Val(T),
        #[doc = "Raw bits"]
        Res(U),
    }
}
#[doc = "Flash Memory"]
pub struct FTMRE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FTMRE {}
impl FTMRE {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ftmre::RegisterBlock {
        0x4002_0000 as *const _
    }
}
impl Deref for FTMRE {
    type Target = ftmre::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*FTMRE::ptr() }
    }
}
#[doc = "Flash Memory"]
pub mod ftmre {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved0: [u8; 1usize],
        #[doc = "0x01 - Flash CCOB Index Register"]
        pub fccobix: FCCOBIX,
        #[doc = "0x02 - Flash Security Register"]
        pub fsec: FSEC,
        #[doc = "0x03 - Flash Clock Divider Register"]
        pub fclkdiv: FCLKDIV,
        _reserved3: [u8; 1usize],
        #[doc = "0x05 - Flash Status Register"]
        pub fstat: FSTAT,
        _reserved4: [u8; 1usize],
        #[doc = "0x07 - Flash Configuration Register"]
        pub fcnfg: FCNFG,
        #[doc = "0x08 - Flash Common Command Object Register: Low"]
        pub fccoblo: FCCOBLO,
        #[doc = "0x09 - Flash Common Command Object Register:High"]
        pub fccobhi: FCCOBHI,
        _reserved7: [u8; 1usize],
        #[doc = "0x0b - Flash Protection Register"]
        pub fprot: FPROT,
        _reserved8: [u8; 3usize],
        #[doc = "0x0f - Flash Option Register"]
        pub fopt: FOPT,
    }
    #[doc = "Flash CCOB Index Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fccobix](fccobix) module"]
    pub type FCCOBIX = crate::Reg<u8, _FCCOBIX>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCCOBIX;
    #[doc = "`read()` method returns [fccobix::R](fccobix::R) reader structure"]
    impl crate::Readable for FCCOBIX {}
    #[doc = "`write(|w| ..)` method takes [fccobix::W](fccobix::W) writer structure"]
    impl crate::Writable for FCCOBIX {}
    #[doc = "Flash CCOB Index Register"]
    pub mod fccobix {
        #[doc = "Reader of register FCCOBIX"]
        pub type R = crate::R<u8, super::FCCOBIX>;
        #[doc = "Writer for register FCCOBIX"]
        pub type W = crate::W<u8, super::FCCOBIX>;
        #[doc = "Register FCCOBIX `reset()`'s with value 0"]
        impl crate::ResetValue for super::FCCOBIX {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCOBIX`"]
        pub type CCOBIX_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CCOBIX`"]
        pub struct CCOBIX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCOBIX_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u8) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Common Command Register Index"]
            #[inline(always)]
            pub fn ccobix(&self) -> CCOBIX_R {
                CCOBIX_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Common Command Register Index"]
            #[inline(always)]
            pub fn ccobix(&mut self) -> CCOBIX_W {
                CCOBIX_W { w: self }
            }
        }
    }
    #[doc = "Flash Security Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsec](fsec) module"]
    pub type FSEC = crate::Reg<u8, _FSEC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSEC;
    #[doc = "`read()` method returns [fsec::R](fsec::R) reader structure"]
    impl crate::Readable for FSEC {}
    #[doc = "Flash Security Register"]
    pub mod fsec {
        #[doc = "Reader of register FSEC"]
        pub type R = crate::R<u8, super::FSEC>;
        #[doc = "Flash Security Bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum SEC_A {
            #[doc = "0: Secured"]
            _00 = 0,
            #[doc = "1: Secured"]
            _01 = 1,
            #[doc = "2: Unsecured"]
            _10 = 2,
            #[doc = "3: Secured"]
            _11 = 3,
        }
        impl From<SEC_A> for u8 {
            #[inline(always)]
            fn from(variant: SEC_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `SEC`"]
        pub type SEC_R = crate::R<u8, SEC_A>;
        impl SEC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SEC_A {
                match self.bits {
                    0 => SEC_A::_00,
                    1 => SEC_A::_01,
                    2 => SEC_A::_10,
                    3 => SEC_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == SEC_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == SEC_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == SEC_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == SEC_A::_11
            }
        }
        #[doc = "Backdoor Key Security Enable Bits\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum KEYEN_A {
            #[doc = "0: Disabled"]
            _00 = 0,
            #[doc = "1: Disabled"]
            _01 = 1,
            #[doc = "2: Enabled"]
            _10 = 2,
            #[doc = "3: Disabled"]
            _11 = 3,
        }
        impl From<KEYEN_A> for u8 {
            #[inline(always)]
            fn from(variant: KEYEN_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `KEYEN`"]
        pub type KEYEN_R = crate::R<u8, KEYEN_A>;
        impl KEYEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> KEYEN_A {
                match self.bits {
                    0 => KEYEN_A::_00,
                    1 => KEYEN_A::_01,
                    2 => KEYEN_A::_10,
                    3 => KEYEN_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == KEYEN_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == KEYEN_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == KEYEN_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == KEYEN_A::_11
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Flash Security Bits"]
            #[inline(always)]
            pub fn sec(&self) -> SEC_R {
                SEC_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Backdoor Key Security Enable Bits"]
            #[inline(always)]
            pub fn keyen(&self) -> KEYEN_R {
                KEYEN_R::new(((self.bits >> 6) & 0x03) as u8)
            }
        }
    }
    #[doc = "Flash Clock Divider Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fclkdiv](fclkdiv) module"]
    pub type FCLKDIV = crate::Reg<u8, _FCLKDIV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCLKDIV;
    #[doc = "`read()` method returns [fclkdiv::R](fclkdiv::R) reader structure"]
    impl crate::Readable for FCLKDIV {}
    #[doc = "`write(|w| ..)` method takes [fclkdiv::W](fclkdiv::W) writer structure"]
    impl crate::Writable for FCLKDIV {}
    #[doc = "Flash Clock Divider Register"]
    pub mod fclkdiv {
        #[doc = "Reader of register FCLKDIV"]
        pub type R = crate::R<u8, super::FCLKDIV>;
        #[doc = "Writer for register FCLKDIV"]
        pub type W = crate::W<u8, super::FCLKDIV>;
        #[doc = "Register FCLKDIV `reset()`'s with value 0"]
        impl crate::ResetValue for super::FCLKDIV {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FDIV`"]
        pub type FDIV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `FDIV`"]
        pub struct FDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FDIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u8) & 0x3f);
                self.w
            }
        }
        #[doc = "Clock Divider Locked\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FDIVLCK_A {
            #[doc = "0: FDIV field is open for writing."]
            _0 = 0,
            #[doc = "1: FDIV value is locked and cannot be changed. After the lock bit is set high, only reset can clear this bit and restore writability to the FDIV field in user mode."]
            _1 = 1,
        }
        impl From<FDIVLCK_A> for bool {
            #[inline(always)]
            fn from(variant: FDIVLCK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FDIVLCK`"]
        pub type FDIVLCK_R = crate::R<bool, FDIVLCK_A>;
        impl FDIVLCK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FDIVLCK_A {
                match self.bits {
                    false => FDIVLCK_A::_0,
                    true => FDIVLCK_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FDIVLCK_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FDIVLCK_A::_1
            }
        }
        #[doc = "Write proxy for field `FDIVLCK`"]
        pub struct FDIVLCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FDIVLCK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FDIVLCK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FDIV field is open for writing."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FDIVLCK_A::_0)
            }
            #[doc = "FDIV value is locked and cannot be changed. After the lock bit is set high, only reset can clear this bit and restore writability to the FDIV field in user mode."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FDIVLCK_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Clock Divider Loaded\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FDIVLD_A {
            #[doc = "0: FCLKDIV register has not been written since the last reset."]
            _0 = 0,
            #[doc = "1: FCLKDIV register has been written since the last reset."]
            _1 = 1,
        }
        impl From<FDIVLD_A> for bool {
            #[inline(always)]
            fn from(variant: FDIVLD_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FDIVLD`"]
        pub type FDIVLD_R = crate::R<bool, FDIVLD_A>;
        impl FDIVLD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FDIVLD_A {
                match self.bits {
                    false => FDIVLD_A::_0,
                    true => FDIVLD_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FDIVLD_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FDIVLD_A::_1
            }
        }
        impl R {
            #[doc = "Bits 0:5 - Clock Divider Bits"]
            #[inline(always)]
            pub fn fdiv(&self) -> FDIV_R {
                FDIV_R::new((self.bits & 0x3f) as u8)
            }
            #[doc = "Bit 6 - Clock Divider Locked"]
            #[inline(always)]
            pub fn fdivlck(&self) -> FDIVLCK_R {
                FDIVLCK_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Clock Divider Loaded"]
            #[inline(always)]
            pub fn fdivld(&self) -> FDIVLD_R {
                FDIVLD_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - Clock Divider Bits"]
            #[inline(always)]
            pub fn fdiv(&mut self) -> FDIV_W {
                FDIV_W { w: self }
            }
            #[doc = "Bit 6 - Clock Divider Locked"]
            #[inline(always)]
            pub fn fdivlck(&mut self) -> FDIVLCK_W {
                FDIVLCK_W { w: self }
            }
        }
    }
    #[doc = "Flash Status Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fstat](fstat) module"]
    pub type FSTAT = crate::Reg<u8, _FSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSTAT;
    #[doc = "`read()` method returns [fstat::R](fstat::R) reader structure"]
    impl crate::Readable for FSTAT {}
    #[doc = "`write(|w| ..)` method takes [fstat::W](fstat::W) writer structure"]
    impl crate::Writable for FSTAT {}
    #[doc = "Flash Status Register"]
    pub mod fstat {
        #[doc = "Reader of register FSTAT"]
        pub type R = crate::R<u8, super::FSTAT>;
        #[doc = "Writer for register FSTAT"]
        pub type W = crate::W<u8, super::FSTAT>;
        #[doc = "Register FSTAT `reset()`'s with value 0x80"]
        impl crate::ResetValue for super::FSTAT {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x80
            }
        }
        #[doc = "Reader of field `MGSTAT`"]
        pub type MGSTAT_R = crate::R<u8, u8>;
        #[doc = "Memory Controller Busy Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MGBUSY_A {
            #[doc = "0: Memory controller is idle."]
            _0 = 0,
            #[doc = "1: Memory controller is busy executing a flash command (CCIF = 0)."]
            _1 = 1,
        }
        impl From<MGBUSY_A> for bool {
            #[inline(always)]
            fn from(variant: MGBUSY_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MGBUSY`"]
        pub type MGBUSY_R = crate::R<bool, MGBUSY_A>;
        impl MGBUSY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MGBUSY_A {
                match self.bits {
                    false => MGBUSY_A::_0,
                    true => MGBUSY_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == MGBUSY_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == MGBUSY_A::_1
            }
        }
        #[doc = "Flash Protection Violation Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FPVIOL_A {
            #[doc = "0: No protection violation is detected."]
            _0 = 0,
            #[doc = "1: Protection violation is detected."]
            _1 = 1,
        }
        impl From<FPVIOL_A> for bool {
            #[inline(always)]
            fn from(variant: FPVIOL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FPVIOL`"]
        pub type FPVIOL_R = crate::R<bool, FPVIOL_A>;
        impl FPVIOL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FPVIOL_A {
                match self.bits {
                    false => FPVIOL_A::_0,
                    true => FPVIOL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FPVIOL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FPVIOL_A::_1
            }
        }
        #[doc = "Write proxy for field `FPVIOL`"]
        pub struct FPVIOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPVIOL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPVIOL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No protection violation is detected."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FPVIOL_A::_0)
            }
            #[doc = "Protection violation is detected."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FPVIOL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Flash Access Error Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ACCERR_A {
            #[doc = "0: No access error is detected."]
            _0 = 0,
            #[doc = "1: Access error is detected."]
            _1 = 1,
        }
        impl From<ACCERR_A> for bool {
            #[inline(always)]
            fn from(variant: ACCERR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ACCERR`"]
        pub type ACCERR_R = crate::R<bool, ACCERR_A>;
        impl ACCERR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACCERR_A {
                match self.bits {
                    false => ACCERR_A::_0,
                    true => ACCERR_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ACCERR_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ACCERR_A::_1
            }
        }
        #[doc = "Write proxy for field `ACCERR`"]
        pub struct ACCERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACCERR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACCERR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No access error is detected."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ACCERR_A::_0)
            }
            #[doc = "Access error is detected."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ACCERR_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Command Complete Interrupt Flag\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CCIF_A {
            #[doc = "0: Flash command is in progress."]
            _0 = 0,
            #[doc = "1: Flash command has completed."]
            _1 = 1,
        }
        impl From<CCIF_A> for bool {
            #[inline(always)]
            fn from(variant: CCIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CCIF`"]
        pub type CCIF_R = crate::R<bool, CCIF_A>;
        impl CCIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CCIF_A {
                match self.bits {
                    false => CCIF_A::_0,
                    true => CCIF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CCIF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CCIF_A::_1
            }
        }
        #[doc = "Write proxy for field `CCIF`"]
        pub struct CCIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CCIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Flash command is in progress."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CCIF_A::_0)
            }
            #[doc = "Flash command has completed."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CCIF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Memory Controller Command Completion Status Flag"]
            #[inline(always)]
            pub fn mgstat(&self) -> MGSTAT_R {
                MGSTAT_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 3 - Memory Controller Busy Flag"]
            #[inline(always)]
            pub fn mgbusy(&self) -> MGBUSY_R {
                MGBUSY_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Flash Protection Violation Flag"]
            #[inline(always)]
            pub fn fpviol(&self) -> FPVIOL_R {
                FPVIOL_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Flash Access Error Flag"]
            #[inline(always)]
            pub fn accerr(&self) -> ACCERR_R {
                ACCERR_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Command Complete Interrupt Flag"]
            #[inline(always)]
            pub fn ccif(&self) -> CCIF_R {
                CCIF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 4 - Flash Protection Violation Flag"]
            #[inline(always)]
            pub fn fpviol(&mut self) -> FPVIOL_W {
                FPVIOL_W { w: self }
            }
            #[doc = "Bit 5 - Flash Access Error Flag"]
            #[inline(always)]
            pub fn accerr(&mut self) -> ACCERR_W {
                ACCERR_W { w: self }
            }
            #[doc = "Bit 7 - Command Complete Interrupt Flag"]
            #[inline(always)]
            pub fn ccif(&mut self) -> CCIF_W {
                CCIF_W { w: self }
            }
        }
    }
    #[doc = "Flash Configuration Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fcnfg](fcnfg) module"]
    pub type FCNFG = crate::Reg<u8, _FCNFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCNFG;
    #[doc = "`read()` method returns [fcnfg::R](fcnfg::R) reader structure"]
    impl crate::Readable for FCNFG {}
    #[doc = "`write(|w| ..)` method takes [fcnfg::W](fcnfg::W) writer structure"]
    impl crate::Writable for FCNFG {}
    #[doc = "Flash Configuration Register"]
    pub mod fcnfg {
        #[doc = "Reader of register FCNFG"]
        pub type R = crate::R<u8, super::FCNFG>;
        #[doc = "Writer for register FCNFG"]
        pub type W = crate::W<u8, super::FCNFG>;
        #[doc = "Register FCNFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::FCNFG {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Debugger Mass Erase Request\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ERSAREQ_A {
            #[doc = "0: No request or request complete"]
            _0 = 0,
            #[doc = "1: Request to run the Erase All Blocks command verify the erased state program the security byte in the Flash Configuration Field to the unsecure state release MCU security by setting FSEC\\[SEC\\]
to the unsecure state"]
            _1 = 1,
        }
        impl From<ERSAREQ_A> for bool {
            #[inline(always)]
            fn from(variant: ERSAREQ_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ERSAREQ`"]
        pub type ERSAREQ_R = crate::R<bool, ERSAREQ_A>;
        impl ERSAREQ_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ERSAREQ_A {
                match self.bits {
                    false => ERSAREQ_A::_0,
                    true => ERSAREQ_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ERSAREQ_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ERSAREQ_A::_1
            }
        }
        #[doc = "Command Complete Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CCIE_A {
            #[doc = "0: Command complete interrupt is disabled."]
            _0 = 0,
            #[doc = "1: An interrupt will be requested whenever the CCIF flag in the FSTAT register is set."]
            _1 = 1,
        }
        impl From<CCIE_A> for bool {
            #[inline(always)]
            fn from(variant: CCIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CCIE`"]
        pub type CCIE_R = crate::R<bool, CCIE_A>;
        impl CCIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CCIE_A {
                match self.bits {
                    false => CCIE_A::_0,
                    true => CCIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CCIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CCIE_A::_1
            }
        }
        #[doc = "Write proxy for field `CCIE`"]
        pub struct CCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CCIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Command complete interrupt is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CCIE_A::_0)
            }
            #[doc = "An interrupt will be requested whenever the CCIF flag in the FSTAT register is set."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CCIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 5 - Debugger Mass Erase Request"]
            #[inline(always)]
            pub fn ersareq(&self) -> ERSAREQ_R {
                ERSAREQ_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Command Complete Interrupt Enable"]
            #[inline(always)]
            pub fn ccie(&self) -> CCIE_R {
                CCIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - Command Complete Interrupt Enable"]
            #[inline(always)]
            pub fn ccie(&mut self) -> CCIE_W {
                CCIE_W { w: self }
            }
        }
    }
    #[doc = "Flash Common Command Object Register: Low\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fccoblo](fccoblo) module"]
    pub type FCCOBLO = crate::Reg<u8, _FCCOBLO>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCCOBLO;
    #[doc = "`read()` method returns [fccoblo::R](fccoblo::R) reader structure"]
    impl crate::Readable for FCCOBLO {}
    #[doc = "`write(|w| ..)` method takes [fccoblo::W](fccoblo::W) writer structure"]
    impl crate::Writable for FCCOBLO {}
    #[doc = "Flash Common Command Object Register: Low"]
    pub mod fccoblo {
        #[doc = "Reader of register FCCOBLO"]
        pub type R = crate::R<u8, super::FCCOBLO>;
        #[doc = "Writer for register FCCOBLO"]
        pub type W = crate::W<u8, super::FCCOBLO>;
        #[doc = "Register FCCOBLO `reset()`'s with value 0"]
        impl crate::ResetValue for super::FCCOBLO {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCOB`"]
        pub type CCOB_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CCOB`"]
        pub struct CCOB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCOB_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Common Command Object Bit 7:0"]
            #[inline(always)]
            pub fn ccob(&self) -> CCOB_R {
                CCOB_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Common Command Object Bit 7:0"]
            #[inline(always)]
            pub fn ccob(&mut self) -> CCOB_W {
                CCOB_W { w: self }
            }
        }
    }
    #[doc = "Flash Common Command Object Register:High\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fccobhi](fccobhi) module"]
    pub type FCCOBHI = crate::Reg<u8, _FCCOBHI>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCCOBHI;
    #[doc = "`read()` method returns [fccobhi::R](fccobhi::R) reader structure"]
    impl crate::Readable for FCCOBHI {}
    #[doc = "`write(|w| ..)` method takes [fccobhi::W](fccobhi::W) writer structure"]
    impl crate::Writable for FCCOBHI {}
    #[doc = "Flash Common Command Object Register:High"]
    pub mod fccobhi {
        #[doc = "Reader of register FCCOBHI"]
        pub type R = crate::R<u8, super::FCCOBHI>;
        #[doc = "Writer for register FCCOBHI"]
        pub type W = crate::W<u8, super::FCCOBHI>;
        #[doc = "Register FCCOBHI `reset()`'s with value 0"]
        impl crate::ResetValue for super::FCCOBHI {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCOB`"]
        pub type CCOB_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CCOB`"]
        pub struct CCOB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCOB_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Common Command Object Bit 15:8"]
            #[inline(always)]
            pub fn ccob(&self) -> CCOB_R {
                CCOB_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Common Command Object Bit 15:8"]
            #[inline(always)]
            pub fn ccob(&mut self) -> CCOB_W {
                CCOB_W { w: self }
            }
        }
    }
    #[doc = "Flash Protection Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fprot](fprot) module"]
    pub type FPROT = crate::Reg<u8, _FPROT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FPROT;
    #[doc = "`read()` method returns [fprot::R](fprot::R) reader structure"]
    impl crate::Readable for FPROT {}
    #[doc = "`write(|w| ..)` method takes [fprot::W](fprot::W) writer structure"]
    impl crate::Writable for FPROT {}
    #[doc = "Flash Protection Register"]
    pub mod fprot {
        #[doc = "Reader of register FPROT"]
        pub type R = crate::R<u8, super::FPROT>;
        #[doc = "Writer for register FPROT"]
        pub type W = crate::W<u8, super::FPROT>;
        #[doc = "Register FPROT `reset()`'s with value 0"]
        impl crate::ResetValue for super::FPROT {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FPLS`"]
        pub type FPLS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `FPLS`"]
        pub struct FPLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u8) & 0x03);
                self.w
            }
        }
        #[doc = "Flash Protection Lower Address Range Disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FPLDIS_A {
            #[doc = "0: Protection/Unprotection enabled."]
            _0 = 0,
            #[doc = "1: Protection/Unprotection disabled."]
            _1 = 1,
        }
        impl From<FPLDIS_A> for bool {
            #[inline(always)]
            fn from(variant: FPLDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FPLDIS`"]
        pub type FPLDIS_R = crate::R<bool, FPLDIS_A>;
        impl FPLDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FPLDIS_A {
                match self.bits {
                    false => FPLDIS_A::_0,
                    true => FPLDIS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FPLDIS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FPLDIS_A::_1
            }
        }
        #[doc = "Write proxy for field `FPLDIS`"]
        pub struct FPLDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPLDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPLDIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Protection/Unprotection enabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FPLDIS_A::_0)
            }
            #[doc = "Protection/Unprotection disabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FPLDIS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `RNV`"]
        pub type RNV_R = crate::R<u8, u8>;
        #[doc = "Reader of field `RNV6`"]
        pub type RNV6_R = crate::R<bool, bool>;
        #[doc = "Flash Protection Operation Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FPOPEN_A {
            #[doc = "0: When FPOPEN is clear, the FPLDIS field defines unprotected address ranges as specified by the corresponding FPLS field."]
            _0 = 0,
            #[doc = "1: When FPOPEN is set, the FPLDIS field enables protection for the address range specified by the corresponding FPLS field."]
            _1 = 1,
        }
        impl From<FPOPEN_A> for bool {
            #[inline(always)]
            fn from(variant: FPOPEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FPOPEN`"]
        pub type FPOPEN_R = crate::R<bool, FPOPEN_A>;
        impl FPOPEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FPOPEN_A {
                match self.bits {
                    false => FPOPEN_A::_0,
                    true => FPOPEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FPOPEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FPOPEN_A::_1
            }
        }
        #[doc = "Write proxy for field `FPOPEN`"]
        pub struct FPOPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPOPEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPOPEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "When FPOPEN is clear, the FPLDIS field defines unprotected address ranges as specified by the corresponding FPLS field."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FPOPEN_A::_0)
            }
            #[doc = "When FPOPEN is set, the FPLDIS field enables protection for the address range specified by the corresponding FPLS field."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FPOPEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Flash Protection Lower Address Size"]
            #[inline(always)]
            pub fn fpls(&self) -> FPLS_R {
                FPLS_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 2 - Flash Protection Lower Address Range Disable"]
            #[inline(always)]
            pub fn fpldis(&self) -> FPLDIS_R {
                FPLDIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 3:5 - Reserved Nonvolatile Bit"]
            #[inline(always)]
            pub fn rnv(&self) -> RNV_R {
                RNV_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bit 6 - Reserved Nonvolatile Bit"]
            #[inline(always)]
            pub fn rnv6(&self) -> RNV6_R {
                RNV6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Flash Protection Operation Enable"]
            #[inline(always)]
            pub fn fpopen(&self) -> FPOPEN_R {
                FPOPEN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Flash Protection Lower Address Size"]
            #[inline(always)]
            pub fn fpls(&mut self) -> FPLS_W {
                FPLS_W { w: self }
            }
            #[doc = "Bit 2 - Flash Protection Lower Address Range Disable"]
            #[inline(always)]
            pub fn fpldis(&mut self) -> FPLDIS_W {
                FPLDIS_W { w: self }
            }
            #[doc = "Bit 7 - Flash Protection Operation Enable"]
            #[inline(always)]
            pub fn fpopen(&mut self) -> FPOPEN_W {
                FPOPEN_W { w: self }
            }
        }
    }
    #[doc = "Flash Option Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fopt](fopt) module"]
    pub type FOPT = crate::Reg<u8, _FOPT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FOPT;
    #[doc = "`read()` method returns [fopt::R](fopt::R) reader structure"]
    impl crate::Readable for FOPT {}
    #[doc = "Flash Option Register"]
    pub mod fopt {
        #[doc = "Reader of register FOPT"]
        pub type R = crate::R<u8, super::FOPT>;
        #[doc = "Reader of field `NV`"]
        pub type NV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - Nonvolatile Bits"]
            #[inline(always)]
            pub fn nv(&self) -> NV_R {
                NV_R::new((self.bits & 0xff) as u8)
            }
        }
    }
}
#[doc = "Interrupt"]
pub struct IRQ {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IRQ {}
impl IRQ {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const irq::RegisterBlock {
        0x4003_1000 as *const _
    }
}
impl Deref for IRQ {
    type Target = irq::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*IRQ::ptr() }
    }
}
#[doc = "Interrupt"]
pub mod irq {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Interrupt Pin Request Status and Control Register"]
        pub sc: SC,
    }
    #[doc = "Interrupt Pin Request Status and Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sc](sc) module"]
    pub type SC = crate::Reg<u8, _SC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SC;
    #[doc = "`read()` method returns [sc::R](sc::R) reader structure"]
    impl crate::Readable for SC {}
    #[doc = "`write(|w| ..)` method takes [sc::W](sc::W) writer structure"]
    impl crate::Writable for SC {}
    #[doc = "Interrupt Pin Request Status and Control Register"]
    pub mod sc {
        #[doc = "Reader of register SC"]
        pub type R = crate::R<u8, super::SC>;
        #[doc = "Writer for register SC"]
        pub type W = crate::W<u8, super::SC>;
        #[doc = "Register SC `reset()`'s with value 0"]
        impl crate::ResetValue for super::SC {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "IRQ Detection Mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IRQMOD_A {
            #[doc = "0: IRQ event is detected only on falling/rising edges."]
            _0 = 0,
            #[doc = "1: IRQ event is detected on falling/rising edges and low/high levels."]
            _1 = 1,
        }
        impl From<IRQMOD_A> for bool {
            #[inline(always)]
            fn from(variant: IRQMOD_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IRQMOD`"]
        pub type IRQMOD_R = crate::R<bool, IRQMOD_A>;
        impl IRQMOD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IRQMOD_A {
                match self.bits {
                    false => IRQMOD_A::_0,
                    true => IRQMOD_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == IRQMOD_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == IRQMOD_A::_1
            }
        }
        #[doc = "Write proxy for field `IRQMOD`"]
        pub struct IRQMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQMOD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IRQMOD_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "IRQ event is detected only on falling/rising edges."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(IRQMOD_A::_0)
            }
            #[doc = "IRQ event is detected on falling/rising edges and low/high levels."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(IRQMOD_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        #[doc = "IRQ Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IRQIE_A {
            #[doc = "0: Interrupt request when IRQF set is disabled (use polling)."]
            _0 = 0,
            #[doc = "1: Interrupt requested whenever IRQF = 1."]
            _1 = 1,
        }
        impl From<IRQIE_A> for bool {
            #[inline(always)]
            fn from(variant: IRQIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IRQIE`"]
        pub type IRQIE_R = crate::R<bool, IRQIE_A>;
        impl IRQIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IRQIE_A {
                match self.bits {
                    false => IRQIE_A::_0,
                    true => IRQIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == IRQIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == IRQIE_A::_1
            }
        }
        #[doc = "Write proxy for field `IRQIE`"]
        pub struct IRQIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IRQIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request when IRQF set is disabled (use polling)."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(IRQIE_A::_0)
            }
            #[doc = "Interrupt requested whenever IRQF = 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(IRQIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `IRQACK`"]
        pub struct IRQACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "IRQ Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IRQF_A {
            #[doc = "0: No IRQ request"]
            _0 = 0,
            #[doc = "1: IRQ event is detected."]
            _1 = 1,
        }
        impl From<IRQF_A> for bool {
            #[inline(always)]
            fn from(variant: IRQF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IRQF`"]
        pub type IRQF_R = crate::R<bool, IRQF_A>;
        impl IRQF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IRQF_A {
                match self.bits {
                    false => IRQF_A::_0,
                    true => IRQF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == IRQF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == IRQF_A::_1
            }
        }
        #[doc = "IRQ Pin Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IRQPE_A {
            #[doc = "0: IRQ pin function is disabled."]
            _0 = 0,
            #[doc = "1: IRQ pin function is enabled."]
            _1 = 1,
        }
        impl From<IRQPE_A> for bool {
            #[inline(always)]
            fn from(variant: IRQPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IRQPE`"]
        pub type IRQPE_R = crate::R<bool, IRQPE_A>;
        impl IRQPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IRQPE_A {
                match self.bits {
                    false => IRQPE_A::_0,
                    true => IRQPE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == IRQPE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == IRQPE_A::_1
            }
        }
        #[doc = "Write proxy for field `IRQPE`"]
        pub struct IRQPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IRQPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "IRQ pin function is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(IRQPE_A::_0)
            }
            #[doc = "IRQ pin function is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(IRQPE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Interrupt Request (IRQ) Edge Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IRQEDG_A {
            #[doc = "0: IRQ is falling-edge or falling-edge/low-level sensitive."]
            _0 = 0,
            #[doc = "1: IRQ is rising-edge or rising-edge/high-level sensitive."]
            _1 = 1,
        }
        impl From<IRQEDG_A> for bool {
            #[inline(always)]
            fn from(variant: IRQEDG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IRQEDG`"]
        pub type IRQEDG_R = crate::R<bool, IRQEDG_A>;
        impl IRQEDG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IRQEDG_A {
                match self.bits {
                    false => IRQEDG_A::_0,
                    true => IRQEDG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == IRQEDG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == IRQEDG_A::_1
            }
        }
        #[doc = "Write proxy for field `IRQEDG`"]
        pub struct IRQEDG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQEDG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IRQEDG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "IRQ is falling-edge or falling-edge/low-level sensitive."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(IRQEDG_A::_0)
            }
            #[doc = "IRQ is rising-edge or rising-edge/high-level sensitive."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(IRQEDG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Interrupt Request (IRQ) Pull Device Disable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IRQPDD_A {
            #[doc = "0: IRQ pull device enabled if IRQPE = 1."]
            _0 = 0,
            #[doc = "1: IRQ pull device disabled if IRQPE = 1."]
            _1 = 1,
        }
        impl From<IRQPDD_A> for bool {
            #[inline(always)]
            fn from(variant: IRQPDD_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IRQPDD`"]
        pub type IRQPDD_R = crate::R<bool, IRQPDD_A>;
        impl IRQPDD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IRQPDD_A {
                match self.bits {
                    false => IRQPDD_A::_0,
                    true => IRQPDD_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == IRQPDD_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == IRQPDD_A::_1
            }
        }
        #[doc = "Write proxy for field `IRQPDD`"]
        pub struct IRQPDD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQPDD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IRQPDD_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "IRQ pull device enabled if IRQPE = 1."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(IRQPDD_A::_0)
            }
            #[doc = "IRQ pull device disabled if IRQPE = 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(IRQPDD_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - IRQ Detection Mode"]
            #[inline(always)]
            pub fn irqmod(&self) -> IRQMOD_R {
                IRQMOD_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - IRQ Interrupt Enable"]
            #[inline(always)]
            pub fn irqie(&self) -> IRQIE_R {
                IRQIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - IRQ Flag"]
            #[inline(always)]
            pub fn irqf(&self) -> IRQF_R {
                IRQF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - IRQ Pin Enable"]
            #[inline(always)]
            pub fn irqpe(&self) -> IRQPE_R {
                IRQPE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Interrupt Request (IRQ) Edge Select"]
            #[inline(always)]
            pub fn irqedg(&self) -> IRQEDG_R {
                IRQEDG_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Interrupt Request (IRQ) Pull Device Disable"]
            #[inline(always)]
            pub fn irqpdd(&self) -> IRQPDD_R {
                IRQPDD_R::new(((self.bits >> 6) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - IRQ Detection Mode"]
            #[inline(always)]
            pub fn irqmod(&mut self) -> IRQMOD_W {
                IRQMOD_W { w: self }
            }
            #[doc = "Bit 1 - IRQ Interrupt Enable"]
            #[inline(always)]
            pub fn irqie(&mut self) -> IRQIE_W {
                IRQIE_W { w: self }
            }
            #[doc = "Bit 2 - IRQ Acknowledge"]
            #[inline(always)]
            pub fn irqack(&mut self) -> IRQACK_W {
                IRQACK_W { w: self }
            }
            #[doc = "Bit 4 - IRQ Pin Enable"]
            #[inline(always)]
            pub fn irqpe(&mut self) -> IRQPE_W {
                IRQPE_W { w: self }
            }
            #[doc = "Bit 5 - Interrupt Request (IRQ) Edge Select"]
            #[inline(always)]
            pub fn irqedg(&mut self) -> IRQEDG_W {
                IRQEDG_W { w: self }
            }
            #[doc = "Bit 6 - Interrupt Request (IRQ) Pull Device Disable"]
            #[inline(always)]
            pub fn irqpdd(&mut self) -> IRQPDD_W {
                IRQPDD_W { w: self }
            }
        }
    }
}
#[doc = "Cyclic Redundancy Check"]
pub struct CRC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRC {}
impl CRC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const crc::RegisterBlock {
        0x4003_2000 as *const _
    }
}
impl Deref for CRC {
    type Target = crc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*CRC::ptr() }
    }
}
#[doc = "Cyclic Redundancy Check"]
pub mod crc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved_0_data: [u8; 4usize],
        _reserved_1_gpoly: [u8; 4usize],
        _reserved_2_ctrl: [u8; 4usize],
    }
    impl RegisterBlock {
        #[doc = "0x00 - CRC_DATALL register."]
        #[inline(always)]
        pub fn datall(&self) -> &DATALL {
            unsafe { &*(((self as *const Self) as *const u8).add(0usize) as *const DATALL) }
        }
        #[doc = "0x00 - CRC_DATALL register."]
        #[inline(always)]
        pub fn datall_mut(&self) -> &mut DATALL {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(0usize) as *mut DATALL) }
        }
        #[doc = "0x00 - CRC_DATAL register."]
        #[inline(always)]
        pub fn datal(&self) -> &DATAL {
            unsafe { &*(((self as *const Self) as *const u8).add(0usize) as *const DATAL) }
        }
        #[doc = "0x00 - CRC_DATAL register."]
        #[inline(always)]
        pub fn datal_mut(&self) -> &mut DATAL {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(0usize) as *mut DATAL) }
        }
        #[doc = "0x00 - CRC Data register"]
        #[inline(always)]
        pub fn data(&self) -> &DATA {
            unsafe { &*(((self as *const Self) as *const u8).add(0usize) as *const DATA) }
        }
        #[doc = "0x00 - CRC Data register"]
        #[inline(always)]
        pub fn data_mut(&self) -> &mut DATA {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(0usize) as *mut DATA) }
        }
        #[doc = "0x01 - CRC_DATALU register."]
        #[inline(always)]
        pub fn datalu(&self) -> &DATALU {
            unsafe { &*(((self as *const Self) as *const u8).add(1usize) as *const DATALU) }
        }
        #[doc = "0x01 - CRC_DATALU register."]
        #[inline(always)]
        pub fn datalu_mut(&self) -> &mut DATALU {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(1usize) as *mut DATALU) }
        }
        #[doc = "0x02 - CRC_DATAHL register."]
        #[inline(always)]
        pub fn datahl(&self) -> &DATAHL {
            unsafe { &*(((self as *const Self) as *const u8).add(2usize) as *const DATAHL) }
        }
        #[doc = "0x02 - CRC_DATAHL register."]
        #[inline(always)]
        pub fn datahl_mut(&self) -> &mut DATAHL {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(2usize) as *mut DATAHL) }
        }
        #[doc = "0x02 - CRC_DATAH register."]
        #[inline(always)]
        pub fn datah(&self) -> &DATAH {
            unsafe { &*(((self as *const Self) as *const u8).add(2usize) as *const DATAH) }
        }
        #[doc = "0x02 - CRC_DATAH register."]
        #[inline(always)]
        pub fn datah_mut(&self) -> &mut DATAH {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(2usize) as *mut DATAH) }
        }
        #[doc = "0x03 - CRC_DATAHU register."]
        #[inline(always)]
        pub fn datahu(&self) -> &DATAHU {
            unsafe { &*(((self as *const Self) as *const u8).add(3usize) as *const DATAHU) }
        }
        #[doc = "0x03 - CRC_DATAHU register."]
        #[inline(always)]
        pub fn datahu_mut(&self) -> &mut DATAHU {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(3usize) as *mut DATAHU) }
        }
        #[doc = "0x04 - CRC_GPOLYLL register."]
        #[inline(always)]
        pub fn gpolyll(&self) -> &GPOLYLL {
            unsafe { &*(((self as *const Self) as *const u8).add(4usize) as *const GPOLYLL) }
        }
        #[doc = "0x04 - CRC_GPOLYLL register."]
        #[inline(always)]
        pub fn gpolyll_mut(&self) -> &mut GPOLYLL {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(4usize) as *mut GPOLYLL) }
        }
        #[doc = "0x04 - CRC_GPOLYL register."]
        #[inline(always)]
        pub fn gpolyl(&self) -> &GPOLYL {
            unsafe { &*(((self as *const Self) as *const u8).add(4usize) as *const GPOLYL) }
        }
        #[doc = "0x04 - CRC_GPOLYL register."]
        #[inline(always)]
        pub fn gpolyl_mut(&self) -> &mut GPOLYL {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(4usize) as *mut GPOLYL) }
        }
        #[doc = "0x04 - CRC Polynomial register"]
        #[inline(always)]
        pub fn gpoly(&self) -> &GPOLY {
            unsafe { &*(((self as *const Self) as *const u8).add(4usize) as *const GPOLY) }
        }
        #[doc = "0x04 - CRC Polynomial register"]
        #[inline(always)]
        pub fn gpoly_mut(&self) -> &mut GPOLY {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(4usize) as *mut GPOLY) }
        }
        #[doc = "0x05 - CRC_GPOLYLU register."]
        #[inline(always)]
        pub fn gpolylu(&self) -> &GPOLYLU {
            unsafe { &*(((self as *const Self) as *const u8).add(5usize) as *const GPOLYLU) }
        }
        #[doc = "0x05 - CRC_GPOLYLU register."]
        #[inline(always)]
        pub fn gpolylu_mut(&self) -> &mut GPOLYLU {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(5usize) as *mut GPOLYLU) }
        }
        #[doc = "0x06 - CRC_GPOLYHL register."]
        #[inline(always)]
        pub fn gpolyhl(&self) -> &GPOLYHL {
            unsafe { &*(((self as *const Self) as *const u8).add(6usize) as *const GPOLYHL) }
        }
        #[doc = "0x06 - CRC_GPOLYHL register."]
        #[inline(always)]
        pub fn gpolyhl_mut(&self) -> &mut GPOLYHL {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(6usize) as *mut GPOLYHL) }
        }
        #[doc = "0x06 - CRC_GPOLYH register."]
        #[inline(always)]
        pub fn gpolyh(&self) -> &GPOLYH {
            unsafe { &*(((self as *const Self) as *const u8).add(6usize) as *const GPOLYH) }
        }
        #[doc = "0x06 - CRC_GPOLYH register."]
        #[inline(always)]
        pub fn gpolyh_mut(&self) -> &mut GPOLYH {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(6usize) as *mut GPOLYH) }
        }
        #[doc = "0x07 - CRC_GPOLYHU register."]
        #[inline(always)]
        pub fn gpolyhu(&self) -> &GPOLYHU {
            unsafe { &*(((self as *const Self) as *const u8).add(7usize) as *const GPOLYHU) }
        }
        #[doc = "0x07 - CRC_GPOLYHU register."]
        #[inline(always)]
        pub fn gpolyhu_mut(&self) -> &mut GPOLYHU {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(7usize) as *mut GPOLYHU) }
        }
        #[doc = "0x08 - CRC Control register"]
        #[inline(always)]
        pub fn ctrl(&self) -> &CTRL {
            unsafe { &*(((self as *const Self) as *const u8).add(8usize) as *const CTRL) }
        }
        #[doc = "0x08 - CRC Control register"]
        #[inline(always)]
        pub fn ctrl_mut(&self) -> &mut CTRL {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(8usize) as *mut CTRL) }
        }
        #[doc = "0x0b - CRC_CTRLHU register."]
        #[inline(always)]
        pub fn ctrlhu(&self) -> &CTRLHU {
            unsafe { &*(((self as *const Self) as *const u8).add(11usize) as *const CTRLHU) }
        }
        #[doc = "0x0b - CRC_CTRLHU register."]
        #[inline(always)]
        pub fn ctrlhu_mut(&self) -> &mut CTRLHU {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(11usize) as *mut CTRLHU) }
        }
    }
    #[doc = "CRC Data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [data](data) module"]
    pub type DATA = crate::Reg<u32, _DATA>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DATA;
    #[doc = "`read()` method returns [data::R](data::R) reader structure"]
    impl crate::Readable for DATA {}
    #[doc = "`write(|w| ..)` method takes [data::W](data::W) writer structure"]
    impl crate::Writable for DATA {}
    #[doc = "CRC Data register"]
    pub mod data {
        #[doc = "Reader of register DATA"]
        pub type R = crate::R<u32, super::DATA>;
        #[doc = "Writer for register DATA"]
        pub type W = crate::W<u32, super::DATA>;
        #[doc = "Register DATA `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::DATA {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `LL`"]
        pub type LL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LL`"]
        pub struct LL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "Reader of field `LU`"]
        pub type LU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LU`"]
        pub struct LU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `HL`"]
        pub type HL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HL`"]
        pub struct HL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 16)) | (((value as u32) & 0xff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `HU`"]
        pub type HU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HU`"]
        pub struct HU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | (((value as u32) & 0xff) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - CRC Low Lower Byte"]
            #[inline(always)]
            pub fn ll(&self) -> LL_R {
                LL_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - CRC Low Upper Byte"]
            #[inline(always)]
            pub fn lu(&self) -> LU_R {
                LU_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - CRC High Lower Byte"]
            #[inline(always)]
            pub fn hl(&self) -> HL_R {
                HL_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - CRC High Upper Byte"]
            #[inline(always)]
            pub fn hu(&self) -> HU_R {
                HU_R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - CRC Low Lower Byte"]
            #[inline(always)]
            pub fn ll(&mut self) -> LL_W {
                LL_W { w: self }
            }
            #[doc = "Bits 8:15 - CRC Low Upper Byte"]
            #[inline(always)]
            pub fn lu(&mut self) -> LU_W {
                LU_W { w: self }
            }
            #[doc = "Bits 16:23 - CRC High Lower Byte"]
            #[inline(always)]
            pub fn hl(&mut self) -> HL_W {
                HL_W { w: self }
            }
            #[doc = "Bits 24:31 - CRC High Upper Byte"]
            #[inline(always)]
            pub fn hu(&mut self) -> HU_W {
                HU_W { w: self }
            }
        }
    }
    #[doc = "CRC_DATAL register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datal](datal) module"]
    pub type DATAL = crate::Reg<u16, _DATAL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DATAL;
    #[doc = "`read()` method returns [datal::R](datal::R) reader structure"]
    impl crate::Readable for DATAL {}
    #[doc = "`write(|w| ..)` method takes [datal::W](datal::W) writer structure"]
    impl crate::Writable for DATAL {}
    #[doc = "CRC_DATAL register."]
    pub mod datal {
        #[doc = "Reader of register DATAL"]
        pub type R = crate::R<u16, super::DATAL>;
        #[doc = "Writer for register DATAL"]
        pub type W = crate::W<u16, super::DATAL>;
        #[doc = "Register DATAL `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::DATAL {
            type Type = u16;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `DATAL`"]
        pub type DATAL_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DATAL`"]
        pub struct DATAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u16) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - DATAL stores the lower 16 bits of the 16/32 bit CRC"]
            #[inline(always)]
            pub fn datal(&self) -> DATAL_R {
                DATAL_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DATAL stores the lower 16 bits of the 16/32 bit CRC"]
            #[inline(always)]
            pub fn datal(&mut self) -> DATAL_W {
                DATAL_W { w: self }
            }
        }
    }
    #[doc = "CRC_DATALL register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datall](datall) module"]
    pub type DATALL = crate::Reg<u8, _DATALL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DATALL;
    #[doc = "`read()` method returns [datall::R](datall::R) reader structure"]
    impl crate::Readable for DATALL {}
    #[doc = "`write(|w| ..)` method takes [datall::W](datall::W) writer structure"]
    impl crate::Writable for DATALL {}
    #[doc = "CRC_DATALL register."]
    pub mod datall {
        #[doc = "Reader of register DATALL"]
        pub type R = crate::R<u8, super::DATALL>;
        #[doc = "Writer for register DATALL"]
        pub type W = crate::W<u8, super::DATALL>;
        #[doc = "Register DATALL `reset()`'s with value 0xff"]
        impl crate::ResetValue for super::DATALL {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xff
            }
        }
        #[doc = "Reader of field `DATALL`"]
        pub type DATALL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DATALL`"]
        pub struct DATALL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATALL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - CRCLL stores the first 8 bits of the 32 bit DATA"]
            #[inline(always)]
            pub fn datall(&self) -> DATALL_R {
                DATALL_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - CRCLL stores the first 8 bits of the 32 bit DATA"]
            #[inline(always)]
            pub fn datall(&mut self) -> DATALL_W {
                DATALL_W { w: self }
            }
        }
    }
    #[doc = "CRC_DATALU register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datalu](datalu) module"]
    pub type DATALU = crate::Reg<u8, _DATALU>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DATALU;
    #[doc = "`read()` method returns [datalu::R](datalu::R) reader structure"]
    impl crate::Readable for DATALU {}
    #[doc = "`write(|w| ..)` method takes [datalu::W](datalu::W) writer structure"]
    impl crate::Writable for DATALU {}
    #[doc = "CRC_DATALU register."]
    pub mod datalu {
        #[doc = "Reader of register DATALU"]
        pub type R = crate::R<u8, super::DATALU>;
        #[doc = "Writer for register DATALU"]
        pub type W = crate::W<u8, super::DATALU>;
        #[doc = "Register DATALU `reset()`'s with value 0xff"]
        impl crate::ResetValue for super::DATALU {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xff
            }
        }
        #[doc = "Reader of field `DATALU`"]
        pub type DATALU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DATALU`"]
        pub struct DATALU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATALU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - DATALL stores the second 8 bits of the 32 bit CRC"]
            #[inline(always)]
            pub fn datalu(&self) -> DATALU_R {
                DATALU_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - DATALL stores the second 8 bits of the 32 bit CRC"]
            #[inline(always)]
            pub fn datalu(&mut self) -> DATALU_W {
                DATALU_W { w: self }
            }
        }
    }
    #[doc = "CRC_DATAH register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datah](datah) module"]
    pub type DATAH = crate::Reg<u16, _DATAH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DATAH;
    #[doc = "`read()` method returns [datah::R](datah::R) reader structure"]
    impl crate::Readable for DATAH {}
    #[doc = "`write(|w| ..)` method takes [datah::W](datah::W) writer structure"]
    impl crate::Writable for DATAH {}
    #[doc = "CRC_DATAH register."]
    pub mod datah {
        #[doc = "Reader of register DATAH"]
        pub type R = crate::R<u16, super::DATAH>;
        #[doc = "Writer for register DATAH"]
        pub type W = crate::W<u16, super::DATAH>;
        #[doc = "Register DATAH `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::DATAH {
            type Type = u16;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `DATAH`"]
        pub type DATAH_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DATAH`"]
        pub struct DATAH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATAH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u16) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - DATAH stores the high 16 bits of the 16/32 bit CRC"]
            #[inline(always)]
            pub fn datah(&self) -> DATAH_R {
                DATAH_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DATAH stores the high 16 bits of the 16/32 bit CRC"]
            #[inline(always)]
            pub fn datah(&mut self) -> DATAH_W {
                DATAH_W { w: self }
            }
        }
    }
    #[doc = "CRC_DATAHL register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datahl](datahl) module"]
    pub type DATAHL = crate::Reg<u8, _DATAHL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DATAHL;
    #[doc = "`read()` method returns [datahl::R](datahl::R) reader structure"]
    impl crate::Readable for DATAHL {}
    #[doc = "`write(|w| ..)` method takes [datahl::W](datahl::W) writer structure"]
    impl crate::Writable for DATAHL {}
    #[doc = "CRC_DATAHL register."]
    pub mod datahl {
        #[doc = "Reader of register DATAHL"]
        pub type R = crate::R<u8, super::DATAHL>;
        #[doc = "Writer for register DATAHL"]
        pub type W = crate::W<u8, super::DATAHL>;
        #[doc = "Register DATAHL `reset()`'s with value 0xff"]
        impl crate::ResetValue for super::DATAHL {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xff
            }
        }
        #[doc = "Reader of field `DATAHL`"]
        pub type DATAHL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DATAHL`"]
        pub struct DATAHL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATAHL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - DATAHL stores the third 8 bits of the 32 bit CRC"]
            #[inline(always)]
            pub fn datahl(&self) -> DATAHL_R {
                DATAHL_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - DATAHL stores the third 8 bits of the 32 bit CRC"]
            #[inline(always)]
            pub fn datahl(&mut self) -> DATAHL_W {
                DATAHL_W { w: self }
            }
        }
    }
    #[doc = "CRC_DATAHU register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datahu](datahu) module"]
    pub type DATAHU = crate::Reg<u8, _DATAHU>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DATAHU;
    #[doc = "`read()` method returns [datahu::R](datahu::R) reader structure"]
    impl crate::Readable for DATAHU {}
    #[doc = "`write(|w| ..)` method takes [datahu::W](datahu::W) writer structure"]
    impl crate::Writable for DATAHU {}
    #[doc = "CRC_DATAHU register."]
    pub mod datahu {
        #[doc = "Reader of register DATAHU"]
        pub type R = crate::R<u8, super::DATAHU>;
        #[doc = "Writer for register DATAHU"]
        pub type W = crate::W<u8, super::DATAHU>;
        #[doc = "Register DATAHU `reset()`'s with value 0xff"]
        impl crate::ResetValue for super::DATAHU {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xff
            }
        }
        #[doc = "Reader of field `DATAHU`"]
        pub type DATAHU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DATAHU`"]
        pub struct DATAHU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATAHU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - DATAHU stores the fourth 8 bits of the 32 bit CRC"]
            #[inline(always)]
            pub fn datahu(&self) -> DATAHU_R {
                DATAHU_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - DATAHU stores the fourth 8 bits of the 32 bit CRC"]
            #[inline(always)]
            pub fn datahu(&mut self) -> DATAHU_W {
                DATAHU_W { w: self }
            }
        }
    }
    #[doc = "CRC Polynomial register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpoly](gpoly) module"]
    pub type GPOLY = crate::Reg<u32, _GPOLY>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPOLY;
    #[doc = "`read()` method returns [gpoly::R](gpoly::R) reader structure"]
    impl crate::Readable for GPOLY {}
    #[doc = "`write(|w| ..)` method takes [gpoly::W](gpoly::W) writer structure"]
    impl crate::Writable for GPOLY {}
    #[doc = "CRC Polynomial register"]
    pub mod gpoly {
        #[doc = "Reader of register GPOLY"]
        pub type R = crate::R<u32, super::GPOLY>;
        #[doc = "Writer for register GPOLY"]
        pub type W = crate::W<u32, super::GPOLY>;
        #[doc = "Register GPOLY `reset()`'s with value 0x1021"]
        impl crate::ResetValue for super::GPOLY {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x1021
            }
        }
        #[doc = "Reader of field `LOW`"]
        pub type LOW_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `LOW`"]
        pub struct LOW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOW_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        #[doc = "Reader of field `HIGH`"]
        pub type HIGH_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `HIGH`"]
        pub struct HIGH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HIGH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | (((value as u32) & 0xffff) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Low Polynominal Half-word"]
            #[inline(always)]
            pub fn low(&self) -> LOW_R {
                LOW_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31 - High Polynominal Half-word"]
            #[inline(always)]
            pub fn high(&self) -> HIGH_R {
                HIGH_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Low Polynominal Half-word"]
            #[inline(always)]
            pub fn low(&mut self) -> LOW_W {
                LOW_W { w: self }
            }
            #[doc = "Bits 16:31 - High Polynominal Half-word"]
            #[inline(always)]
            pub fn high(&mut self) -> HIGH_W {
                HIGH_W { w: self }
            }
        }
    }
    #[doc = "CRC_GPOLYL register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpolyl](gpolyl) module"]
    pub type GPOLYL = crate::Reg<u16, _GPOLYL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPOLYL;
    #[doc = "`read()` method returns [gpolyl::R](gpolyl::R) reader structure"]
    impl crate::Readable for GPOLYL {}
    #[doc = "`write(|w| ..)` method takes [gpolyl::W](gpolyl::W) writer structure"]
    impl crate::Writable for GPOLYL {}
    #[doc = "CRC_GPOLYL register."]
    pub mod gpolyl {
        #[doc = "Reader of register GPOLYL"]
        pub type R = crate::R<u16, super::GPOLYL>;
        #[doc = "Writer for register GPOLYL"]
        pub type W = crate::W<u16, super::GPOLYL>;
        #[doc = "Register GPOLYL `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::GPOLYL {
            type Type = u16;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `GPOLYL`"]
        pub type GPOLYL_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `GPOLYL`"]
        pub struct GPOLYL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPOLYL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u16) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - POLYL stores the lower 16 bits of the 16/32 bit CRC polynomial value"]
            #[inline(always)]
            pub fn gpolyl(&self) -> GPOLYL_R {
                GPOLYL_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - POLYL stores the lower 16 bits of the 16/32 bit CRC polynomial value"]
            #[inline(always)]
            pub fn gpolyl(&mut self) -> GPOLYL_W {
                GPOLYL_W { w: self }
            }
        }
    }
    #[doc = "CRC_GPOLYLL register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpolyll](gpolyll) module"]
    pub type GPOLYLL = crate::Reg<u8, _GPOLYLL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPOLYLL;
    #[doc = "`read()` method returns [gpolyll::R](gpolyll::R) reader structure"]
    impl crate::Readable for GPOLYLL {}
    #[doc = "`write(|w| ..)` method takes [gpolyll::W](gpolyll::W) writer structure"]
    impl crate::Writable for GPOLYLL {}
    #[doc = "CRC_GPOLYLL register."]
    pub mod gpolyll {
        #[doc = "Reader of register GPOLYLL"]
        pub type R = crate::R<u8, super::GPOLYLL>;
        #[doc = "Writer for register GPOLYLL"]
        pub type W = crate::W<u8, super::GPOLYLL>;
        #[doc = "Register GPOLYLL `reset()`'s with value 0xff"]
        impl crate::ResetValue for super::GPOLYLL {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xff
            }
        }
        #[doc = "Reader of field `GPOLYLL`"]
        pub type GPOLYLL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GPOLYLL`"]
        pub struct GPOLYLL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPOLYLL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - POLYLL stores the first 8 bits of the 32 bit CRC"]
            #[inline(always)]
            pub fn gpolyll(&self) -> GPOLYLL_R {
                GPOLYLL_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - POLYLL stores the first 8 bits of the 32 bit CRC"]
            #[inline(always)]
            pub fn gpolyll(&mut self) -> GPOLYLL_W {
                GPOLYLL_W { w: self }
            }
        }
    }
    #[doc = "CRC_GPOLYLU register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpolylu](gpolylu) module"]
    pub type GPOLYLU = crate::Reg<u8, _GPOLYLU>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPOLYLU;
    #[doc = "`read()` method returns [gpolylu::R](gpolylu::R) reader structure"]
    impl crate::Readable for GPOLYLU {}
    #[doc = "`write(|w| ..)` method takes [gpolylu::W](gpolylu::W) writer structure"]
    impl crate::Writable for GPOLYLU {}
    #[doc = "CRC_GPOLYLU register."]
    pub mod gpolylu {
        #[doc = "Reader of register GPOLYLU"]
        pub type R = crate::R<u8, super::GPOLYLU>;
        #[doc = "Writer for register GPOLYLU"]
        pub type W = crate::W<u8, super::GPOLYLU>;
        #[doc = "Register GPOLYLU `reset()`'s with value 0xff"]
        impl crate::ResetValue for super::GPOLYLU {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xff
            }
        }
        #[doc = "Reader of field `GPOLYLU`"]
        pub type GPOLYLU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GPOLYLU`"]
        pub struct GPOLYLU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPOLYLU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - POLYLL stores the second 8 bits of the 32 bit CRC"]
            #[inline(always)]
            pub fn gpolylu(&self) -> GPOLYLU_R {
                GPOLYLU_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - POLYLL stores the second 8 bits of the 32 bit CRC"]
            #[inline(always)]
            pub fn gpolylu(&mut self) -> GPOLYLU_W {
                GPOLYLU_W { w: self }
            }
        }
    }
    #[doc = "CRC_GPOLYH register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpolyh](gpolyh) module"]
    pub type GPOLYH = crate::Reg<u16, _GPOLYH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPOLYH;
    #[doc = "`read()` method returns [gpolyh::R](gpolyh::R) reader structure"]
    impl crate::Readable for GPOLYH {}
    #[doc = "`write(|w| ..)` method takes [gpolyh::W](gpolyh::W) writer structure"]
    impl crate::Writable for GPOLYH {}
    #[doc = "CRC_GPOLYH register."]
    pub mod gpolyh {
        #[doc = "Reader of register GPOLYH"]
        pub type R = crate::R<u16, super::GPOLYH>;
        #[doc = "Writer for register GPOLYH"]
        pub type W = crate::W<u16, super::GPOLYH>;
        #[doc = "Register GPOLYH `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::GPOLYH {
            type Type = u16;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `GPOLYH`"]
        pub type GPOLYH_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `GPOLYH`"]
        pub struct GPOLYH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPOLYH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u16) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - POLYH stores the high 16 bits of the 16/32 bit CRC polynomial value"]
            #[inline(always)]
            pub fn gpolyh(&self) -> GPOLYH_R {
                GPOLYH_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - POLYH stores the high 16 bits of the 16/32 bit CRC polynomial value"]
            #[inline(always)]
            pub fn gpolyh(&mut self) -> GPOLYH_W {
                GPOLYH_W { w: self }
            }
        }
    }
    #[doc = "CRC_GPOLYHL register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpolyhl](gpolyhl) module"]
    pub type GPOLYHL = crate::Reg<u8, _GPOLYHL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPOLYHL;
    #[doc = "`read()` method returns [gpolyhl::R](gpolyhl::R) reader structure"]
    impl crate::Readable for GPOLYHL {}
    #[doc = "`write(|w| ..)` method takes [gpolyhl::W](gpolyhl::W) writer structure"]
    impl crate::Writable for GPOLYHL {}
    #[doc = "CRC_GPOLYHL register."]
    pub mod gpolyhl {
        #[doc = "Reader of register GPOLYHL"]
        pub type R = crate::R<u8, super::GPOLYHL>;
        #[doc = "Writer for register GPOLYHL"]
        pub type W = crate::W<u8, super::GPOLYHL>;
        #[doc = "Register GPOLYHL `reset()`'s with value 0xff"]
        impl crate::ResetValue for super::GPOLYHL {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xff
            }
        }
        #[doc = "Reader of field `GPOLYHL`"]
        pub type GPOLYHL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GPOLYHL`"]
        pub struct GPOLYHL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPOLYHL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - POLYHL stores the third 8 bits of the 32 bit CRC"]
            #[inline(always)]
            pub fn gpolyhl(&self) -> GPOLYHL_R {
                GPOLYHL_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - POLYHL stores the third 8 bits of the 32 bit CRC"]
            #[inline(always)]
            pub fn gpolyhl(&mut self) -> GPOLYHL_W {
                GPOLYHL_W { w: self }
            }
        }
    }
    #[doc = "CRC_GPOLYHU register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpolyhu](gpolyhu) module"]
    pub type GPOLYHU = crate::Reg<u8, _GPOLYHU>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPOLYHU;
    #[doc = "`read()` method returns [gpolyhu::R](gpolyhu::R) reader structure"]
    impl crate::Readable for GPOLYHU {}
    #[doc = "`write(|w| ..)` method takes [gpolyhu::W](gpolyhu::W) writer structure"]
    impl crate::Writable for GPOLYHU {}
    #[doc = "CRC_GPOLYHU register."]
    pub mod gpolyhu {
        #[doc = "Reader of register GPOLYHU"]
        pub type R = crate::R<u8, super::GPOLYHU>;
        #[doc = "Writer for register GPOLYHU"]
        pub type W = crate::W<u8, super::GPOLYHU>;
        #[doc = "Register GPOLYHU `reset()`'s with value 0xff"]
        impl crate::ResetValue for super::GPOLYHU {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xff
            }
        }
        #[doc = "Reader of field `GPOLYHU`"]
        pub type GPOLYHU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GPOLYHU`"]
        pub struct GPOLYHU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPOLYHU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - POLYHU stores the fourth 8 bits of the 32 bit CRC"]
            #[inline(always)]
            pub fn gpolyhu(&self) -> GPOLYHU_R {
                GPOLYHU_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - POLYHU stores the fourth 8 bits of the 32 bit CRC"]
            #[inline(always)]
            pub fn gpolyhu(&mut self) -> GPOLYHU_W {
                GPOLYHU_W { w: self }
            }
        }
    }
    #[doc = "CRC Control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctrl](ctrl) module"]
    pub type CTRL = crate::Reg<u32, _CTRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTRL;
    #[doc = "`read()` method returns [ctrl::R](ctrl::R) reader structure"]
    impl crate::Readable for CTRL {}
    #[doc = "`write(|w| ..)` method takes [ctrl::W](ctrl::W) writer structure"]
    impl crate::Writable for CTRL {}
    #[doc = "CRC Control register"]
    pub mod ctrl {
        #[doc = "Reader of register CTRL"]
        pub type R = crate::R<u32, super::CTRL>;
        #[doc = "Writer for register CTRL"]
        pub type W = crate::W<u32, super::CTRL>;
        #[doc = "Register CTRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Width of CRC protocol.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TCRC_A {
            #[doc = "0: 16-bit CRC protocol."]
            _0 = 0,
            #[doc = "1: 32-bit CRC protocol."]
            _1 = 1,
        }
        impl From<TCRC_A> for bool {
            #[inline(always)]
            fn from(variant: TCRC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TCRC`"]
        pub type TCRC_R = crate::R<bool, TCRC_A>;
        impl TCRC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TCRC_A {
                match self.bits {
                    false => TCRC_A::_0,
                    true => TCRC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TCRC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TCRC_A::_1
            }
        }
        #[doc = "Write proxy for field `TCRC`"]
        pub struct TCRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCRC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TCRC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "16-bit CRC protocol."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TCRC_A::_0)
            }
            #[doc = "32-bit CRC protocol."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TCRC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Write CRC Data Register As Seed\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WAS_A {
            #[doc = "0: Writes to the CRC data register are data values."]
            _0 = 0,
            #[doc = "1: Writes to the CRC data register are seed values."]
            _1 = 1,
        }
        impl From<WAS_A> for bool {
            #[inline(always)]
            fn from(variant: WAS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WAS`"]
        pub type WAS_R = crate::R<bool, WAS_A>;
        impl WAS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WAS_A {
                match self.bits {
                    false => WAS_A::_0,
                    true => WAS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == WAS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == WAS_A::_1
            }
        }
        #[doc = "Write proxy for field `WAS`"]
        pub struct WAS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WAS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Writes to the CRC data register are data values."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(WAS_A::_0)
            }
            #[doc = "Writes to the CRC data register are seed values."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(WAS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Complement Read Of CRC Data Register\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FXOR_A {
            #[doc = "0: No XOR on reading."]
            _0 = 0,
            #[doc = "1: Invert or complement the read value of the CRC Data register."]
            _1 = 1,
        }
        impl From<FXOR_A> for bool {
            #[inline(always)]
            fn from(variant: FXOR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FXOR`"]
        pub type FXOR_R = crate::R<bool, FXOR_A>;
        impl FXOR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FXOR_A {
                match self.bits {
                    false => FXOR_A::_0,
                    true => FXOR_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FXOR_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FXOR_A::_1
            }
        }
        #[doc = "Write proxy for field `FXOR`"]
        pub struct FXOR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FXOR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FXOR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No XOR on reading."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FXOR_A::_0)
            }
            #[doc = "Invert or complement the read value of the CRC Data register."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FXOR_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Type Of Transpose For Read\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum TOTR_A {
            #[doc = "0: No transposition."]
            _00 = 0,
            #[doc = "1: Bits in bytes are transposed; bytes are not transposed."]
            _01 = 1,
            #[doc = "2: Both bits in bytes and bytes are transposed."]
            _10 = 2,
            #[doc = "3: Only bytes are transposed; no bits in a byte are transposed."]
            _11 = 3,
        }
        impl From<TOTR_A> for u8 {
            #[inline(always)]
            fn from(variant: TOTR_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `TOTR`"]
        pub type TOTR_R = crate::R<u8, TOTR_A>;
        impl TOTR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TOTR_A {
                match self.bits {
                    0 => TOTR_A::_00,
                    1 => TOTR_A::_01,
                    2 => TOTR_A::_10,
                    3 => TOTR_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == TOTR_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == TOTR_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == TOTR_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == TOTR_A::_11
            }
        }
        #[doc = "Write proxy for field `TOTR`"]
        pub struct TOTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOTR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TOTR_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No transposition."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(TOTR_A::_00)
            }
            #[doc = "Bits in bytes are transposed; bytes are not transposed."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(TOTR_A::_01)
            }
            #[doc = "Both bits in bytes and bytes are transposed."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(TOTR_A::_10)
            }
            #[doc = "Only bytes are transposed; no bits in a byte are transposed."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(TOTR_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Type Of Transpose For Writes\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum TOT_A {
            #[doc = "0: No transposition."]
            _00 = 0,
            #[doc = "1: Bits in bytes are transposed; bytes are not transposed."]
            _01 = 1,
            #[doc = "2: Both bits in bytes and bytes are transposed."]
            _10 = 2,
            #[doc = "3: Only bytes are transposed; no bits in a byte are transposed."]
            _11 = 3,
        }
        impl From<TOT_A> for u8 {
            #[inline(always)]
            fn from(variant: TOT_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `TOT`"]
        pub type TOT_R = crate::R<u8, TOT_A>;
        impl TOT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TOT_A {
                match self.bits {
                    0 => TOT_A::_00,
                    1 => TOT_A::_01,
                    2 => TOT_A::_10,
                    3 => TOT_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == TOT_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == TOT_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == TOT_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == TOT_A::_11
            }
        }
        #[doc = "Write proxy for field `TOT`"]
        pub struct TOT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TOT_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No transposition."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(TOT_A::_00)
            }
            #[doc = "Bits in bytes are transposed; bytes are not transposed."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(TOT_A::_01)
            }
            #[doc = "Both bits in bytes and bytes are transposed."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(TOT_A::_10)
            }
            #[doc = "Only bytes are transposed; no bits in a byte are transposed."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(TOT_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - Width of CRC protocol."]
            #[inline(always)]
            pub fn tcrc(&self) -> TCRC_R {
                TCRC_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Write CRC Data Register As Seed"]
            #[inline(always)]
            pub fn was(&self) -> WAS_R {
                WAS_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Complement Read Of CRC Data Register"]
            #[inline(always)]
            pub fn fxor(&self) -> FXOR_R {
                FXOR_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bits 28:29 - Type Of Transpose For Read"]
            #[inline(always)]
            pub fn totr(&self) -> TOTR_R {
                TOTR_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 30:31 - Type Of Transpose For Writes"]
            #[inline(always)]
            pub fn tot(&self) -> TOT_R {
                TOT_R::new(((self.bits >> 30) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 24 - Width of CRC protocol."]
            #[inline(always)]
            pub fn tcrc(&mut self) -> TCRC_W {
                TCRC_W { w: self }
            }
            #[doc = "Bit 25 - Write CRC Data Register As Seed"]
            #[inline(always)]
            pub fn was(&mut self) -> WAS_W {
                WAS_W { w: self }
            }
            #[doc = "Bit 26 - Complement Read Of CRC Data Register"]
            #[inline(always)]
            pub fn fxor(&mut self) -> FXOR_W {
                FXOR_W { w: self }
            }
            #[doc = "Bits 28:29 - Type Of Transpose For Read"]
            #[inline(always)]
            pub fn totr(&mut self) -> TOTR_W {
                TOTR_W { w: self }
            }
            #[doc = "Bits 30:31 - Type Of Transpose For Writes"]
            #[inline(always)]
            pub fn tot(&mut self) -> TOT_W {
                TOT_W { w: self }
            }
        }
    }
    #[doc = "CRC_CTRLHU register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctrlhu](ctrlhu) module"]
    pub type CTRLHU = crate::Reg<u8, _CTRLHU>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTRLHU;
    #[doc = "`read()` method returns [ctrlhu::R](ctrlhu::R) reader structure"]
    impl crate::Readable for CTRLHU {}
    #[doc = "`write(|w| ..)` method takes [ctrlhu::W](ctrlhu::W) writer structure"]
    impl crate::Writable for CTRLHU {}
    #[doc = "CRC_CTRLHU register."]
    pub mod ctrlhu {
        #[doc = "Reader of register CTRLHU"]
        pub type R = crate::R<u8, super::CTRLHU>;
        #[doc = "Writer for register CTRLHU"]
        pub type W = crate::W<u8, super::CTRLHU>;
        #[doc = "Register CTRLHU `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTRLHU {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "no description available\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TCRC_A {
            #[doc = "0: 16-bit CRC protocol."]
            _0 = 0,
            #[doc = "1: 32-bit CRC protocol."]
            _1 = 1,
        }
        impl From<TCRC_A> for bool {
            #[inline(always)]
            fn from(variant: TCRC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TCRC`"]
        pub type TCRC_R = crate::R<bool, TCRC_A>;
        impl TCRC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TCRC_A {
                match self.bits {
                    false => TCRC_A::_0,
                    true => TCRC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TCRC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TCRC_A::_1
            }
        }
        #[doc = "Write proxy for field `TCRC`"]
        pub struct TCRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCRC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TCRC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "16-bit CRC protocol."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TCRC_A::_0)
            }
            #[doc = "32-bit CRC protocol."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TCRC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        #[doc = "no description available\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WAS_A {
            #[doc = "0: Writes to CRC data register are data values."]
            _0 = 0,
            #[doc = "1: Writes to CRC data reguster are seed values."]
            _1 = 1,
        }
        impl From<WAS_A> for bool {
            #[inline(always)]
            fn from(variant: WAS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WAS`"]
        pub type WAS_R = crate::R<bool, WAS_A>;
        impl WAS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WAS_A {
                match self.bits {
                    false => WAS_A::_0,
                    true => WAS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == WAS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == WAS_A::_1
            }
        }
        #[doc = "Write proxy for field `WAS`"]
        pub struct WAS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WAS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Writes to CRC data register are data values."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(WAS_A::_0)
            }
            #[doc = "Writes to CRC data reguster are seed values."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(WAS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "no description available\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FXOR_A {
            #[doc = "0: No XOR on reading."]
            _0 = 0,
            #[doc = "1: Invert or complement the read value of CRC data register."]
            _1 = 1,
        }
        impl From<FXOR_A> for bool {
            #[inline(always)]
            fn from(variant: FXOR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FXOR`"]
        pub type FXOR_R = crate::R<bool, FXOR_A>;
        impl FXOR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FXOR_A {
                match self.bits {
                    false => FXOR_A::_0,
                    true => FXOR_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FXOR_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FXOR_A::_1
            }
        }
        #[doc = "Write proxy for field `FXOR`"]
        pub struct FXOR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FXOR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FXOR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No XOR on reading."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FXOR_A::_0)
            }
            #[doc = "Invert or complement the read value of CRC data register."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FXOR_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "no description available\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum TOTR_A {
            #[doc = "0: No Transposition."]
            _00 = 0,
            #[doc = "1: Bits in bytes are transposed, bytes are not transposed."]
            _01 = 1,
            #[doc = "2: Both bits in bytes and bytes are transposed."]
            _10 = 2,
            #[doc = "3: Only bytes are transposed; no bits in a byte are transposed."]
            _11 = 3,
        }
        impl From<TOTR_A> for u8 {
            #[inline(always)]
            fn from(variant: TOTR_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `TOTR`"]
        pub type TOTR_R = crate::R<u8, TOTR_A>;
        impl TOTR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TOTR_A {
                match self.bits {
                    0 => TOTR_A::_00,
                    1 => TOTR_A::_01,
                    2 => TOTR_A::_10,
                    3 => TOTR_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == TOTR_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == TOTR_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == TOTR_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == TOTR_A::_11
            }
        }
        #[doc = "Write proxy for field `TOTR`"]
        pub struct TOTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOTR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TOTR_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No Transposition."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(TOTR_A::_00)
            }
            #[doc = "Bits in bytes are transposed, bytes are not transposed."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(TOTR_A::_01)
            }
            #[doc = "Both bits in bytes and bytes are transposed."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(TOTR_A::_10)
            }
            #[doc = "Only bytes are transposed; no bits in a byte are transposed."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(TOTR_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u8) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "no description available\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum TOT_A {
            #[doc = "0: No Transposition."]
            _00 = 0,
            #[doc = "1: Bits in bytes are transposed, bytes are not transposed."]
            _01 = 1,
            #[doc = "2: Both bits in bytes and bytes are transposed."]
            _10 = 2,
            #[doc = "3: Only bytes are transposed; no bits in a byte are transposed."]
            _11 = 3,
        }
        impl From<TOT_A> for u8 {
            #[inline(always)]
            fn from(variant: TOT_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `TOT`"]
        pub type TOT_R = crate::R<u8, TOT_A>;
        impl TOT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TOT_A {
                match self.bits {
                    0 => TOT_A::_00,
                    1 => TOT_A::_01,
                    2 => TOT_A::_10,
                    3 => TOT_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == TOT_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == TOT_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == TOT_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == TOT_A::_11
            }
        }
        #[doc = "Write proxy for field `TOT`"]
        pub struct TOT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TOT_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No Transposition."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(TOT_A::_00)
            }
            #[doc = "Bits in bytes are transposed, bytes are not transposed."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(TOT_A::_01)
            }
            #[doc = "Both bits in bytes and bytes are transposed."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(TOT_A::_10)
            }
            #[doc = "Only bytes are transposed; no bits in a byte are transposed."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(TOT_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u8) & 0x03) << 6);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - no description available"]
            #[inline(always)]
            pub fn tcrc(&self) -> TCRC_R {
                TCRC_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - no description available"]
            #[inline(always)]
            pub fn was(&self) -> WAS_R {
                WAS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - no description available"]
            #[inline(always)]
            pub fn fxor(&self) -> FXOR_R {
                FXOR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 4:5 - no description available"]
            #[inline(always)]
            pub fn totr(&self) -> TOTR_R {
                TOTR_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - no description available"]
            #[inline(always)]
            pub fn tot(&self) -> TOT_R {
                TOT_R::new(((self.bits >> 6) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - no description available"]
            #[inline(always)]
            pub fn tcrc(&mut self) -> TCRC_W {
                TCRC_W { w: self }
            }
            #[doc = "Bit 1 - no description available"]
            #[inline(always)]
            pub fn was(&mut self) -> WAS_W {
                WAS_W { w: self }
            }
            #[doc = "Bit 2 - no description available"]
            #[inline(always)]
            pub fn fxor(&mut self) -> FXOR_W {
                FXOR_W { w: self }
            }
            #[doc = "Bits 4:5 - no description available"]
            #[inline(always)]
            pub fn totr(&mut self) -> TOTR_W {
                TOTR_W { w: self }
            }
            #[doc = "Bits 6:7 - no description available"]
            #[inline(always)]
            pub fn tot(&mut self) -> TOT_W {
                TOT_W { w: self }
            }
        }
    }
}
#[doc = "Pulse Width Timer"]
pub struct PWT {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PWT {}
impl PWT {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pwt::RegisterBlock {
        0x4003_3000 as *const _
    }
}
impl Deref for PWT {
    type Target = pwt::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*PWT::ptr() }
    }
}
#[doc = "Pulse Width Timer"]
pub mod pwt {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Pulse Width Timer Register 1"]
        pub r1: R1,
        #[doc = "0x04 - Pulse Width Timer Register 2"]
        pub r2: R2,
    }
    #[doc = "Pulse Width Timer Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r1](r1) module"]
    pub type R1 = crate::Reg<u32, _R1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _R1;
    #[doc = "`read()` method returns [r1::R](r1::R) reader structure"]
    impl crate::Readable for R1 {}
    #[doc = "`write(|w| ..)` method takes [r1::W](r1::W) writer structure"]
    impl crate::Writable for R1 {}
    #[doc = "Pulse Width Timer Register 1"]
    pub mod r1 {
        #[doc = "Reader of register R1"]
        pub type R = crate::R<u32, super::R1>;
        #[doc = "Writer for register R1"]
        pub type W = crate::W<u32, super::R1>;
        #[doc = "Register R1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::R1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "PWT Counter Overflow\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PWTOV_A {
            #[doc = "0: PWT counter no overflow."]
            _0 = 0,
            #[doc = "1: PWT counter runs from 0xFFFF to 0x0000."]
            _1 = 1,
        }
        impl From<PWTOV_A> for bool {
            #[inline(always)]
            fn from(variant: PWTOV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PWTOV`"]
        pub type PWTOV_R = crate::R<bool, PWTOV_A>;
        impl PWTOV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PWTOV_A {
                match self.bits {
                    false => PWTOV_A::_0,
                    true => PWTOV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PWTOV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PWTOV_A::_1
            }
        }
        #[doc = "Write proxy for field `PWTOV`"]
        pub struct PWTOV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWTOV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PWTOV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PWT counter no overflow."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PWTOV_A::_0)
            }
            #[doc = "PWT counter runs from 0xFFFF to 0x0000."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PWTOV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "PWT Pulse Width Valid\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PWTRDY_A {
            #[doc = "0: PWT pulse width register(s) is not up-to-date."]
            _0 = 0,
            #[doc = "1: PWT pulse width register(s) has been updated."]
            _1 = 1,
        }
        impl From<PWTRDY_A> for bool {
            #[inline(always)]
            fn from(variant: PWTRDY_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PWTRDY`"]
        pub type PWTRDY_R = crate::R<bool, PWTRDY_A>;
        impl PWTRDY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PWTRDY_A {
                match self.bits {
                    false => PWTRDY_A::_0,
                    true => PWTRDY_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PWTRDY_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PWTRDY_A::_1
            }
        }
        #[doc = "Write proxy for field `PWTRDY`"]
        pub struct PWTRDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWTRDY_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PWTRDY_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PWT pulse width register(s) is not up-to-date."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PWTRDY_A::_0)
            }
            #[doc = "PWT pulse width register(s) has been updated."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PWTRDY_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "PWT Soft Reset\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PWTSR_AW {
            #[doc = "0: No action taken."]
            _0 = 0,
            #[doc = "1: Writing 1 to this field will perform soft reset to PWT."]
            _1 = 1,
        }
        impl From<PWTSR_AW> for bool {
            #[inline(always)]
            fn from(variant: PWTSR_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PWTSR`"]
        pub struct PWTSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWTSR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PWTSR_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No action taken."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PWTSR_AW::_0)
            }
            #[doc = "Writing 1 to this field will perform soft reset to PWT."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PWTSR_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "PWT Counter Overflow Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POVIE_A {
            #[doc = "0: Disable PWT to generate interrupt when PWTOV is set."]
            _0 = 0,
            #[doc = "1: Enable PWT to generate interrupt when PWTOV is set."]
            _1 = 1,
        }
        impl From<POVIE_A> for bool {
            #[inline(always)]
            fn from(variant: POVIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POVIE`"]
        pub type POVIE_R = crate::R<bool, POVIE_A>;
        impl POVIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POVIE_A {
                match self.bits {
                    false => POVIE_A::_0,
                    true => POVIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POVIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POVIE_A::_1
            }
        }
        #[doc = "Write proxy for field `POVIE`"]
        pub struct POVIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POVIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POVIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Disable PWT to generate interrupt when PWTOV is set."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POVIE_A::_0)
            }
            #[doc = "Enable PWT to generate interrupt when PWTOV is set."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POVIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "PWT Pulse Width Data Ready Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PRDYIE_A {
            #[doc = "0: Disable PWT to generate interrupt when PWTRDY is set."]
            _0 = 0,
            #[doc = "1: Enable PWT to generate interrupt when PWTRDY is set."]
            _1 = 1,
        }
        impl From<PRDYIE_A> for bool {
            #[inline(always)]
            fn from(variant: PRDYIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PRDYIE`"]
        pub type PRDYIE_R = crate::R<bool, PRDYIE_A>;
        impl PRDYIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PRDYIE_A {
                match self.bits {
                    false => PRDYIE_A::_0,
                    true => PRDYIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PRDYIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PRDYIE_A::_1
            }
        }
        #[doc = "Write proxy for field `PRDYIE`"]
        pub struct PRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRDYIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PRDYIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Disable PWT to generate interrupt when PWTRDY is set."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PRDYIE_A::_0)
            }
            #[doc = "Enable PWT to generate interrupt when PWTRDY is set."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PRDYIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "PWT Module Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PWTIE_A {
            #[doc = "0: Disables the PWT to generate interrupt."]
            _0 = 0,
            #[doc = "1: Enables the PWT to generate interrupt."]
            _1 = 1,
        }
        impl From<PWTIE_A> for bool {
            #[inline(always)]
            fn from(variant: PWTIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PWTIE`"]
        pub type PWTIE_R = crate::R<bool, PWTIE_A>;
        impl PWTIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PWTIE_A {
                match self.bits {
                    false => PWTIE_A::_0,
                    true => PWTIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PWTIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PWTIE_A::_1
            }
        }
        #[doc = "Write proxy for field `PWTIE`"]
        pub struct PWTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWTIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PWTIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Disables the PWT to generate interrupt."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PWTIE_A::_0)
            }
            #[doc = "Enables the PWT to generate interrupt."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PWTIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "PWT Module Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PWTEN_A {
            #[doc = "0: The PWT is disabled."]
            _0 = 0,
            #[doc = "1: The PWT is enabled."]
            _1 = 1,
        }
        impl From<PWTEN_A> for bool {
            #[inline(always)]
            fn from(variant: PWTEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PWTEN`"]
        pub type PWTEN_R = crate::R<bool, PWTEN_A>;
        impl PWTEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PWTEN_A {
                match self.bits {
                    false => PWTEN_A::_0,
                    true => PWTEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PWTEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PWTEN_A::_1
            }
        }
        #[doc = "Write proxy for field `PWTEN`"]
        pub struct PWTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWTEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PWTEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The PWT is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PWTEN_A::_0)
            }
            #[doc = "The PWT is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PWTEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "PWT Clock Prescaler (CLKPRE) Setting\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PRE_A {
            #[doc = "0: Clock divided by 1."]
            _000 = 0,
            #[doc = "1: Clock divided by 2."]
            _001 = 1,
            #[doc = "2: Clock divided by 4."]
            _010 = 2,
            #[doc = "3: Clock divided by 8."]
            _011 = 3,
            #[doc = "4: Clock divided by 16."]
            _100 = 4,
            #[doc = "5: Clock divided by 32."]
            _101 = 5,
            #[doc = "6: Clock divided by 64."]
            _110 = 6,
            #[doc = "7: Clock divided by 128."]
            _111 = 7,
        }
        impl From<PRE_A> for u8 {
            #[inline(always)]
            fn from(variant: PRE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PRE`"]
        pub type PRE_R = crate::R<u8, PRE_A>;
        impl PRE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PRE_A {
                match self.bits {
                    0 => PRE_A::_000,
                    1 => PRE_A::_001,
                    2 => PRE_A::_010,
                    3 => PRE_A::_011,
                    4 => PRE_A::_100,
                    5 => PRE_A::_101,
                    6 => PRE_A::_110,
                    7 => PRE_A::_111,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_000`"]
            #[inline(always)]
            pub fn is_000(&self) -> bool {
                *self == PRE_A::_000
            }
            #[doc = "Checks if the value of the field is `_001`"]
            #[inline(always)]
            pub fn is_001(&self) -> bool {
                *self == PRE_A::_001
            }
            #[doc = "Checks if the value of the field is `_010`"]
            #[inline(always)]
            pub fn is_010(&self) -> bool {
                *self == PRE_A::_010
            }
            #[doc = "Checks if the value of the field is `_011`"]
            #[inline(always)]
            pub fn is_011(&self) -> bool {
                *self == PRE_A::_011
            }
            #[doc = "Checks if the value of the field is `_100`"]
            #[inline(always)]
            pub fn is_100(&self) -> bool {
                *self == PRE_A::_100
            }
            #[doc = "Checks if the value of the field is `_101`"]
            #[inline(always)]
            pub fn is_101(&self) -> bool {
                *self == PRE_A::_101
            }
            #[doc = "Checks if the value of the field is `_110`"]
            #[inline(always)]
            pub fn is_110(&self) -> bool {
                *self == PRE_A::_110
            }
            #[doc = "Checks if the value of the field is `_111`"]
            #[inline(always)]
            pub fn is_111(&self) -> bool {
                *self == PRE_A::_111
            }
        }
        #[doc = "Write proxy for field `PRE`"]
        pub struct PRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PRE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Clock divided by 1."]
            #[inline(always)]
            pub fn _000(self) -> &'a mut W {
                self.variant(PRE_A::_000)
            }
            #[doc = "Clock divided by 2."]
            #[inline(always)]
            pub fn _001(self) -> &'a mut W {
                self.variant(PRE_A::_001)
            }
            #[doc = "Clock divided by 4."]
            #[inline(always)]
            pub fn _010(self) -> &'a mut W {
                self.variant(PRE_A::_010)
            }
            #[doc = "Clock divided by 8."]
            #[inline(always)]
            pub fn _011(self) -> &'a mut W {
                self.variant(PRE_A::_011)
            }
            #[doc = "Clock divided by 16."]
            #[inline(always)]
            pub fn _100(self) -> &'a mut W {
                self.variant(PRE_A::_100)
            }
            #[doc = "Clock divided by 32."]
            #[inline(always)]
            pub fn _101(self) -> &'a mut W {
                self.variant(PRE_A::_101)
            }
            #[doc = "Clock divided by 64."]
            #[inline(always)]
            pub fn _110(self) -> &'a mut W {
                self.variant(PRE_A::_110)
            }
            #[doc = "Clock divided by 128."]
            #[inline(always)]
            pub fn _111(self) -> &'a mut W {
                self.variant(PRE_A::_111)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 8)) | (((value as u32) & 0x07) << 8);
                self.w
            }
        }
        #[doc = "PWT Input Edge Sensitivity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EDGE_A {
            #[doc = "0: The first falling-edge starts the pulse width measurement, and on all the subsequent falling edges, the pulse width is captured."]
            _00 = 0,
            #[doc = "1: The first rising edge starts the pulse width measurement, and on all the subsequent rising and falling edges, the pulse width is captured."]
            _01 = 1,
            #[doc = "2: The first falling edge starts the pulse width measurement, and on all the subsequent rising and falling edges, the pulse width is captured."]
            _10 = 2,
            #[doc = "3: The first-rising edge starts the pulse width measurement, and on all the subsequent rising edges, the pulse width is captured."]
            _11 = 3,
        }
        impl From<EDGE_A> for u8 {
            #[inline(always)]
            fn from(variant: EDGE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EDGE`"]
        pub type EDGE_R = crate::R<u8, EDGE_A>;
        impl EDGE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EDGE_A {
                match self.bits {
                    0 => EDGE_A::_00,
                    1 => EDGE_A::_01,
                    2 => EDGE_A::_10,
                    3 => EDGE_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == EDGE_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == EDGE_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == EDGE_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == EDGE_A::_11
            }
        }
        #[doc = "Write proxy for field `EDGE`"]
        pub struct EDGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EDGE_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "The first falling-edge starts the pulse width measurement, and on all the subsequent falling edges, the pulse width is captured."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(EDGE_A::_00)
            }
            #[doc = "The first rising edge starts the pulse width measurement, and on all the subsequent rising and falling edges, the pulse width is captured."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(EDGE_A::_01)
            }
            #[doc = "The first falling edge starts the pulse width measurement, and on all the subsequent rising and falling edges, the pulse width is captured."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(EDGE_A::_10)
            }
            #[doc = "The first-rising edge starts the pulse width measurement, and on all the subsequent rising edges, the pulse width is captured."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(EDGE_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 11)) | (((value as u32) & 0x03) << 11);
                self.w
            }
        }
        #[doc = "PWT Pulse Inputs Selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PINSEL_A {
            #[doc = "0: PWTIN\\[0\\]
is enabled."]
            _00 = 0,
            #[doc = "1: PWTIN\\[1\\]
is enabled."]
            _01 = 1,
            #[doc = "2: PWTIN\\[2\\]
enabled."]
            _10 = 2,
            #[doc = "3: PWTIN\\[3\\]
enabled."]
            _11 = 3,
        }
        impl From<PINSEL_A> for u8 {
            #[inline(always)]
            fn from(variant: PINSEL_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PINSEL`"]
        pub type PINSEL_R = crate::R<u8, PINSEL_A>;
        impl PINSEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PINSEL_A {
                match self.bits {
                    0 => PINSEL_A::_00,
                    1 => PINSEL_A::_01,
                    2 => PINSEL_A::_10,
                    3 => PINSEL_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == PINSEL_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == PINSEL_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == PINSEL_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == PINSEL_A::_11
            }
        }
        #[doc = "Write proxy for field `PINSEL`"]
        pub struct PINSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PINSEL_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "PWTIN\\[0\\]
is enabled."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(PINSEL_A::_00)
            }
            #[doc = "PWTIN\\[1\\]
is enabled."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(PINSEL_A::_01)
            }
            #[doc = "PWTIN\\[2\\]
enabled."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(PINSEL_A::_10)
            }
            #[doc = "PWTIN\\[3\\]
enabled."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(PINSEL_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "PWT Clock Source Selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PCLKS_A {
            #[doc = "0: TIMER_CLK is selected as the clock source of PWT counter."]
            _0 = 0,
            #[doc = "1: Alternative clock is selected as the clock source of PWT counter."]
            _1 = 1,
        }
        impl From<PCLKS_A> for bool {
            #[inline(always)]
            fn from(variant: PCLKS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PCLKS`"]
        pub type PCLKS_R = crate::R<bool, PCLKS_A>;
        impl PCLKS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PCLKS_A {
                match self.bits {
                    false => PCLKS_A::_0,
                    true => PCLKS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PCLKS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PCLKS_A::_1
            }
        }
        #[doc = "Write proxy for field `PCLKS`"]
        pub struct PCLKS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PCLKS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PCLKS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TIMER_CLK is selected as the clock source of PWT counter."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PCLKS_A::_0)
            }
            #[doc = "Alternative clock is selected as the clock source of PWT counter."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PCLKS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `PPW`"]
        pub type PPW_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bit 0 - PWT Counter Overflow"]
            #[inline(always)]
            pub fn pwtov(&self) -> PWTOV_R {
                PWTOV_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - PWT Pulse Width Valid"]
            #[inline(always)]
            pub fn pwtrdy(&self) -> PWTRDY_R {
                PWTRDY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 4 - PWT Counter Overflow Interrupt Enable"]
            #[inline(always)]
            pub fn povie(&self) -> POVIE_R {
                POVIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - PWT Pulse Width Data Ready Interrupt Enable"]
            #[inline(always)]
            pub fn prdyie(&self) -> PRDYIE_R {
                PRDYIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - PWT Module Interrupt Enable"]
            #[inline(always)]
            pub fn pwtie(&self) -> PWTIE_R {
                PWTIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - PWT Module Enable"]
            #[inline(always)]
            pub fn pwten(&self) -> PWTEN_R {
                PWTEN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:10 - PWT Clock Prescaler (CLKPRE) Setting"]
            #[inline(always)]
            pub fn pre(&self) -> PRE_R {
                PRE_R::new(((self.bits >> 8) & 0x07) as u8)
            }
            #[doc = "Bits 11:12 - PWT Input Edge Sensitivity"]
            #[inline(always)]
            pub fn edge(&self) -> EDGE_R {
                EDGE_R::new(((self.bits >> 11) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PWT Pulse Inputs Selection"]
            #[inline(always)]
            pub fn pinsel(&self) -> PINSEL_R {
                PINSEL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 15 - PWT Clock Source Selection"]
            #[inline(always)]
            pub fn pclks(&self) -> PCLKS_R {
                PCLKS_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 16:31 - Positive Pulse Width"]
            #[inline(always)]
            pub fn ppw(&self) -> PPW_R {
                PPW_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bit 0 - PWT Counter Overflow"]
            #[inline(always)]
            pub fn pwtov(&mut self) -> PWTOV_W {
                PWTOV_W { w: self }
            }
            #[doc = "Bit 1 - PWT Pulse Width Valid"]
            #[inline(always)]
            pub fn pwtrdy(&mut self) -> PWTRDY_W {
                PWTRDY_W { w: self }
            }
            #[doc = "Bit 3 - PWT Soft Reset"]
            #[inline(always)]
            pub fn pwtsr(&mut self) -> PWTSR_W {
                PWTSR_W { w: self }
            }
            #[doc = "Bit 4 - PWT Counter Overflow Interrupt Enable"]
            #[inline(always)]
            pub fn povie(&mut self) -> POVIE_W {
                POVIE_W { w: self }
            }
            #[doc = "Bit 5 - PWT Pulse Width Data Ready Interrupt Enable"]
            #[inline(always)]
            pub fn prdyie(&mut self) -> PRDYIE_W {
                PRDYIE_W { w: self }
            }
            #[doc = "Bit 6 - PWT Module Interrupt Enable"]
            #[inline(always)]
            pub fn pwtie(&mut self) -> PWTIE_W {
                PWTIE_W { w: self }
            }
            #[doc = "Bit 7 - PWT Module Enable"]
            #[inline(always)]
            pub fn pwten(&mut self) -> PWTEN_W {
                PWTEN_W { w: self }
            }
            #[doc = "Bits 8:10 - PWT Clock Prescaler (CLKPRE) Setting"]
            #[inline(always)]
            pub fn pre(&mut self) -> PRE_W {
                PRE_W { w: self }
            }
            #[doc = "Bits 11:12 - PWT Input Edge Sensitivity"]
            #[inline(always)]
            pub fn edge(&mut self) -> EDGE_W {
                EDGE_W { w: self }
            }
            #[doc = "Bits 13:14 - PWT Pulse Inputs Selection"]
            #[inline(always)]
            pub fn pinsel(&mut self) -> PINSEL_W {
                PINSEL_W { w: self }
            }
            #[doc = "Bit 15 - PWT Clock Source Selection"]
            #[inline(always)]
            pub fn pclks(&mut self) -> PCLKS_W {
                PCLKS_W { w: self }
            }
        }
    }
    #[doc = "Pulse Width Timer Register 2\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r2](r2) module"]
    pub type R2 = crate::Reg<u32, _R2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _R2;
    #[doc = "`read()` method returns [r2::R](r2::R) reader structure"]
    impl crate::Readable for R2 {}
    #[doc = "Pulse Width Timer Register 2"]
    pub mod r2 {
        #[doc = "Reader of register R2"]
        pub type R = crate::R<u32, super::R2>;
        #[doc = "Reader of field `NPW`"]
        pub type NPW_R = crate::R<u16, u16>;
        #[doc = "Reader of field `PWTC`"]
        pub type PWTC_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Negative Pulse Width. It is suggested to use half-word (16-bit) or word (32-bit) to read out this value."]
            #[inline(always)]
            pub fn npw(&self) -> NPW_R {
                NPW_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31 - PWT Counter. It is suggested to use half-word (16-bit) or word (32-bit) to read out this value."]
            #[inline(always)]
            pub fn pwtc(&self) -> PWTC_R {
                PWTC_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
    }
}
#[doc = "Periodic Interrupt Timer"]
pub struct PIT {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PIT {}
impl PIT {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pit::RegisterBlock {
        0x4003_7000 as *const _
    }
}
impl Deref for PIT {
    type Target = pit::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*PIT::ptr() }
    }
}
#[doc = "Periodic Interrupt Timer"]
pub mod pit {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - PIT Module Control Register"]
        pub mcr: MCR,
        _reserved1: [u8; 252usize],
        #[doc = "0x100 - Timer Load Value Register"]
        pub ldval0: LDVAL,
        #[doc = "0x104 - Current Timer Value Register"]
        pub cval0: CVAL,
        #[doc = "0x108 - Timer Control Register"]
        pub tctrl0: TCTRL,
        #[doc = "0x10c - Timer Flag Register"]
        pub tflg0: TFLG,
        #[doc = "0x110 - Timer Load Value Register"]
        pub ldval1: LDVAL,
        #[doc = "0x114 - Current Timer Value Register"]
        pub cval1: CVAL,
        #[doc = "0x118 - Timer Control Register"]
        pub tctrl1: TCTRL,
        #[doc = "0x11c - Timer Flag Register"]
        pub tflg1: TFLG,
    }
    #[doc = "PIT Module Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mcr](mcr) module"]
    pub type MCR = crate::Reg<u32, _MCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MCR;
    #[doc = "`read()` method returns [mcr::R](mcr::R) reader structure"]
    impl crate::Readable for MCR {}
    #[doc = "`write(|w| ..)` method takes [mcr::W](mcr::W) writer structure"]
    impl crate::Writable for MCR {}
    #[doc = "PIT Module Control Register"]
    pub mod mcr {
        #[doc = "Reader of register MCR"]
        pub type R = crate::R<u32, super::MCR>;
        #[doc = "Writer for register MCR"]
        pub type W = crate::W<u32, super::MCR>;
        #[doc = "Register MCR `reset()`'s with value 0x06"]
        impl crate::ResetValue for super::MCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x06
            }
        }
        #[doc = "Freeze\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FRZ_A {
            #[doc = "0: Timers continue to run in Debug mode."]
            _0 = 0,
            #[doc = "1: Timers are stopped in Debug mode."]
            _1 = 1,
        }
        impl From<FRZ_A> for bool {
            #[inline(always)]
            fn from(variant: FRZ_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FRZ`"]
        pub type FRZ_R = crate::R<bool, FRZ_A>;
        impl FRZ_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FRZ_A {
                match self.bits {
                    false => FRZ_A::_0,
                    true => FRZ_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FRZ_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FRZ_A::_1
            }
        }
        #[doc = "Write proxy for field `FRZ`"]
        pub struct FRZ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FRZ_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FRZ_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Timers continue to run in Debug mode."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FRZ_A::_0)
            }
            #[doc = "Timers are stopped in Debug mode."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FRZ_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Module Disable - (PIT section)\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MDIS_A {
            #[doc = "0: Clock for standard PIT timers is enabled."]
            _0 = 0,
            #[doc = "1: Clock for standard PIT timers is disabled."]
            _1 = 1,
        }
        impl From<MDIS_A> for bool {
            #[inline(always)]
            fn from(variant: MDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MDIS`"]
        pub type MDIS_R = crate::R<bool, MDIS_A>;
        impl MDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MDIS_A {
                match self.bits {
                    false => MDIS_A::_0,
                    true => MDIS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == MDIS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == MDIS_A::_1
            }
        }
        #[doc = "Write proxy for field `MDIS`"]
        pub struct MDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MDIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clock for standard PIT timers is enabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(MDIS_A::_0)
            }
            #[doc = "Clock for standard PIT timers is disabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(MDIS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Freeze"]
            #[inline(always)]
            pub fn frz(&self) -> FRZ_R {
                FRZ_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Module Disable - (PIT section)"]
            #[inline(always)]
            pub fn mdis(&self) -> MDIS_R {
                MDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Freeze"]
            #[inline(always)]
            pub fn frz(&mut self) -> FRZ_W {
                FRZ_W { w: self }
            }
            #[doc = "Bit 1 - Module Disable - (PIT section)"]
            #[inline(always)]
            pub fn mdis(&mut self) -> MDIS_W {
                MDIS_W { w: self }
            }
        }
    }
    #[doc = "Timer Load Value Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ldval](ldval) module"]
    pub type LDVAL = crate::Reg<u32, _LDVAL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LDVAL;
    #[doc = "`read()` method returns [ldval::R](ldval::R) reader structure"]
    impl crate::Readable for LDVAL {}
    #[doc = "`write(|w| ..)` method takes [ldval::W](ldval::W) writer structure"]
    impl crate::Writable for LDVAL {}
    #[doc = "Timer Load Value Register"]
    pub mod ldval {
        #[doc = "Reader of register LDVAL%s"]
        pub type R = crate::R<u32, super::LDVAL>;
        #[doc = "Writer for register LDVAL%s"]
        pub type W = crate::W<u32, super::LDVAL>;
        #[doc = "Register LDVAL%s `reset()`'s with value 0"]
        impl crate::ResetValue for super::LDVAL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TSV`"]
        pub type TSV_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TSV`"]
        pub struct TSV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Timer Start Value"]
            #[inline(always)]
            pub fn tsv(&self) -> TSV_R {
                TSV_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Timer Start Value"]
            #[inline(always)]
            pub fn tsv(&mut self) -> TSV_W {
                TSV_W { w: self }
            }
        }
    }
    #[doc = "Current Timer Value Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cval](cval) module"]
    pub type CVAL = crate::Reg<u32, _CVAL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CVAL;
    #[doc = "`read()` method returns [cval::R](cval::R) reader structure"]
    impl crate::Readable for CVAL {}
    #[doc = "Current Timer Value Register"]
    pub mod cval {
        #[doc = "Reader of register CVAL%s"]
        pub type R = crate::R<u32, super::CVAL>;
        #[doc = "Reader of field `TVL`"]
        pub type TVL_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Current Timer Value"]
            #[inline(always)]
            pub fn tvl(&self) -> TVL_R {
                TVL_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Timer Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tctrl](tctrl) module"]
    pub type TCTRL = crate::Reg<u32, _TCTRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TCTRL;
    #[doc = "`read()` method returns [tctrl::R](tctrl::R) reader structure"]
    impl crate::Readable for TCTRL {}
    #[doc = "`write(|w| ..)` method takes [tctrl::W](tctrl::W) writer structure"]
    impl crate::Writable for TCTRL {}
    #[doc = "Timer Control Register"]
    pub mod tctrl {
        #[doc = "Reader of register TCTRL%s"]
        pub type R = crate::R<u32, super::TCTRL>;
        #[doc = "Writer for register TCTRL%s"]
        pub type W = crate::W<u32, super::TCTRL>;
        #[doc = "Register TCTRL%s `reset()`'s with value 0"]
        impl crate::ResetValue for super::TCTRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Timer Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TEN_A {
            #[doc = "0: Timer n is disabled."]
            _0 = 0,
            #[doc = "1: Timer n is enabled."]
            _1 = 1,
        }
        impl From<TEN_A> for bool {
            #[inline(always)]
            fn from(variant: TEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TEN`"]
        pub type TEN_R = crate::R<bool, TEN_A>;
        impl TEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TEN_A {
                match self.bits {
                    false => TEN_A::_0,
                    true => TEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TEN_A::_1
            }
        }
        #[doc = "Write proxy for field `TEN`"]
        pub struct TEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Timer n is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TEN_A::_0)
            }
            #[doc = "Timer n is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Timer Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIE_A {
            #[doc = "0: Interrupt requests from Timer n are disabled."]
            _0 = 0,
            #[doc = "1: Interrupt will be requested whenever TIF is set."]
            _1 = 1,
        }
        impl From<TIE_A> for bool {
            #[inline(always)]
            fn from(variant: TIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIE`"]
        pub type TIE_R = crate::R<bool, TIE_A>;
        impl TIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TIE_A {
                match self.bits {
                    false => TIE_A::_0,
                    true => TIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TIE_A::_1
            }
        }
        #[doc = "Write proxy for field `TIE`"]
        pub struct TIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt requests from Timer n are disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TIE_A::_0)
            }
            #[doc = "Interrupt will be requested whenever TIF is set."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Chain Mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CHN_A {
            #[doc = "0: Timer is not chained."]
            _0 = 0,
            #[doc = "1: Timer is chained to previous timer. For example, for Channel 2, if this field is set, Timer 2 is chained to Timer 1."]
            _1 = 1,
        }
        impl From<CHN_A> for bool {
            #[inline(always)]
            fn from(variant: CHN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CHN`"]
        pub type CHN_R = crate::R<bool, CHN_A>;
        impl CHN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CHN_A {
                match self.bits {
                    false => CHN_A::_0,
                    true => CHN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CHN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CHN_A::_1
            }
        }
        #[doc = "Write proxy for field `CHN`"]
        pub struct CHN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Timer is not chained."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CHN_A::_0)
            }
            #[doc = "Timer is chained to previous timer. For example, for Channel 2, if this field is set, Timer 2 is chained to Timer 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CHN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Timer Enable"]
            #[inline(always)]
            pub fn ten(&self) -> TEN_R {
                TEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Timer Interrupt Enable"]
            #[inline(always)]
            pub fn tie(&self) -> TIE_R {
                TIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Chain Mode"]
            #[inline(always)]
            pub fn chn(&self) -> CHN_R {
                CHN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Timer Enable"]
            #[inline(always)]
            pub fn ten(&mut self) -> TEN_W {
                TEN_W { w: self }
            }
            #[doc = "Bit 1 - Timer Interrupt Enable"]
            #[inline(always)]
            pub fn tie(&mut self) -> TIE_W {
                TIE_W { w: self }
            }
            #[doc = "Bit 2 - Chain Mode"]
            #[inline(always)]
            pub fn chn(&mut self) -> CHN_W {
                CHN_W { w: self }
            }
        }
    }
    #[doc = "Timer Flag Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tflg](tflg) module"]
    pub type TFLG = crate::Reg<u32, _TFLG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TFLG;
    #[doc = "`read()` method returns [tflg::R](tflg::R) reader structure"]
    impl crate::Readable for TFLG {}
    #[doc = "`write(|w| ..)` method takes [tflg::W](tflg::W) writer structure"]
    impl crate::Writable for TFLG {}
    #[doc = "Timer Flag Register"]
    pub mod tflg {
        #[doc = "Reader of register TFLG%s"]
        pub type R = crate::R<u32, super::TFLG>;
        #[doc = "Writer for register TFLG%s"]
        pub type W = crate::W<u32, super::TFLG>;
        #[doc = "Register TFLG%s `reset()`'s with value 0"]
        impl crate::ResetValue for super::TFLG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Timer Interrupt Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIF_A {
            #[doc = "0: Timeout has not yet occurred."]
            _0 = 0,
            #[doc = "1: Timeout has occurred."]
            _1 = 1,
        }
        impl From<TIF_A> for bool {
            #[inline(always)]
            fn from(variant: TIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIF`"]
        pub type TIF_R = crate::R<bool, TIF_A>;
        impl TIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TIF_A {
                match self.bits {
                    false => TIF_A::_0,
                    true => TIF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TIF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TIF_A::_1
            }
        }
        #[doc = "Write proxy for field `TIF`"]
        pub struct TIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Timeout has not yet occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TIF_A::_0)
            }
            #[doc = "Timeout has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TIF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Timer Interrupt Flag"]
            #[inline(always)]
            pub fn tif(&self) -> TIF_R {
                TIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Timer Interrupt Flag"]
            #[inline(always)]
            pub fn tif(&mut self) -> TIF_W {
                TIF_W { w: self }
            }
        }
    }
}
#[doc = "FlexTimer Module"]
pub struct FTM0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FTM0 {}
impl FTM0 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ftm0::RegisterBlock {
        0x4003_8000 as *const _
    }
}
impl Deref for FTM0 {
    type Target = ftm0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*FTM0::ptr() }
    }
}
#[doc = "FlexTimer Module"]
pub mod ftm0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Status And Control"]
        pub sc: SC,
        #[doc = "0x04 - Counter"]
        pub cnt: CNT,
        #[doc = "0x08 - Modulo"]
        pub mod_: MOD,
        #[doc = "0x0c - Channel (n) Status And Control"]
        pub c0sc: CSC,
        #[doc = "0x10 - Channel (n) Value"]
        pub c0v: CV,
        #[doc = "0x14 - Channel (n) Status And Control"]
        pub c1sc: CSC,
        #[doc = "0x18 - Channel (n) Value"]
        pub c1v: CV,
        #[doc = "0x1c - Channel (n) Status And Control"]
        pub c2sc: CSC,
        #[doc = "0x20 - Channel (n) Value"]
        pub c2v: CV,
        #[doc = "0x24 - Channel (n) Status And Control"]
        pub c3sc: CSC,
        #[doc = "0x28 - Channel (n) Value"]
        pub c3v: CV,
        #[doc = "0x2c - Channel (n) Status And Control"]
        pub c4sc: CSC,
        #[doc = "0x30 - Channel (n) Value"]
        pub c4v: CV,
        #[doc = "0x34 - Channel (n) Status And Control"]
        pub c5sc: CSC,
        #[doc = "0x38 - Channel (n) Value"]
        pub c5v: CV,
        #[doc = "0x3c - Channel (n) Status And Control"]
        pub c6sc: CSC,
        #[doc = "0x40 - Channel (n) Value"]
        pub c6v: CV,
        #[doc = "0x44 - Channel (n) Status And Control"]
        pub c7sc: CSC,
        #[doc = "0x48 - Channel (n) Value"]
        pub c7v: CV,
        #[doc = "0x4c - Counter Initial Value"]
        pub cntin: CNTIN,
        #[doc = "0x50 - Capture And Compare Status"]
        pub status: STATUS,
        #[doc = "0x54 - Features Mode Selection"]
        pub mode: MODE,
        #[doc = "0x58 - Synchronization"]
        pub sync: SYNC,
        #[doc = "0x5c - Initial State For Channels Output"]
        pub outinit: OUTINIT,
        #[doc = "0x60 - Output Mask"]
        pub outmask: OUTMASK,
        #[doc = "0x64 - Function For Linked Channels"]
        pub combine: COMBINE,
        #[doc = "0x68 - Deadtime Insertion Control"]
        pub deadtime: DEADTIME,
        #[doc = "0x6c - FTM External Trigger"]
        pub exttrig: EXTTRIG,
        #[doc = "0x70 - Channels Polarity"]
        pub pol: POL,
        #[doc = "0x74 - Fault Mode Status"]
        pub fms: FMS,
        #[doc = "0x78 - Input Capture Filter Control"]
        pub filter: FILTER,
        #[doc = "0x7c - Fault Control"]
        pub fltctrl: FLTCTRL,
        _reserved32: [u8; 4usize],
        #[doc = "0x84 - Configuration"]
        pub conf: CONF,
        #[doc = "0x88 - FTM Fault Input Polarity"]
        pub fltpol: FLTPOL,
        #[doc = "0x8c - Synchronization Configuration"]
        pub synconf: SYNCONF,
        #[doc = "0x90 - FTM Inverting Control"]
        pub invctrl: INVCTRL,
        #[doc = "0x94 - FTM Software Output Control"]
        pub swoctrl: SWOCTRL,
        #[doc = "0x98 - FTM PWM Load"]
        pub pwmload: PWMLOAD,
    }
    #[doc = "Status And Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sc](sc) module"]
    pub type SC = crate::Reg<u32, _SC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SC;
    #[doc = "`read()` method returns [sc::R](sc::R) reader structure"]
    impl crate::Readable for SC {}
    #[doc = "`write(|w| ..)` method takes [sc::W](sc::W) writer structure"]
    impl crate::Writable for SC {}
    #[doc = "Status And Control"]
    pub mod sc {
        #[doc = "Reader of register SC"]
        pub type R = crate::R<u32, super::SC>;
        #[doc = "Writer for register SC"]
        pub type W = crate::W<u32, super::SC>;
        #[doc = "Register SC `reset()`'s with value 0"]
        impl crate::ResetValue for super::SC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Prescale Factor Selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PS_A {
            #[doc = "0: Divide by 1"]
            _000 = 0,
            #[doc = "1: Divide by 2"]
            _001 = 1,
            #[doc = "2: Divide by 4"]
            _010 = 2,
            #[doc = "3: Divide by 8"]
            _011 = 3,
            #[doc = "4: Divide by 16"]
            _100 = 4,
            #[doc = "5: Divide by 32"]
            _101 = 5,
            #[doc = "6: Divide by 64"]
            _110 = 6,
            #[doc = "7: Divide by 128"]
            _111 = 7,
        }
        impl From<PS_A> for u8 {
            #[inline(always)]
            fn from(variant: PS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PS`"]
        pub type PS_R = crate::R<u8, PS_A>;
        impl PS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PS_A {
                match self.bits {
                    0 => PS_A::_000,
                    1 => PS_A::_001,
                    2 => PS_A::_010,
                    3 => PS_A::_011,
                    4 => PS_A::_100,
                    5 => PS_A::_101,
                    6 => PS_A::_110,
                    7 => PS_A::_111,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_000`"]
            #[inline(always)]
            pub fn is_000(&self) -> bool {
                *self == PS_A::_000
            }
            #[doc = "Checks if the value of the field is `_001`"]
            #[inline(always)]
            pub fn is_001(&self) -> bool {
                *self == PS_A::_001
            }
            #[doc = "Checks if the value of the field is `_010`"]
            #[inline(always)]
            pub fn is_010(&self) -> bool {
                *self == PS_A::_010
            }
            #[doc = "Checks if the value of the field is `_011`"]
            #[inline(always)]
            pub fn is_011(&self) -> bool {
                *self == PS_A::_011
            }
            #[doc = "Checks if the value of the field is `_100`"]
            #[inline(always)]
            pub fn is_100(&self) -> bool {
                *self == PS_A::_100
            }
            #[doc = "Checks if the value of the field is `_101`"]
            #[inline(always)]
            pub fn is_101(&self) -> bool {
                *self == PS_A::_101
            }
            #[doc = "Checks if the value of the field is `_110`"]
            #[inline(always)]
            pub fn is_110(&self) -> bool {
                *self == PS_A::_110
            }
            #[doc = "Checks if the value of the field is `_111`"]
            #[inline(always)]
            pub fn is_111(&self) -> bool {
                *self == PS_A::_111
            }
        }
        #[doc = "Write proxy for field `PS`"]
        pub struct PS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Divide by 1"]
            #[inline(always)]
            pub fn _000(self) -> &'a mut W {
                self.variant(PS_A::_000)
            }
            #[doc = "Divide by 2"]
            #[inline(always)]
            pub fn _001(self) -> &'a mut W {
                self.variant(PS_A::_001)
            }
            #[doc = "Divide by 4"]
            #[inline(always)]
            pub fn _010(self) -> &'a mut W {
                self.variant(PS_A::_010)
            }
            #[doc = "Divide by 8"]
            #[inline(always)]
            pub fn _011(self) -> &'a mut W {
                self.variant(PS_A::_011)
            }
            #[doc = "Divide by 16"]
            #[inline(always)]
            pub fn _100(self) -> &'a mut W {
                self.variant(PS_A::_100)
            }
            #[doc = "Divide by 32"]
            #[inline(always)]
            pub fn _101(self) -> &'a mut W {
                self.variant(PS_A::_101)
            }
            #[doc = "Divide by 64"]
            #[inline(always)]
            pub fn _110(self) -> &'a mut W {
                self.variant(PS_A::_110)
            }
            #[doc = "Divide by 128"]
            #[inline(always)]
            pub fn _111(self) -> &'a mut W {
                self.variant(PS_A::_111)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        #[doc = "Clock Source Selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CLKS_A {
            #[doc = "0: No clock selected. This in effect disables the FTM counter."]
            _00 = 0,
            #[doc = "1: System clock"]
            _01 = 1,
            #[doc = "2: Fixed frequency clock"]
            _10 = 2,
            #[doc = "3: External clock"]
            _11 = 3,
        }
        impl From<CLKS_A> for u8 {
            #[inline(always)]
            fn from(variant: CLKS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CLKS`"]
        pub type CLKS_R = crate::R<u8, CLKS_A>;
        impl CLKS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CLKS_A {
                match self.bits {
                    0 => CLKS_A::_00,
                    1 => CLKS_A::_01,
                    2 => CLKS_A::_10,
                    3 => CLKS_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == CLKS_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == CLKS_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == CLKS_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == CLKS_A::_11
            }
        }
        #[doc = "Write proxy for field `CLKS`"]
        pub struct CLKS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLKS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CLKS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No clock selected. This in effect disables the FTM counter."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(CLKS_A::_00)
            }
            #[doc = "System clock"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(CLKS_A::_01)
            }
            #[doc = "Fixed frequency clock"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(CLKS_A::_10)
            }
            #[doc = "External clock"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(CLKS_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 3)) | (((value as u32) & 0x03) << 3);
                self.w
            }
        }
        #[doc = "Center-Aligned PWM Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CPWMS_A {
            #[doc = "0: FTM counter operates in Up Counting mode."]
            _0 = 0,
            #[doc = "1: FTM counter operates in Up-Down Counting mode."]
            _1 = 1,
        }
        impl From<CPWMS_A> for bool {
            #[inline(always)]
            fn from(variant: CPWMS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CPWMS`"]
        pub type CPWMS_R = crate::R<bool, CPWMS_A>;
        impl CPWMS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CPWMS_A {
                match self.bits {
                    false => CPWMS_A::_0,
                    true => CPWMS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CPWMS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CPWMS_A::_1
            }
        }
        #[doc = "Write proxy for field `CPWMS`"]
        pub struct CPWMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPWMS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CPWMS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FTM counter operates in Up Counting mode."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CPWMS_A::_0)
            }
            #[doc = "FTM counter operates in Up-Down Counting mode."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CPWMS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Timer Overflow Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TOIE_A {
            #[doc = "0: Disable TOF interrupts. Use software polling."]
            _0 = 0,
            #[doc = "1: Enable TOF interrupts. An interrupt is generated when TOF equals one."]
            _1 = 1,
        }
        impl From<TOIE_A> for bool {
            #[inline(always)]
            fn from(variant: TOIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TOIE`"]
        pub type TOIE_R = crate::R<bool, TOIE_A>;
        impl TOIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TOIE_A {
                match self.bits {
                    false => TOIE_A::_0,
                    true => TOIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TOIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TOIE_A::_1
            }
        }
        #[doc = "Write proxy for field `TOIE`"]
        pub struct TOIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TOIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Disable TOF interrupts. Use software polling."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TOIE_A::_0)
            }
            #[doc = "Enable TOF interrupts. An interrupt is generated when TOF equals one."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TOIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Timer Overflow Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TOF_A {
            #[doc = "0: FTM counter has not overflowed."]
            _0 = 0,
            #[doc = "1: FTM counter has overflowed."]
            _1 = 1,
        }
        impl From<TOF_A> for bool {
            #[inline(always)]
            fn from(variant: TOF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TOF`"]
        pub type TOF_R = crate::R<bool, TOF_A>;
        impl TOF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TOF_A {
                match self.bits {
                    false => TOF_A::_0,
                    true => TOF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TOF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TOF_A::_1
            }
        }
        #[doc = "Write proxy for field `TOF`"]
        pub struct TOF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TOF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FTM counter has not overflowed."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TOF_A::_0)
            }
            #[doc = "FTM counter has overflowed."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TOF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Prescale Factor Selection"]
            #[inline(always)]
            pub fn ps(&self) -> PS_R {
                PS_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bits 3:4 - Clock Source Selection"]
            #[inline(always)]
            pub fn clks(&self) -> CLKS_R {
                CLKS_R::new(((self.bits >> 3) & 0x03) as u8)
            }
            #[doc = "Bit 5 - Center-Aligned PWM Select"]
            #[inline(always)]
            pub fn cpwms(&self) -> CPWMS_R {
                CPWMS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Timer Overflow Interrupt Enable"]
            #[inline(always)]
            pub fn toie(&self) -> TOIE_R {
                TOIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Timer Overflow Flag"]
            #[inline(always)]
            pub fn tof(&self) -> TOF_R {
                TOF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Prescale Factor Selection"]
            #[inline(always)]
            pub fn ps(&mut self) -> PS_W {
                PS_W { w: self }
            }
            #[doc = "Bits 3:4 - Clock Source Selection"]
            #[inline(always)]
            pub fn clks(&mut self) -> CLKS_W {
                CLKS_W { w: self }
            }
            #[doc = "Bit 5 - Center-Aligned PWM Select"]
            #[inline(always)]
            pub fn cpwms(&mut self) -> CPWMS_W {
                CPWMS_W { w: self }
            }
            #[doc = "Bit 6 - Timer Overflow Interrupt Enable"]
            #[inline(always)]
            pub fn toie(&mut self) -> TOIE_W {
                TOIE_W { w: self }
            }
            #[doc = "Bit 7 - Timer Overflow Flag"]
            #[inline(always)]
            pub fn tof(&mut self) -> TOF_W {
                TOF_W { w: self }
            }
        }
    }
    #[doc = "Counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "Counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `COUNT`"]
        pub type COUNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `COUNT`"]
        pub struct COUNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COUNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Counter Value"]
            #[inline(always)]
            pub fn count(&self) -> COUNT_R {
                COUNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Counter Value"]
            #[inline(always)]
            pub fn count(&mut self) -> COUNT_W {
                COUNT_W { w: self }
            }
        }
    }
    #[doc = "Modulo\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mod_](mod_) module"]
    pub type MOD = crate::Reg<u32, _MOD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MOD;
    #[doc = "`read()` method returns [mod_::R](mod_::R) reader structure"]
    impl crate::Readable for MOD {}
    #[doc = "`write(|w| ..)` method takes [mod_::W](mod_::W) writer structure"]
    impl crate::Writable for MOD {}
    #[doc = "Modulo"]
    pub mod mod_ {
        #[doc = "Reader of register MOD"]
        pub type R = crate::R<u32, super::MOD>;
        #[doc = "Writer for register MOD"]
        pub type W = crate::W<u32, super::MOD>;
        #[doc = "Register MOD `reset()`'s with value 0"]
        impl crate::ResetValue for super::MOD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MOD`"]
        pub type MOD_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `MOD`"]
        pub struct MOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MOD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Modulo Value"]
            #[inline(always)]
            pub fn mod_(&self) -> MOD_R {
                MOD_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Modulo Value"]
            #[inline(always)]
            pub fn mod_(&mut self) -> MOD_W {
                MOD_W { w: self }
            }
        }
    }
    #[doc = "Channel (n) Status And Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csc](csc) module"]
    pub type CSC = crate::Reg<u32, _CSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CSC;
    #[doc = "`read()` method returns [csc::R](csc::R) reader structure"]
    impl crate::Readable for CSC {}
    #[doc = "`write(|w| ..)` method takes [csc::W](csc::W) writer structure"]
    impl crate::Writable for CSC {}
    #[doc = "Channel (n) Status And Control"]
    pub mod csc {
        #[doc = "Reader of register C%sSC"]
        pub type R = crate::R<u32, super::CSC>;
        #[doc = "Writer for register C%sSC"]
        pub type W = crate::W<u32, super::CSC>;
        #[doc = "Register C%sSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::CSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ELSA`"]
        pub type ELSA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ELSA`"]
        pub struct ELSA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ELSA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `ELSB`"]
        pub type ELSB_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ELSB`"]
        pub struct ELSB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ELSB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `MSA`"]
        pub type MSA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSA`"]
        pub struct MSA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `MSB`"]
        pub type MSB_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSB`"]
        pub struct MSB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Channel Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CHIE_A {
            #[doc = "0: Disable channel interrupts. Use software polling."]
            _0 = 0,
            #[doc = "1: Enable channel interrupts."]
            _1 = 1,
        }
        impl From<CHIE_A> for bool {
            #[inline(always)]
            fn from(variant: CHIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CHIE`"]
        pub type CHIE_R = crate::R<bool, CHIE_A>;
        impl CHIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CHIE_A {
                match self.bits {
                    false => CHIE_A::_0,
                    true => CHIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CHIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CHIE_A::_1
            }
        }
        #[doc = "Write proxy for field `CHIE`"]
        pub struct CHIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Disable channel interrupts. Use software polling."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CHIE_A::_0)
            }
            #[doc = "Enable channel interrupts."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CHIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CHF_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CHF_A> for bool {
            #[inline(always)]
            fn from(variant: CHF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CHF`"]
        pub type CHF_R = crate::R<bool, CHF_A>;
        impl CHF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CHF_A {
                match self.bits {
                    false => CHF_A::_0,
                    true => CHF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CHF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CHF_A::_1
            }
        }
        #[doc = "Write proxy for field `CHF`"]
        pub struct CHF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CHF_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CHF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - Edge or Level Select"]
            #[inline(always)]
            pub fn elsa(&self) -> ELSA_R {
                ELSA_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Edge or Level Select"]
            #[inline(always)]
            pub fn elsb(&self) -> ELSB_R {
                ELSB_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel Mode Select"]
            #[inline(always)]
            pub fn msa(&self) -> MSA_R {
                MSA_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel Mode Select"]
            #[inline(always)]
            pub fn msb(&self) -> MSB_R {
                MSB_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel Interrupt Enable"]
            #[inline(always)]
            pub fn chie(&self) -> CHIE_R {
                CHIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel Flag"]
            #[inline(always)]
            pub fn chf(&self) -> CHF_R {
                CHF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - Edge or Level Select"]
            #[inline(always)]
            pub fn elsa(&mut self) -> ELSA_W {
                ELSA_W { w: self }
            }
            #[doc = "Bit 3 - Edge or Level Select"]
            #[inline(always)]
            pub fn elsb(&mut self) -> ELSB_W {
                ELSB_W { w: self }
            }
            #[doc = "Bit 4 - Channel Mode Select"]
            #[inline(always)]
            pub fn msa(&mut self) -> MSA_W {
                MSA_W { w: self }
            }
            #[doc = "Bit 5 - Channel Mode Select"]
            #[inline(always)]
            pub fn msb(&mut self) -> MSB_W {
                MSB_W { w: self }
            }
            #[doc = "Bit 6 - Channel Interrupt Enable"]
            #[inline(always)]
            pub fn chie(&mut self) -> CHIE_W {
                CHIE_W { w: self }
            }
            #[doc = "Bit 7 - Channel Flag"]
            #[inline(always)]
            pub fn chf(&mut self) -> CHF_W {
                CHF_W { w: self }
            }
        }
    }
    #[doc = "Channel (n) Value\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cv](cv) module"]
    pub type CV = crate::Reg<u32, _CV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CV;
    #[doc = "`read()` method returns [cv::R](cv::R) reader structure"]
    impl crate::Readable for CV {}
    #[doc = "`write(|w| ..)` method takes [cv::W](cv::W) writer structure"]
    impl crate::Writable for CV {}
    #[doc = "Channel (n) Value"]
    pub mod cv {
        #[doc = "Reader of register C%sV"]
        pub type R = crate::R<u32, super::CV>;
        #[doc = "Writer for register C%sV"]
        pub type W = crate::W<u32, super::CV>;
        #[doc = "Register C%sV `reset()`'s with value 0"]
        impl crate::ResetValue for super::CV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VAL`"]
        pub type VAL_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `VAL`"]
        pub struct VAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Channel Value"]
            #[inline(always)]
            pub fn val(&self) -> VAL_R {
                VAL_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Channel Value"]
            #[inline(always)]
            pub fn val(&mut self) -> VAL_W {
                VAL_W { w: self }
            }
        }
    }
    #[doc = "Counter Initial Value\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cntin](cntin) module"]
    pub type CNTIN = crate::Reg<u32, _CNTIN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNTIN;
    #[doc = "`read()` method returns [cntin::R](cntin::R) reader structure"]
    impl crate::Readable for CNTIN {}
    #[doc = "`write(|w| ..)` method takes [cntin::W](cntin::W) writer structure"]
    impl crate::Writable for CNTIN {}
    #[doc = "Counter Initial Value"]
    pub mod cntin {
        #[doc = "Reader of register CNTIN"]
        pub type R = crate::R<u32, super::CNTIN>;
        #[doc = "Writer for register CNTIN"]
        pub type W = crate::W<u32, super::CNTIN>;
        #[doc = "Register CNTIN `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNTIN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `INIT`"]
        pub type INIT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `INIT`"]
        pub struct INIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INIT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Initial Value Of The FTM Counter"]
            #[inline(always)]
            pub fn init(&self) -> INIT_R {
                INIT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Initial Value Of The FTM Counter"]
            #[inline(always)]
            pub fn init(&mut self) -> INIT_W {
                INIT_W { w: self }
            }
        }
    }
    #[doc = "Capture And Compare Status\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [status](status) module"]
    pub type STATUS = crate::Reg<u32, _STATUS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STATUS;
    #[doc = "`read()` method returns [status::R](status::R) reader structure"]
    impl crate::Readable for STATUS {}
    #[doc = "`write(|w| ..)` method takes [status::W](status::W) writer structure"]
    impl crate::Writable for STATUS {}
    #[doc = "Capture And Compare Status"]
    pub mod status {
        #[doc = "Reader of register STATUS"]
        pub type R = crate::R<u32, super::STATUS>;
        #[doc = "Writer for register STATUS"]
        pub type W = crate::W<u32, super::STATUS>;
        #[doc = "Register STATUS `reset()`'s with value 0"]
        impl crate::ResetValue for super::STATUS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Channel 0 Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH0F_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CH0F_A> for bool {
            #[inline(always)]
            fn from(variant: CH0F_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH0F`"]
        pub type CH0F_R = crate::R<bool, CH0F_A>;
        impl CH0F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH0F_A {
                match self.bits {
                    false => CH0F_A::_0,
                    true => CH0F_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH0F_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH0F_A::_1
            }
        }
        #[doc = "Write proxy for field `CH0F`"]
        pub struct CH0F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH0F_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH0F_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH0F_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Channel 1 Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH1F_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CH1F_A> for bool {
            #[inline(always)]
            fn from(variant: CH1F_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH1F`"]
        pub type CH1F_R = crate::R<bool, CH1F_A>;
        impl CH1F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH1F_A {
                match self.bits {
                    false => CH1F_A::_0,
                    true => CH1F_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH1F_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH1F_A::_1
            }
        }
        #[doc = "Write proxy for field `CH1F`"]
        pub struct CH1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH1F_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH1F_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH1F_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Channel 2 Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH2F_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CH2F_A> for bool {
            #[inline(always)]
            fn from(variant: CH2F_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH2F`"]
        pub type CH2F_R = crate::R<bool, CH2F_A>;
        impl CH2F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH2F_A {
                match self.bits {
                    false => CH2F_A::_0,
                    true => CH2F_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH2F_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH2F_A::_1
            }
        }
        #[doc = "Write proxy for field `CH2F`"]
        pub struct CH2F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH2F_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH2F_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH2F_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel 3 Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH3F_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CH3F_A> for bool {
            #[inline(always)]
            fn from(variant: CH3F_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH3F`"]
        pub type CH3F_R = crate::R<bool, CH3F_A>;
        impl CH3F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH3F_A {
                match self.bits {
                    false => CH3F_A::_0,
                    true => CH3F_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH3F_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH3F_A::_1
            }
        }
        #[doc = "Write proxy for field `CH3F`"]
        pub struct CH3F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH3F_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH3F_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH3F_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Channel 4 Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH4F_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CH4F_A> for bool {
            #[inline(always)]
            fn from(variant: CH4F_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH4F`"]
        pub type CH4F_R = crate::R<bool, CH4F_A>;
        impl CH4F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH4F_A {
                match self.bits {
                    false => CH4F_A::_0,
                    true => CH4F_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH4F_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH4F_A::_1
            }
        }
        #[doc = "Write proxy for field `CH4F`"]
        pub struct CH4F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH4F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH4F_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH4F_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH4F_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Channel 5 Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH5F_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CH5F_A> for bool {
            #[inline(always)]
            fn from(variant: CH5F_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH5F`"]
        pub type CH5F_R = crate::R<bool, CH5F_A>;
        impl CH5F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH5F_A {
                match self.bits {
                    false => CH5F_A::_0,
                    true => CH5F_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH5F_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH5F_A::_1
            }
        }
        #[doc = "Write proxy for field `CH5F`"]
        pub struct CH5F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH5F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH5F_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH5F_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH5F_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Channel 6 Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH6F_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CH6F_A> for bool {
            #[inline(always)]
            fn from(variant: CH6F_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH6F`"]
        pub type CH6F_R = crate::R<bool, CH6F_A>;
        impl CH6F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH6F_A {
                match self.bits {
                    false => CH6F_A::_0,
                    true => CH6F_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH6F_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH6F_A::_1
            }
        }
        #[doc = "Write proxy for field `CH6F`"]
        pub struct CH6F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH6F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH6F_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH6F_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH6F_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel 7 Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH7F_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CH7F_A> for bool {
            #[inline(always)]
            fn from(variant: CH7F_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH7F`"]
        pub type CH7F_R = crate::R<bool, CH7F_A>;
        impl CH7F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH7F_A {
                match self.bits {
                    false => CH7F_A::_0,
                    true => CH7F_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH7F_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH7F_A::_1
            }
        }
        #[doc = "Write proxy for field `CH7F`"]
        pub struct CH7F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH7F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH7F_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH7F_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH7F_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel 0 Flag"]
            #[inline(always)]
            pub fn ch0f(&self) -> CH0F_R {
                CH0F_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 1 Flag"]
            #[inline(always)]
            pub fn ch1f(&self) -> CH1F_R {
                CH1F_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel 2 Flag"]
            #[inline(always)]
            pub fn ch2f(&self) -> CH2F_R {
                CH2F_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel 3 Flag"]
            #[inline(always)]
            pub fn ch3f(&self) -> CH3F_R {
                CH3F_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 4 Flag"]
            #[inline(always)]
            pub fn ch4f(&self) -> CH4F_R {
                CH4F_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 5 Flag"]
            #[inline(always)]
            pub fn ch5f(&self) -> CH5F_R {
                CH5F_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel 6 Flag"]
            #[inline(always)]
            pub fn ch6f(&self) -> CH6F_R {
                CH6F_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel 7 Flag"]
            #[inline(always)]
            pub fn ch7f(&self) -> CH7F_R {
                CH7F_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 0 Flag"]
            #[inline(always)]
            pub fn ch0f(&mut self) -> CH0F_W {
                CH0F_W { w: self }
            }
            #[doc = "Bit 1 - Channel 1 Flag"]
            #[inline(always)]
            pub fn ch1f(&mut self) -> CH1F_W {
                CH1F_W { w: self }
            }
            #[doc = "Bit 2 - Channel 2 Flag"]
            #[inline(always)]
            pub fn ch2f(&mut self) -> CH2F_W {
                CH2F_W { w: self }
            }
            #[doc = "Bit 3 - Channel 3 Flag"]
            #[inline(always)]
            pub fn ch3f(&mut self) -> CH3F_W {
                CH3F_W { w: self }
            }
            #[doc = "Bit 4 - Channel 4 Flag"]
            #[inline(always)]
            pub fn ch4f(&mut self) -> CH4F_W {
                CH4F_W { w: self }
            }
            #[doc = "Bit 5 - Channel 5 Flag"]
            #[inline(always)]
            pub fn ch5f(&mut self) -> CH5F_W {
                CH5F_W { w: self }
            }
            #[doc = "Bit 6 - Channel 6 Flag"]
            #[inline(always)]
            pub fn ch6f(&mut self) -> CH6F_W {
                CH6F_W { w: self }
            }
            #[doc = "Bit 7 - Channel 7 Flag"]
            #[inline(always)]
            pub fn ch7f(&mut self) -> CH7F_W {
                CH7F_W { w: self }
            }
        }
    }
    #[doc = "Features Mode Selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mode](mode) module"]
    pub type MODE = crate::Reg<u32, _MODE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MODE;
    #[doc = "`read()` method returns [mode::R](mode::R) reader structure"]
    impl crate::Readable for MODE {}
    #[doc = "`write(|w| ..)` method takes [mode::W](mode::W) writer structure"]
    impl crate::Writable for MODE {}
    #[doc = "Features Mode Selection"]
    pub mod mode {
        #[doc = "Reader of register MODE"]
        pub type R = crate::R<u32, super::MODE>;
        #[doc = "Writer for register MODE"]
        pub type W = crate::W<u32, super::MODE>;
        #[doc = "Register MODE `reset()`'s with value 0x04"]
        impl crate::ResetValue for super::MODE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x04
            }
        }
        #[doc = "FTM Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FTMEN_A {
            #[doc = "0: Only the TPM-compatible registers (first set of registers) can be used without any restriction. Do not use the FTM-specific registers."]
            _0 = 0,
            #[doc = "1: All registers including the FTM-specific registers (second set of registers) are available for use with no restrictions."]
            _1 = 1,
        }
        impl From<FTMEN_A> for bool {
            #[inline(always)]
            fn from(variant: FTMEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FTMEN`"]
        pub type FTMEN_R = crate::R<bool, FTMEN_A>;
        impl FTMEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FTMEN_A {
                match self.bits {
                    false => FTMEN_A::_0,
                    true => FTMEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FTMEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FTMEN_A::_1
            }
        }
        #[doc = "Write proxy for field `FTMEN`"]
        pub struct FTMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FTMEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FTMEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Only the TPM-compatible registers (first set of registers) can be used without any restriction. Do not use the FTM-specific registers."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FTMEN_A::_0)
            }
            #[doc = "All registers including the FTM-specific registers (second set of registers) are available for use with no restrictions."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FTMEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `INIT`"]
        pub type INIT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `INIT`"]
        pub struct INIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INIT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write Protection Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WPDIS_A {
            #[doc = "0: Write protection is enabled."]
            _0 = 0,
            #[doc = "1: Write protection is disabled."]
            _1 = 1,
        }
        impl From<WPDIS_A> for bool {
            #[inline(always)]
            fn from(variant: WPDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WPDIS`"]
        pub type WPDIS_R = crate::R<bool, WPDIS_A>;
        impl WPDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WPDIS_A {
                match self.bits {
                    false => WPDIS_A::_0,
                    true => WPDIS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == WPDIS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == WPDIS_A::_1
            }
        }
        #[doc = "Write proxy for field `WPDIS`"]
        pub struct WPDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WPDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WPDIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Write protection is enabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(WPDIS_A::_0)
            }
            #[doc = "Write protection is disabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(WPDIS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "PWM Synchronization Mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PWMSYNC_A {
            #[doc = "0: No restrictions. Software and hardware triggers can be used by MOD, CnV, OUTMASK, and FTM counter synchronization."]
            _0 = 0,
            #[doc = "1: Software trigger can only be used by MOD and CnV synchronization, and hardware triggers can only be used by OUTMASK and FTM counter synchronization."]
            _1 = 1,
        }
        impl From<PWMSYNC_A> for bool {
            #[inline(always)]
            fn from(variant: PWMSYNC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PWMSYNC`"]
        pub type PWMSYNC_R = crate::R<bool, PWMSYNC_A>;
        impl PWMSYNC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PWMSYNC_A {
                match self.bits {
                    false => PWMSYNC_A::_0,
                    true => PWMSYNC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PWMSYNC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PWMSYNC_A::_1
            }
        }
        #[doc = "Write proxy for field `PWMSYNC`"]
        pub struct PWMSYNC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWMSYNC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PWMSYNC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No restrictions. Software and hardware triggers can be used by MOD, CnV, OUTMASK, and FTM counter synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PWMSYNC_A::_0)
            }
            #[doc = "Software trigger can only be used by MOD and CnV synchronization, and hardware triggers can only be used by OUTMASK and FTM counter synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PWMSYNC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Capture Test Mode Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CAPTEST_A {
            #[doc = "0: Capture test mode is disabled."]
            _0 = 0,
            #[doc = "1: Capture test mode is enabled."]
            _1 = 1,
        }
        impl From<CAPTEST_A> for bool {
            #[inline(always)]
            fn from(variant: CAPTEST_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CAPTEST`"]
        pub type CAPTEST_R = crate::R<bool, CAPTEST_A>;
        impl CAPTEST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CAPTEST_A {
                match self.bits {
                    false => CAPTEST_A::_0,
                    true => CAPTEST_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CAPTEST_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CAPTEST_A::_1
            }
        }
        #[doc = "Write proxy for field `CAPTEST`"]
        pub struct CAPTEST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAPTEST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CAPTEST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Capture test mode is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CAPTEST_A::_0)
            }
            #[doc = "Capture test mode is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CAPTEST_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Fault Control Mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FAULTM_A {
            #[doc = "0: Fault control is disabled for all channels."]
            _00 = 0,
            #[doc = "1: Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected mode is the manual fault clearing."]
            _01 = 1,
            #[doc = "2: Fault control is enabled for all channels, and the selected mode is the manual fault clearing."]
            _10 = 2,
            #[doc = "3: Fault control is enabled for all channels, and the selected mode is the automatic fault clearing."]
            _11 = 3,
        }
        impl From<FAULTM_A> for u8 {
            #[inline(always)]
            fn from(variant: FAULTM_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FAULTM`"]
        pub type FAULTM_R = crate::R<u8, FAULTM_A>;
        impl FAULTM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTM_A {
                match self.bits {
                    0 => FAULTM_A::_00,
                    1 => FAULTM_A::_01,
                    2 => FAULTM_A::_10,
                    3 => FAULTM_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == FAULTM_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == FAULTM_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == FAULTM_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == FAULTM_A::_11
            }
        }
        #[doc = "Write proxy for field `FAULTM`"]
        pub struct FAULTM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTM_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Fault control is disabled for all channels."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(FAULTM_A::_00)
            }
            #[doc = "Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected mode is the manual fault clearing."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(FAULTM_A::_01)
            }
            #[doc = "Fault control is enabled for all channels, and the selected mode is the manual fault clearing."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(FAULTM_A::_10)
            }
            #[doc = "Fault control is enabled for all channels, and the selected mode is the automatic fault clearing."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(FAULTM_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 5)) | (((value as u32) & 0x03) << 5);
                self.w
            }
        }
        #[doc = "Fault Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTIE_A {
            #[doc = "0: Fault control interrupt is disabled."]
            _0 = 0,
            #[doc = "1: Fault control interrupt is enabled."]
            _1 = 1,
        }
        impl From<FAULTIE_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTIE`"]
        pub type FAULTIE_R = crate::R<bool, FAULTIE_A>;
        impl FAULTIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTIE_A {
                match self.bits {
                    false => FAULTIE_A::_0,
                    true => FAULTIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTIE_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTIE`"]
        pub struct FAULTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault control interrupt is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTIE_A::_0)
            }
            #[doc = "Fault control interrupt is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - FTM Enable"]
            #[inline(always)]
            pub fn ftmen(&self) -> FTMEN_R {
                FTMEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Initialize The Channels Output"]
            #[inline(always)]
            pub fn init(&self) -> INIT_R {
                INIT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Write Protection Disable"]
            #[inline(always)]
            pub fn wpdis(&self) -> WPDIS_R {
                WPDIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - PWM Synchronization Mode"]
            #[inline(always)]
            pub fn pwmsync(&self) -> PWMSYNC_R {
                PWMSYNC_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture Test Mode Enable"]
            #[inline(always)]
            pub fn captest(&self) -> CAPTEST_R {
                CAPTEST_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 5:6 - Fault Control Mode"]
            #[inline(always)]
            pub fn faultm(&self) -> FAULTM_R {
                FAULTM_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Fault Interrupt Enable"]
            #[inline(always)]
            pub fn faultie(&self) -> FAULTIE_R {
                FAULTIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - FTM Enable"]
            #[inline(always)]
            pub fn ftmen(&mut self) -> FTMEN_W {
                FTMEN_W { w: self }
            }
            #[doc = "Bit 1 - Initialize The Channels Output"]
            #[inline(always)]
            pub fn init(&mut self) -> INIT_W {
                INIT_W { w: self }
            }
            #[doc = "Bit 2 - Write Protection Disable"]
            #[inline(always)]
            pub fn wpdis(&mut self) -> WPDIS_W {
                WPDIS_W { w: self }
            }
            #[doc = "Bit 3 - PWM Synchronization Mode"]
            #[inline(always)]
            pub fn pwmsync(&mut self) -> PWMSYNC_W {
                PWMSYNC_W { w: self }
            }
            #[doc = "Bit 4 - Capture Test Mode Enable"]
            #[inline(always)]
            pub fn captest(&mut self) -> CAPTEST_W {
                CAPTEST_W { w: self }
            }
            #[doc = "Bits 5:6 - Fault Control Mode"]
            #[inline(always)]
            pub fn faultm(&mut self) -> FAULTM_W {
                FAULTM_W { w: self }
            }
            #[doc = "Bit 7 - Fault Interrupt Enable"]
            #[inline(always)]
            pub fn faultie(&mut self) -> FAULTIE_W {
                FAULTIE_W { w: self }
            }
        }
    }
    #[doc = "Synchronization\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sync](sync) module"]
    pub type SYNC = crate::Reg<u32, _SYNC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SYNC;
    #[doc = "`read()` method returns [sync::R](sync::R) reader structure"]
    impl crate::Readable for SYNC {}
    #[doc = "`write(|w| ..)` method takes [sync::W](sync::W) writer structure"]
    impl crate::Writable for SYNC {}
    #[doc = "Synchronization"]
    pub mod sync {
        #[doc = "Reader of register SYNC"]
        pub type R = crate::R<u32, super::SYNC>;
        #[doc = "Writer for register SYNC"]
        pub type W = crate::W<u32, super::SYNC>;
        #[doc = "Register SYNC `reset()`'s with value 0"]
        impl crate::ResetValue for super::SYNC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Minimum Loading Point Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CNTMIN_A {
            #[doc = "0: The minimum loading point is disabled."]
            _0 = 0,
            #[doc = "1: The minimum loading point is enabled."]
            _1 = 1,
        }
        impl From<CNTMIN_A> for bool {
            #[inline(always)]
            fn from(variant: CNTMIN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CNTMIN`"]
        pub type CNTMIN_R = crate::R<bool, CNTMIN_A>;
        impl CNTMIN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CNTMIN_A {
                match self.bits {
                    false => CNTMIN_A::_0,
                    true => CNTMIN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CNTMIN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CNTMIN_A::_1
            }
        }
        #[doc = "Write proxy for field `CNTMIN`"]
        pub struct CNTMIN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNTMIN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CNTMIN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The minimum loading point is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CNTMIN_A::_0)
            }
            #[doc = "The minimum loading point is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CNTMIN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Maximum Loading Point Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CNTMAX_A {
            #[doc = "0: The maximum loading point is disabled."]
            _0 = 0,
            #[doc = "1: The maximum loading point is enabled."]
            _1 = 1,
        }
        impl From<CNTMAX_A> for bool {
            #[inline(always)]
            fn from(variant: CNTMAX_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CNTMAX`"]
        pub type CNTMAX_R = crate::R<bool, CNTMAX_A>;
        impl CNTMAX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CNTMAX_A {
                match self.bits {
                    false => CNTMAX_A::_0,
                    true => CNTMAX_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CNTMAX_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CNTMAX_A::_1
            }
        }
        #[doc = "Write proxy for field `CNTMAX`"]
        pub struct CNTMAX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNTMAX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CNTMAX_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The maximum loading point is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CNTMAX_A::_0)
            }
            #[doc = "The maximum loading point is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CNTMAX_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "FTM Counter Reinitialization By Synchronization (FTM counter synchronization)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum REINIT_A {
            #[doc = "0: FTM counter continues to count normally."]
            _0 = 0,
            #[doc = "1: FTM counter is updated with its initial value when the selected trigger is detected."]
            _1 = 1,
        }
        impl From<REINIT_A> for bool {
            #[inline(always)]
            fn from(variant: REINIT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `REINIT`"]
        pub type REINIT_R = crate::R<bool, REINIT_A>;
        impl REINIT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> REINIT_A {
                match self.bits {
                    false => REINIT_A::_0,
                    true => REINIT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == REINIT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == REINIT_A::_1
            }
        }
        #[doc = "Write proxy for field `REINIT`"]
        pub struct REINIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REINIT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: REINIT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FTM counter continues to count normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(REINIT_A::_0)
            }
            #[doc = "FTM counter is updated with its initial value when the selected trigger is detected."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(REINIT_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Output Mask Synchronization\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SYNCHOM_A {
            #[doc = "0: OUTMASK register is updated with the value of its buffer in all rising edges of the system clock."]
            _0 = 0,
            #[doc = "1: OUTMASK register is updated with the value of its buffer only by the PWM synchronization."]
            _1 = 1,
        }
        impl From<SYNCHOM_A> for bool {
            #[inline(always)]
            fn from(variant: SYNCHOM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SYNCHOM`"]
        pub type SYNCHOM_R = crate::R<bool, SYNCHOM_A>;
        impl SYNCHOM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SYNCHOM_A {
                match self.bits {
                    false => SYNCHOM_A::_0,
                    true => SYNCHOM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SYNCHOM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SYNCHOM_A::_1
            }
        }
        #[doc = "Write proxy for field `SYNCHOM`"]
        pub struct SYNCHOM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNCHOM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SYNCHOM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "OUTMASK register is updated with the value of its buffer in all rising edges of the system clock."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SYNCHOM_A::_0)
            }
            #[doc = "OUTMASK register is updated with the value of its buffer only by the PWM synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SYNCHOM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "PWM Synchronization Hardware Trigger 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TRIG0_A {
            #[doc = "0: Trigger is disabled."]
            _0 = 0,
            #[doc = "1: Trigger is enabled."]
            _1 = 1,
        }
        impl From<TRIG0_A> for bool {
            #[inline(always)]
            fn from(variant: TRIG0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TRIG0`"]
        pub type TRIG0_R = crate::R<bool, TRIG0_A>;
        impl TRIG0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TRIG0_A {
                match self.bits {
                    false => TRIG0_A::_0,
                    true => TRIG0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TRIG0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TRIG0_A::_1
            }
        }
        #[doc = "Write proxy for field `TRIG0`"]
        pub struct TRIG0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIG0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TRIG0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TRIG0_A::_0)
            }
            #[doc = "Trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TRIG0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "PWM Synchronization Hardware Trigger 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TRIG1_A {
            #[doc = "0: Trigger is disabled."]
            _0 = 0,
            #[doc = "1: Trigger is enabled."]
            _1 = 1,
        }
        impl From<TRIG1_A> for bool {
            #[inline(always)]
            fn from(variant: TRIG1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TRIG1`"]
        pub type TRIG1_R = crate::R<bool, TRIG1_A>;
        impl TRIG1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TRIG1_A {
                match self.bits {
                    false => TRIG1_A::_0,
                    true => TRIG1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TRIG1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TRIG1_A::_1
            }
        }
        #[doc = "Write proxy for field `TRIG1`"]
        pub struct TRIG1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIG1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TRIG1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TRIG1_A::_0)
            }
            #[doc = "Trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TRIG1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "PWM Synchronization Hardware Trigger 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TRIG2_A {
            #[doc = "0: Trigger is disabled."]
            _0 = 0,
            #[doc = "1: Trigger is enabled."]
            _1 = 1,
        }
        impl From<TRIG2_A> for bool {
            #[inline(always)]
            fn from(variant: TRIG2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TRIG2`"]
        pub type TRIG2_R = crate::R<bool, TRIG2_A>;
        impl TRIG2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TRIG2_A {
                match self.bits {
                    false => TRIG2_A::_0,
                    true => TRIG2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TRIG2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TRIG2_A::_1
            }
        }
        #[doc = "Write proxy for field `TRIG2`"]
        pub struct TRIG2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIG2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TRIG2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TRIG2_A::_0)
            }
            #[doc = "Trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TRIG2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "PWM Synchronization Software Trigger\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWSYNC_A {
            #[doc = "0: Software trigger is not selected."]
            _0 = 0,
            #[doc = "1: Software trigger is selected."]
            _1 = 1,
        }
        impl From<SWSYNC_A> for bool {
            #[inline(always)]
            fn from(variant: SWSYNC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWSYNC`"]
        pub type SWSYNC_R = crate::R<bool, SWSYNC_A>;
        impl SWSYNC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWSYNC_A {
                match self.bits {
                    false => SWSYNC_A::_0,
                    true => SWSYNC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SWSYNC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SWSYNC_A::_1
            }
        }
        #[doc = "Write proxy for field `SWSYNC`"]
        pub struct SWSYNC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWSYNC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWSYNC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Software trigger is not selected."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SWSYNC_A::_0)
            }
            #[doc = "Software trigger is selected."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SWSYNC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Minimum Loading Point Enable"]
            #[inline(always)]
            pub fn cntmin(&self) -> CNTMIN_R {
                CNTMIN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Maximum Loading Point Enable"]
            #[inline(always)]
            pub fn cntmax(&self) -> CNTMAX_R {
                CNTMAX_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - FTM Counter Reinitialization By Synchronization (FTM counter synchronization)"]
            #[inline(always)]
            pub fn reinit(&self) -> REINIT_R {
                REINIT_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Output Mask Synchronization"]
            #[inline(always)]
            pub fn synchom(&self) -> SYNCHOM_R {
                SYNCHOM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - PWM Synchronization Hardware Trigger 0"]
            #[inline(always)]
            pub fn trig0(&self) -> TRIG0_R {
                TRIG0_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - PWM Synchronization Hardware Trigger 1"]
            #[inline(always)]
            pub fn trig1(&self) -> TRIG1_R {
                TRIG1_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - PWM Synchronization Hardware Trigger 2"]
            #[inline(always)]
            pub fn trig2(&self) -> TRIG2_R {
                TRIG2_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - PWM Synchronization Software Trigger"]
            #[inline(always)]
            pub fn swsync(&self) -> SWSYNC_R {
                SWSYNC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Minimum Loading Point Enable"]
            #[inline(always)]
            pub fn cntmin(&mut self) -> CNTMIN_W {
                CNTMIN_W { w: self }
            }
            #[doc = "Bit 1 - Maximum Loading Point Enable"]
            #[inline(always)]
            pub fn cntmax(&mut self) -> CNTMAX_W {
                CNTMAX_W { w: self }
            }
            #[doc = "Bit 2 - FTM Counter Reinitialization By Synchronization (FTM counter synchronization)"]
            #[inline(always)]
            pub fn reinit(&mut self) -> REINIT_W {
                REINIT_W { w: self }
            }
            #[doc = "Bit 3 - Output Mask Synchronization"]
            #[inline(always)]
            pub fn synchom(&mut self) -> SYNCHOM_W {
                SYNCHOM_W { w: self }
            }
            #[doc = "Bit 4 - PWM Synchronization Hardware Trigger 0"]
            #[inline(always)]
            pub fn trig0(&mut self) -> TRIG0_W {
                TRIG0_W { w: self }
            }
            #[doc = "Bit 5 - PWM Synchronization Hardware Trigger 1"]
            #[inline(always)]
            pub fn trig1(&mut self) -> TRIG1_W {
                TRIG1_W { w: self }
            }
            #[doc = "Bit 6 - PWM Synchronization Hardware Trigger 2"]
            #[inline(always)]
            pub fn trig2(&mut self) -> TRIG2_W {
                TRIG2_W { w: self }
            }
            #[doc = "Bit 7 - PWM Synchronization Software Trigger"]
            #[inline(always)]
            pub fn swsync(&mut self) -> SWSYNC_W {
                SWSYNC_W { w: self }
            }
        }
    }
    #[doc = "Initial State For Channels Output\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [outinit](outinit) module"]
    pub type OUTINIT = crate::Reg<u32, _OUTINIT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OUTINIT;
    #[doc = "`read()` method returns [outinit::R](outinit::R) reader structure"]
    impl crate::Readable for OUTINIT {}
    #[doc = "`write(|w| ..)` method takes [outinit::W](outinit::W) writer structure"]
    impl crate::Writable for OUTINIT {}
    #[doc = "Initial State For Channels Output"]
    pub mod outinit {
        #[doc = "Reader of register OUTINIT"]
        pub type R = crate::R<u32, super::OUTINIT>;
        #[doc = "Writer for register OUTINIT"]
        pub type W = crate::W<u32, super::OUTINIT>;
        #[doc = "Register OUTINIT `reset()`'s with value 0"]
        impl crate::ResetValue for super::OUTINIT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Channel 0 Output Initialization Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH0OI_A {
            #[doc = "0: The initialization value is 0."]
            _0 = 0,
            #[doc = "1: The initialization value is 1."]
            _1 = 1,
        }
        impl From<CH0OI_A> for bool {
            #[inline(always)]
            fn from(variant: CH0OI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH0OI`"]
        pub type CH0OI_R = crate::R<bool, CH0OI_A>;
        impl CH0OI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH0OI_A {
                match self.bits {
                    false => CH0OI_A::_0,
                    true => CH0OI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH0OI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH0OI_A::_1
            }
        }
        #[doc = "Write proxy for field `CH0OI`"]
        pub struct CH0OI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0OI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH0OI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The initialization value is 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH0OI_A::_0)
            }
            #[doc = "The initialization value is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH0OI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Channel 1 Output Initialization Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH1OI_A {
            #[doc = "0: The initialization value is 0."]
            _0 = 0,
            #[doc = "1: The initialization value is 1."]
            _1 = 1,
        }
        impl From<CH1OI_A> for bool {
            #[inline(always)]
            fn from(variant: CH1OI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH1OI`"]
        pub type CH1OI_R = crate::R<bool, CH1OI_A>;
        impl CH1OI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH1OI_A {
                match self.bits {
                    false => CH1OI_A::_0,
                    true => CH1OI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH1OI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH1OI_A::_1
            }
        }
        #[doc = "Write proxy for field `CH1OI`"]
        pub struct CH1OI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1OI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH1OI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The initialization value is 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH1OI_A::_0)
            }
            #[doc = "The initialization value is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH1OI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Channel 2 Output Initialization Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH2OI_A {
            #[doc = "0: The initialization value is 0."]
            _0 = 0,
            #[doc = "1: The initialization value is 1."]
            _1 = 1,
        }
        impl From<CH2OI_A> for bool {
            #[inline(always)]
            fn from(variant: CH2OI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH2OI`"]
        pub type CH2OI_R = crate::R<bool, CH2OI_A>;
        impl CH2OI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH2OI_A {
                match self.bits {
                    false => CH2OI_A::_0,
                    true => CH2OI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH2OI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH2OI_A::_1
            }
        }
        #[doc = "Write proxy for field `CH2OI`"]
        pub struct CH2OI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2OI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH2OI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The initialization value is 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH2OI_A::_0)
            }
            #[doc = "The initialization value is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH2OI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel 3 Output Initialization Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH3OI_A {
            #[doc = "0: The initialization value is 0."]
            _0 = 0,
            #[doc = "1: The initialization value is 1."]
            _1 = 1,
        }
        impl From<CH3OI_A> for bool {
            #[inline(always)]
            fn from(variant: CH3OI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH3OI`"]
        pub type CH3OI_R = crate::R<bool, CH3OI_A>;
        impl CH3OI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH3OI_A {
                match self.bits {
                    false => CH3OI_A::_0,
                    true => CH3OI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH3OI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH3OI_A::_1
            }
        }
        #[doc = "Write proxy for field `CH3OI`"]
        pub struct CH3OI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3OI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH3OI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The initialization value is 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH3OI_A::_0)
            }
            #[doc = "The initialization value is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH3OI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Channel 4 Output Initialization Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH4OI_A {
            #[doc = "0: The initialization value is 0."]
            _0 = 0,
            #[doc = "1: The initialization value is 1."]
            _1 = 1,
        }
        impl From<CH4OI_A> for bool {
            #[inline(always)]
            fn from(variant: CH4OI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH4OI`"]
        pub type CH4OI_R = crate::R<bool, CH4OI_A>;
        impl CH4OI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH4OI_A {
                match self.bits {
                    false => CH4OI_A::_0,
                    true => CH4OI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH4OI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH4OI_A::_1
            }
        }
        #[doc = "Write proxy for field `CH4OI`"]
        pub struct CH4OI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH4OI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH4OI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The initialization value is 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH4OI_A::_0)
            }
            #[doc = "The initialization value is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH4OI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Channel 5 Output Initialization Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH5OI_A {
            #[doc = "0: The initialization value is 0."]
            _0 = 0,
            #[doc = "1: The initialization value is 1."]
            _1 = 1,
        }
        impl From<CH5OI_A> for bool {
            #[inline(always)]
            fn from(variant: CH5OI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH5OI`"]
        pub type CH5OI_R = crate::R<bool, CH5OI_A>;
        impl CH5OI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH5OI_A {
                match self.bits {
                    false => CH5OI_A::_0,
                    true => CH5OI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH5OI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH5OI_A::_1
            }
        }
        #[doc = "Write proxy for field `CH5OI`"]
        pub struct CH5OI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH5OI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH5OI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The initialization value is 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH5OI_A::_0)
            }
            #[doc = "The initialization value is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH5OI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Channel 6 Output Initialization Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH6OI_A {
            #[doc = "0: The initialization value is 0."]
            _0 = 0,
            #[doc = "1: The initialization value is 1."]
            _1 = 1,
        }
        impl From<CH6OI_A> for bool {
            #[inline(always)]
            fn from(variant: CH6OI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH6OI`"]
        pub type CH6OI_R = crate::R<bool, CH6OI_A>;
        impl CH6OI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH6OI_A {
                match self.bits {
                    false => CH6OI_A::_0,
                    true => CH6OI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH6OI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH6OI_A::_1
            }
        }
        #[doc = "Write proxy for field `CH6OI`"]
        pub struct CH6OI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH6OI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH6OI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The initialization value is 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH6OI_A::_0)
            }
            #[doc = "The initialization value is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH6OI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel 7 Output Initialization Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH7OI_A {
            #[doc = "0: The initialization value is 0."]
            _0 = 0,
            #[doc = "1: The initialization value is 1."]
            _1 = 1,
        }
        impl From<CH7OI_A> for bool {
            #[inline(always)]
            fn from(variant: CH7OI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH7OI`"]
        pub type CH7OI_R = crate::R<bool, CH7OI_A>;
        impl CH7OI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH7OI_A {
                match self.bits {
                    false => CH7OI_A::_0,
                    true => CH7OI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH7OI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH7OI_A::_1
            }
        }
        #[doc = "Write proxy for field `CH7OI`"]
        pub struct CH7OI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH7OI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH7OI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The initialization value is 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH7OI_A::_0)
            }
            #[doc = "The initialization value is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH7OI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel 0 Output Initialization Value"]
            #[inline(always)]
            pub fn ch0oi(&self) -> CH0OI_R {
                CH0OI_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 1 Output Initialization Value"]
            #[inline(always)]
            pub fn ch1oi(&self) -> CH1OI_R {
                CH1OI_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel 2 Output Initialization Value"]
            #[inline(always)]
            pub fn ch2oi(&self) -> CH2OI_R {
                CH2OI_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel 3 Output Initialization Value"]
            #[inline(always)]
            pub fn ch3oi(&self) -> CH3OI_R {
                CH3OI_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 4 Output Initialization Value"]
            #[inline(always)]
            pub fn ch4oi(&self) -> CH4OI_R {
                CH4OI_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 5 Output Initialization Value"]
            #[inline(always)]
            pub fn ch5oi(&self) -> CH5OI_R {
                CH5OI_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel 6 Output Initialization Value"]
            #[inline(always)]
            pub fn ch6oi(&self) -> CH6OI_R {
                CH6OI_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel 7 Output Initialization Value"]
            #[inline(always)]
            pub fn ch7oi(&self) -> CH7OI_R {
                CH7OI_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 0 Output Initialization Value"]
            #[inline(always)]
            pub fn ch0oi(&mut self) -> CH0OI_W {
                CH0OI_W { w: self }
            }
            #[doc = "Bit 1 - Channel 1 Output Initialization Value"]
            #[inline(always)]
            pub fn ch1oi(&mut self) -> CH1OI_W {
                CH1OI_W { w: self }
            }
            #[doc = "Bit 2 - Channel 2 Output Initialization Value"]
            #[inline(always)]
            pub fn ch2oi(&mut self) -> CH2OI_W {
                CH2OI_W { w: self }
            }
            #[doc = "Bit 3 - Channel 3 Output Initialization Value"]
            #[inline(always)]
            pub fn ch3oi(&mut self) -> CH3OI_W {
                CH3OI_W { w: self }
            }
            #[doc = "Bit 4 - Channel 4 Output Initialization Value"]
            #[inline(always)]
            pub fn ch4oi(&mut self) -> CH4OI_W {
                CH4OI_W { w: self }
            }
            #[doc = "Bit 5 - Channel 5 Output Initialization Value"]
            #[inline(always)]
            pub fn ch5oi(&mut self) -> CH5OI_W {
                CH5OI_W { w: self }
            }
            #[doc = "Bit 6 - Channel 6 Output Initialization Value"]
            #[inline(always)]
            pub fn ch6oi(&mut self) -> CH6OI_W {
                CH6OI_W { w: self }
            }
            #[doc = "Bit 7 - Channel 7 Output Initialization Value"]
            #[inline(always)]
            pub fn ch7oi(&mut self) -> CH7OI_W {
                CH7OI_W { w: self }
            }
        }
    }
    #[doc = "Output Mask\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [outmask](outmask) module"]
    pub type OUTMASK = crate::Reg<u32, _OUTMASK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OUTMASK;
    #[doc = "`read()` method returns [outmask::R](outmask::R) reader structure"]
    impl crate::Readable for OUTMASK {}
    #[doc = "`write(|w| ..)` method takes [outmask::W](outmask::W) writer structure"]
    impl crate::Writable for OUTMASK {}
    #[doc = "Output Mask"]
    pub mod outmask {
        #[doc = "Reader of register OUTMASK"]
        pub type R = crate::R<u32, super::OUTMASK>;
        #[doc = "Writer for register OUTMASK"]
        pub type W = crate::W<u32, super::OUTMASK>;
        #[doc = "Register OUTMASK `reset()`'s with value 0"]
        impl crate::ResetValue for super::OUTMASK {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Channel 0 Output Mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH0OM_A {
            #[doc = "0: Channel output is not masked. It continues to operate normally."]
            _0 = 0,
            #[doc = "1: Channel output is masked. It is forced to its inactive state."]
            _1 = 1,
        }
        impl From<CH0OM_A> for bool {
            #[inline(always)]
            fn from(variant: CH0OM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH0OM`"]
        pub type CH0OM_R = crate::R<bool, CH0OM_A>;
        impl CH0OM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH0OM_A {
                match self.bits {
                    false => CH0OM_A::_0,
                    true => CH0OM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH0OM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH0OM_A::_1
            }
        }
        #[doc = "Write proxy for field `CH0OM`"]
        pub struct CH0OM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0OM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH0OM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channel output is not masked. It continues to operate normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH0OM_A::_0)
            }
            #[doc = "Channel output is masked. It is forced to its inactive state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH0OM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Channel 1 Output Mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH1OM_A {
            #[doc = "0: Channel output is not masked. It continues to operate normally."]
            _0 = 0,
            #[doc = "1: Channel output is masked. It is forced to its inactive state."]
            _1 = 1,
        }
        impl From<CH1OM_A> for bool {
            #[inline(always)]
            fn from(variant: CH1OM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH1OM`"]
        pub type CH1OM_R = crate::R<bool, CH1OM_A>;
        impl CH1OM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH1OM_A {
                match self.bits {
                    false => CH1OM_A::_0,
                    true => CH1OM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH1OM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH1OM_A::_1
            }
        }
        #[doc = "Write proxy for field `CH1OM`"]
        pub struct CH1OM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1OM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH1OM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channel output is not masked. It continues to operate normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH1OM_A::_0)
            }
            #[doc = "Channel output is masked. It is forced to its inactive state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH1OM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Channel 2 Output Mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH2OM_A {
            #[doc = "0: Channel output is not masked. It continues to operate normally."]
            _0 = 0,
            #[doc = "1: Channel output is masked. It is forced to its inactive state."]
            _1 = 1,
        }
        impl From<CH2OM_A> for bool {
            #[inline(always)]
            fn from(variant: CH2OM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH2OM`"]
        pub type CH2OM_R = crate::R<bool, CH2OM_A>;
        impl CH2OM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH2OM_A {
                match self.bits {
                    false => CH2OM_A::_0,
                    true => CH2OM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH2OM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH2OM_A::_1
            }
        }
        #[doc = "Write proxy for field `CH2OM`"]
        pub struct CH2OM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2OM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH2OM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channel output is not masked. It continues to operate normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH2OM_A::_0)
            }
            #[doc = "Channel output is masked. It is forced to its inactive state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH2OM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel 3 Output Mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH3OM_A {
            #[doc = "0: Channel output is not masked. It continues to operate normally."]
            _0 = 0,
            #[doc = "1: Channel output is masked. It is forced to its inactive state."]
            _1 = 1,
        }
        impl From<CH3OM_A> for bool {
            #[inline(always)]
            fn from(variant: CH3OM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH3OM`"]
        pub type CH3OM_R = crate::R<bool, CH3OM_A>;
        impl CH3OM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH3OM_A {
                match self.bits {
                    false => CH3OM_A::_0,
                    true => CH3OM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH3OM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH3OM_A::_1
            }
        }
        #[doc = "Write proxy for field `CH3OM`"]
        pub struct CH3OM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3OM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH3OM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channel output is not masked. It continues to operate normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH3OM_A::_0)
            }
            #[doc = "Channel output is masked. It is forced to its inactive state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH3OM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Channel 4 Output Mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH4OM_A {
            #[doc = "0: Channel output is not masked. It continues to operate normally."]
            _0 = 0,
            #[doc = "1: Channel output is masked. It is forced to its inactive state."]
            _1 = 1,
        }
        impl From<CH4OM_A> for bool {
            #[inline(always)]
            fn from(variant: CH4OM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH4OM`"]
        pub type CH4OM_R = crate::R<bool, CH4OM_A>;
        impl CH4OM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH4OM_A {
                match self.bits {
                    false => CH4OM_A::_0,
                    true => CH4OM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH4OM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH4OM_A::_1
            }
        }
        #[doc = "Write proxy for field `CH4OM`"]
        pub struct CH4OM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH4OM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH4OM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channel output is not masked. It continues to operate normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH4OM_A::_0)
            }
            #[doc = "Channel output is masked. It is forced to its inactive state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH4OM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Channel 5 Output Mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH5OM_A {
            #[doc = "0: Channel output is not masked. It continues to operate normally."]
            _0 = 0,
            #[doc = "1: Channel output is masked. It is forced to its inactive state."]
            _1 = 1,
        }
        impl From<CH5OM_A> for bool {
            #[inline(always)]
            fn from(variant: CH5OM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH5OM`"]
        pub type CH5OM_R = crate::R<bool, CH5OM_A>;
        impl CH5OM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH5OM_A {
                match self.bits {
                    false => CH5OM_A::_0,
                    true => CH5OM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH5OM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH5OM_A::_1
            }
        }
        #[doc = "Write proxy for field `CH5OM`"]
        pub struct CH5OM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH5OM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH5OM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channel output is not masked. It continues to operate normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH5OM_A::_0)
            }
            #[doc = "Channel output is masked. It is forced to its inactive state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH5OM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Channel 6 Output Mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH6OM_A {
            #[doc = "0: Channel output is not masked. It continues to operate normally."]
            _0 = 0,
            #[doc = "1: Channel output is masked. It is forced to its inactive state."]
            _1 = 1,
        }
        impl From<CH6OM_A> for bool {
            #[inline(always)]
            fn from(variant: CH6OM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH6OM`"]
        pub type CH6OM_R = crate::R<bool, CH6OM_A>;
        impl CH6OM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH6OM_A {
                match self.bits {
                    false => CH6OM_A::_0,
                    true => CH6OM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH6OM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH6OM_A::_1
            }
        }
        #[doc = "Write proxy for field `CH6OM`"]
        pub struct CH6OM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH6OM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH6OM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channel output is not masked. It continues to operate normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH6OM_A::_0)
            }
            #[doc = "Channel output is masked. It is forced to its inactive state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH6OM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel 7 Output Mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH7OM_A {
            #[doc = "0: Channel output is not masked. It continues to operate normally."]
            _0 = 0,
            #[doc = "1: Channel output is masked. It is forced to its inactive state."]
            _1 = 1,
        }
        impl From<CH7OM_A> for bool {
            #[inline(always)]
            fn from(variant: CH7OM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH7OM`"]
        pub type CH7OM_R = crate::R<bool, CH7OM_A>;
        impl CH7OM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH7OM_A {
                match self.bits {
                    false => CH7OM_A::_0,
                    true => CH7OM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH7OM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH7OM_A::_1
            }
        }
        #[doc = "Write proxy for field `CH7OM`"]
        pub struct CH7OM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH7OM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH7OM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channel output is not masked. It continues to operate normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH7OM_A::_0)
            }
            #[doc = "Channel output is masked. It is forced to its inactive state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH7OM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel 0 Output Mask"]
            #[inline(always)]
            pub fn ch0om(&self) -> CH0OM_R {
                CH0OM_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 1 Output Mask"]
            #[inline(always)]
            pub fn ch1om(&self) -> CH1OM_R {
                CH1OM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel 2 Output Mask"]
            #[inline(always)]
            pub fn ch2om(&self) -> CH2OM_R {
                CH2OM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel 3 Output Mask"]
            #[inline(always)]
            pub fn ch3om(&self) -> CH3OM_R {
                CH3OM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 4 Output Mask"]
            #[inline(always)]
            pub fn ch4om(&self) -> CH4OM_R {
                CH4OM_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 5 Output Mask"]
            #[inline(always)]
            pub fn ch5om(&self) -> CH5OM_R {
                CH5OM_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel 6 Output Mask"]
            #[inline(always)]
            pub fn ch6om(&self) -> CH6OM_R {
                CH6OM_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel 7 Output Mask"]
            #[inline(always)]
            pub fn ch7om(&self) -> CH7OM_R {
                CH7OM_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 0 Output Mask"]
            #[inline(always)]
            pub fn ch0om(&mut self) -> CH0OM_W {
                CH0OM_W { w: self }
            }
            #[doc = "Bit 1 - Channel 1 Output Mask"]
            #[inline(always)]
            pub fn ch1om(&mut self) -> CH1OM_W {
                CH1OM_W { w: self }
            }
            #[doc = "Bit 2 - Channel 2 Output Mask"]
            #[inline(always)]
            pub fn ch2om(&mut self) -> CH2OM_W {
                CH2OM_W { w: self }
            }
            #[doc = "Bit 3 - Channel 3 Output Mask"]
            #[inline(always)]
            pub fn ch3om(&mut self) -> CH3OM_W {
                CH3OM_W { w: self }
            }
            #[doc = "Bit 4 - Channel 4 Output Mask"]
            #[inline(always)]
            pub fn ch4om(&mut self) -> CH4OM_W {
                CH4OM_W { w: self }
            }
            #[doc = "Bit 5 - Channel 5 Output Mask"]
            #[inline(always)]
            pub fn ch5om(&mut self) -> CH5OM_W {
                CH5OM_W { w: self }
            }
            #[doc = "Bit 6 - Channel 6 Output Mask"]
            #[inline(always)]
            pub fn ch6om(&mut self) -> CH6OM_W {
                CH6OM_W { w: self }
            }
            #[doc = "Bit 7 - Channel 7 Output Mask"]
            #[inline(always)]
            pub fn ch7om(&mut self) -> CH7OM_W {
                CH7OM_W { w: self }
            }
        }
    }
    #[doc = "Function For Linked Channels\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [combine](combine) module"]
    pub type COMBINE = crate::Reg<u32, _COMBINE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _COMBINE;
    #[doc = "`read()` method returns [combine::R](combine::R) reader structure"]
    impl crate::Readable for COMBINE {}
    #[doc = "`write(|w| ..)` method takes [combine::W](combine::W) writer structure"]
    impl crate::Writable for COMBINE {}
    #[doc = "Function For Linked Channels"]
    pub mod combine {
        #[doc = "Reader of register COMBINE"]
        pub type R = crate::R<u32, super::COMBINE>;
        #[doc = "Writer for register COMBINE"]
        pub type W = crate::W<u32, super::COMBINE>;
        #[doc = "Register COMBINE `reset()`'s with value 0"]
        impl crate::ResetValue for super::COMBINE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Combine Channels For n = 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMBINE0_A {
            #[doc = "0: Channels (n) and (n+1) are independent."]
            _0 = 0,
            #[doc = "1: Channels (n) and (n+1) are combined."]
            _1 = 1,
        }
        impl From<COMBINE0_A> for bool {
            #[inline(always)]
            fn from(variant: COMBINE0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMBINE0`"]
        pub type COMBINE0_R = crate::R<bool, COMBINE0_A>;
        impl COMBINE0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMBINE0_A {
                match self.bits {
                    false => COMBINE0_A::_0,
                    true => COMBINE0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COMBINE0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COMBINE0_A::_1
            }
        }
        #[doc = "Write proxy for field `COMBINE0`"]
        pub struct COMBINE0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMBINE0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMBINE0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channels (n) and (n+1) are independent."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(COMBINE0_A::_0)
            }
            #[doc = "Channels (n) and (n+1) are combined."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(COMBINE0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Complement Of Channel (n) For n = 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMP0_A {
            #[doc = "0: The channel (n+1) output is the same as the channel (n) output."]
            _0 = 0,
            #[doc = "1: The channel (n+1) output is the complement of the channel (n) output."]
            _1 = 1,
        }
        impl From<COMP0_A> for bool {
            #[inline(always)]
            fn from(variant: COMP0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMP0`"]
        pub type COMP0_R = crate::R<bool, COMP0_A>;
        impl COMP0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMP0_A {
                match self.bits {
                    false => COMP0_A::_0,
                    true => COMP0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COMP0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COMP0_A::_1
            }
        }
        #[doc = "Write proxy for field `COMP0`"]
        pub struct COMP0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMP0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMP0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel (n+1) output is the same as the channel (n) output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(COMP0_A::_0)
            }
            #[doc = "The channel (n+1) output is the complement of the channel (n) output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(COMP0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Dual Edge Capture Mode Enable For n = 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DECAPEN0_A {
            #[doc = "0: The Dual Edge Capture mode in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The Dual Edge Capture mode in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<DECAPEN0_A> for bool {
            #[inline(always)]
            fn from(variant: DECAPEN0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DECAPEN0`"]
        pub type DECAPEN0_R = crate::R<bool, DECAPEN0_A>;
        impl DECAPEN0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DECAPEN0_A {
                match self.bits {
                    false => DECAPEN0_A::_0,
                    true => DECAPEN0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DECAPEN0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DECAPEN0_A::_1
            }
        }
        #[doc = "Write proxy for field `DECAPEN0`"]
        pub struct DECAPEN0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DECAPEN0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DECAPEN0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The Dual Edge Capture mode in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DECAPEN0_A::_0)
            }
            #[doc = "The Dual Edge Capture mode in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DECAPEN0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Dual Edge Capture Mode Captures For n = 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DECAP0_A {
            #[doc = "0: The dual edge captures are inactive."]
            _0 = 0,
            #[doc = "1: The dual edge captures are active."]
            _1 = 1,
        }
        impl From<DECAP0_A> for bool {
            #[inline(always)]
            fn from(variant: DECAP0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DECAP0`"]
        pub type DECAP0_R = crate::R<bool, DECAP0_A>;
        impl DECAP0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DECAP0_A {
                match self.bits {
                    false => DECAP0_A::_0,
                    true => DECAP0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DECAP0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DECAP0_A::_1
            }
        }
        #[doc = "Write proxy for field `DECAP0`"]
        pub struct DECAP0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DECAP0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DECAP0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The dual edge captures are inactive."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DECAP0_A::_0)
            }
            #[doc = "The dual edge captures are active."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DECAP0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Deadtime Enable For n = 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DTEN0_A {
            #[doc = "0: The deadtime insertion in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The deadtime insertion in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<DTEN0_A> for bool {
            #[inline(always)]
            fn from(variant: DTEN0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DTEN0`"]
        pub type DTEN0_R = crate::R<bool, DTEN0_A>;
        impl DTEN0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DTEN0_A {
                match self.bits {
                    false => DTEN0_A::_0,
                    true => DTEN0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DTEN0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DTEN0_A::_1
            }
        }
        #[doc = "Write proxy for field `DTEN0`"]
        pub struct DTEN0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTEN0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DTEN0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The deadtime insertion in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DTEN0_A::_0)
            }
            #[doc = "The deadtime insertion in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DTEN0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Synchronization Enable For n = 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SYNCEN0_A {
            #[doc = "0: The PWM synchronization in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The PWM synchronization in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<SYNCEN0_A> for bool {
            #[inline(always)]
            fn from(variant: SYNCEN0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SYNCEN0`"]
        pub type SYNCEN0_R = crate::R<bool, SYNCEN0_A>;
        impl SYNCEN0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SYNCEN0_A {
                match self.bits {
                    false => SYNCEN0_A::_0,
                    true => SYNCEN0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SYNCEN0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SYNCEN0_A::_1
            }
        }
        #[doc = "Write proxy for field `SYNCEN0`"]
        pub struct SYNCEN0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNCEN0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SYNCEN0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The PWM synchronization in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SYNCEN0_A::_0)
            }
            #[doc = "The PWM synchronization in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SYNCEN0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Fault Control Enable For n = 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTEN0_A {
            #[doc = "0: The fault control in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The fault control in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<FAULTEN0_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTEN0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTEN0`"]
        pub type FAULTEN0_R = crate::R<bool, FAULTEN0_A>;
        impl FAULTEN0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTEN0_A {
                match self.bits {
                    false => FAULTEN0_A::_0,
                    true => FAULTEN0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTEN0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTEN0_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTEN0`"]
        pub struct FAULTEN0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTEN0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTEN0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The fault control in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTEN0_A::_0)
            }
            #[doc = "The fault control in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTEN0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Combine Channels For n = 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMBINE1_A {
            #[doc = "0: Channels (n) and (n+1) are independent."]
            _0 = 0,
            #[doc = "1: Channels (n) and (n+1) are combined."]
            _1 = 1,
        }
        impl From<COMBINE1_A> for bool {
            #[inline(always)]
            fn from(variant: COMBINE1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMBINE1`"]
        pub type COMBINE1_R = crate::R<bool, COMBINE1_A>;
        impl COMBINE1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMBINE1_A {
                match self.bits {
                    false => COMBINE1_A::_0,
                    true => COMBINE1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COMBINE1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COMBINE1_A::_1
            }
        }
        #[doc = "Write proxy for field `COMBINE1`"]
        pub struct COMBINE1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMBINE1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMBINE1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channels (n) and (n+1) are independent."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(COMBINE1_A::_0)
            }
            #[doc = "Channels (n) and (n+1) are combined."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(COMBINE1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Complement Of Channel (n) For n = 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMP1_A {
            #[doc = "0: The channel (n+1) output is the same as the channel (n) output."]
            _0 = 0,
            #[doc = "1: The channel (n+1) output is the complement of the channel (n) output."]
            _1 = 1,
        }
        impl From<COMP1_A> for bool {
            #[inline(always)]
            fn from(variant: COMP1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMP1`"]
        pub type COMP1_R = crate::R<bool, COMP1_A>;
        impl COMP1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMP1_A {
                match self.bits {
                    false => COMP1_A::_0,
                    true => COMP1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COMP1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COMP1_A::_1
            }
        }
        #[doc = "Write proxy for field `COMP1`"]
        pub struct COMP1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMP1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMP1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel (n+1) output is the same as the channel (n) output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(COMP1_A::_0)
            }
            #[doc = "The channel (n+1) output is the complement of the channel (n) output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(COMP1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Dual Edge Capture Mode Enable For n = 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DECAPEN1_A {
            #[doc = "0: The Dual Edge Capture mode in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The Dual Edge Capture mode in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<DECAPEN1_A> for bool {
            #[inline(always)]
            fn from(variant: DECAPEN1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DECAPEN1`"]
        pub type DECAPEN1_R = crate::R<bool, DECAPEN1_A>;
        impl DECAPEN1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DECAPEN1_A {
                match self.bits {
                    false => DECAPEN1_A::_0,
                    true => DECAPEN1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DECAPEN1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DECAPEN1_A::_1
            }
        }
        #[doc = "Write proxy for field `DECAPEN1`"]
        pub struct DECAPEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DECAPEN1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DECAPEN1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The Dual Edge Capture mode in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DECAPEN1_A::_0)
            }
            #[doc = "The Dual Edge Capture mode in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DECAPEN1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Dual Edge Capture Mode Captures For n = 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DECAP1_A {
            #[doc = "0: The dual edge captures are inactive."]
            _0 = 0,
            #[doc = "1: The dual edge captures are active."]
            _1 = 1,
        }
        impl From<DECAP1_A> for bool {
            #[inline(always)]
            fn from(variant: DECAP1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DECAP1`"]
        pub type DECAP1_R = crate::R<bool, DECAP1_A>;
        impl DECAP1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DECAP1_A {
                match self.bits {
                    false => DECAP1_A::_0,
                    true => DECAP1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DECAP1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DECAP1_A::_1
            }
        }
        #[doc = "Write proxy for field `DECAP1`"]
        pub struct DECAP1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DECAP1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DECAP1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The dual edge captures are inactive."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DECAP1_A::_0)
            }
            #[doc = "The dual edge captures are active."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DECAP1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Deadtime Enable For n = 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DTEN1_A {
            #[doc = "0: The deadtime insertion in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The deadtime insertion in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<DTEN1_A> for bool {
            #[inline(always)]
            fn from(variant: DTEN1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DTEN1`"]
        pub type DTEN1_R = crate::R<bool, DTEN1_A>;
        impl DTEN1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DTEN1_A {
                match self.bits {
                    false => DTEN1_A::_0,
                    true => DTEN1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DTEN1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DTEN1_A::_1
            }
        }
        #[doc = "Write proxy for field `DTEN1`"]
        pub struct DTEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTEN1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DTEN1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The deadtime insertion in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DTEN1_A::_0)
            }
            #[doc = "The deadtime insertion in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DTEN1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Synchronization Enable For n = 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SYNCEN1_A {
            #[doc = "0: The PWM synchronization in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The PWM synchronization in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<SYNCEN1_A> for bool {
            #[inline(always)]
            fn from(variant: SYNCEN1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SYNCEN1`"]
        pub type SYNCEN1_R = crate::R<bool, SYNCEN1_A>;
        impl SYNCEN1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SYNCEN1_A {
                match self.bits {
                    false => SYNCEN1_A::_0,
                    true => SYNCEN1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SYNCEN1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SYNCEN1_A::_1
            }
        }
        #[doc = "Write proxy for field `SYNCEN1`"]
        pub struct SYNCEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNCEN1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SYNCEN1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The PWM synchronization in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SYNCEN1_A::_0)
            }
            #[doc = "The PWM synchronization in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SYNCEN1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Fault Control Enable For n = 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTEN1_A {
            #[doc = "0: The fault control in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The fault control in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<FAULTEN1_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTEN1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTEN1`"]
        pub type FAULTEN1_R = crate::R<bool, FAULTEN1_A>;
        impl FAULTEN1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTEN1_A {
                match self.bits {
                    false => FAULTEN1_A::_0,
                    true => FAULTEN1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTEN1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTEN1_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTEN1`"]
        pub struct FAULTEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTEN1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTEN1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The fault control in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTEN1_A::_0)
            }
            #[doc = "The fault control in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTEN1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Combine Channels For n = 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMBINE2_A {
            #[doc = "0: Channels (n) and (n+1) are independent."]
            _0 = 0,
            #[doc = "1: Channels (n) and (n+1) are combined."]
            _1 = 1,
        }
        impl From<COMBINE2_A> for bool {
            #[inline(always)]
            fn from(variant: COMBINE2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMBINE2`"]
        pub type COMBINE2_R = crate::R<bool, COMBINE2_A>;
        impl COMBINE2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMBINE2_A {
                match self.bits {
                    false => COMBINE2_A::_0,
                    true => COMBINE2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COMBINE2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COMBINE2_A::_1
            }
        }
        #[doc = "Write proxy for field `COMBINE2`"]
        pub struct COMBINE2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMBINE2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMBINE2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channels (n) and (n+1) are independent."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(COMBINE2_A::_0)
            }
            #[doc = "Channels (n) and (n+1) are combined."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(COMBINE2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Complement Of Channel (n) For n = 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMP2_A {
            #[doc = "0: The channel (n+1) output is the same as the channel (n) output."]
            _0 = 0,
            #[doc = "1: The channel (n+1) output is the complement of the channel (n) output."]
            _1 = 1,
        }
        impl From<COMP2_A> for bool {
            #[inline(always)]
            fn from(variant: COMP2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMP2`"]
        pub type COMP2_R = crate::R<bool, COMP2_A>;
        impl COMP2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMP2_A {
                match self.bits {
                    false => COMP2_A::_0,
                    true => COMP2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COMP2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COMP2_A::_1
            }
        }
        #[doc = "Write proxy for field `COMP2`"]
        pub struct COMP2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMP2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMP2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel (n+1) output is the same as the channel (n) output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(COMP2_A::_0)
            }
            #[doc = "The channel (n+1) output is the complement of the channel (n) output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(COMP2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Dual Edge Capture Mode Enable For n = 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DECAPEN2_A {
            #[doc = "0: The Dual Edge Capture mode in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The Dual Edge Capture mode in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<DECAPEN2_A> for bool {
            #[inline(always)]
            fn from(variant: DECAPEN2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DECAPEN2`"]
        pub type DECAPEN2_R = crate::R<bool, DECAPEN2_A>;
        impl DECAPEN2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DECAPEN2_A {
                match self.bits {
                    false => DECAPEN2_A::_0,
                    true => DECAPEN2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DECAPEN2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DECAPEN2_A::_1
            }
        }
        #[doc = "Write proxy for field `DECAPEN2`"]
        pub struct DECAPEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DECAPEN2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DECAPEN2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The Dual Edge Capture mode in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DECAPEN2_A::_0)
            }
            #[doc = "The Dual Edge Capture mode in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DECAPEN2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Dual Edge Capture Mode Captures For n = 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DECAP2_A {
            #[doc = "0: The dual edge captures are inactive."]
            _0 = 0,
            #[doc = "1: The dual edge captures are active."]
            _1 = 1,
        }
        impl From<DECAP2_A> for bool {
            #[inline(always)]
            fn from(variant: DECAP2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DECAP2`"]
        pub type DECAP2_R = crate::R<bool, DECAP2_A>;
        impl DECAP2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DECAP2_A {
                match self.bits {
                    false => DECAP2_A::_0,
                    true => DECAP2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DECAP2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DECAP2_A::_1
            }
        }
        #[doc = "Write proxy for field `DECAP2`"]
        pub struct DECAP2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DECAP2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DECAP2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The dual edge captures are inactive."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DECAP2_A::_0)
            }
            #[doc = "The dual edge captures are active."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DECAP2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Deadtime Enable For n = 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DTEN2_A {
            #[doc = "0: The deadtime insertion in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The deadtime insertion in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<DTEN2_A> for bool {
            #[inline(always)]
            fn from(variant: DTEN2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DTEN2`"]
        pub type DTEN2_R = crate::R<bool, DTEN2_A>;
        impl DTEN2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DTEN2_A {
                match self.bits {
                    false => DTEN2_A::_0,
                    true => DTEN2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DTEN2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DTEN2_A::_1
            }
        }
        #[doc = "Write proxy for field `DTEN2`"]
        pub struct DTEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTEN2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DTEN2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The deadtime insertion in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DTEN2_A::_0)
            }
            #[doc = "The deadtime insertion in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DTEN2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Synchronization Enable For n = 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SYNCEN2_A {
            #[doc = "0: The PWM synchronization in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The PWM synchronization in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<SYNCEN2_A> for bool {
            #[inline(always)]
            fn from(variant: SYNCEN2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SYNCEN2`"]
        pub type SYNCEN2_R = crate::R<bool, SYNCEN2_A>;
        impl SYNCEN2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SYNCEN2_A {
                match self.bits {
                    false => SYNCEN2_A::_0,
                    true => SYNCEN2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SYNCEN2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SYNCEN2_A::_1
            }
        }
        #[doc = "Write proxy for field `SYNCEN2`"]
        pub struct SYNCEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNCEN2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SYNCEN2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The PWM synchronization in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SYNCEN2_A::_0)
            }
            #[doc = "The PWM synchronization in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SYNCEN2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Fault Control Enable For n = 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTEN2_A {
            #[doc = "0: The fault control in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The fault control in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<FAULTEN2_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTEN2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTEN2`"]
        pub type FAULTEN2_R = crate::R<bool, FAULTEN2_A>;
        impl FAULTEN2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTEN2_A {
                match self.bits {
                    false => FAULTEN2_A::_0,
                    true => FAULTEN2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTEN2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTEN2_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTEN2`"]
        pub struct FAULTEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTEN2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTEN2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The fault control in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTEN2_A::_0)
            }
            #[doc = "The fault control in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTEN2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Combine Channels For n = 6\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMBINE3_A {
            #[doc = "0: Channels (n) and (n+1) are independent."]
            _0 = 0,
            #[doc = "1: Channels (n) and (n+1) are combined."]
            _1 = 1,
        }
        impl From<COMBINE3_A> for bool {
            #[inline(always)]
            fn from(variant: COMBINE3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMBINE3`"]
        pub type COMBINE3_R = crate::R<bool, COMBINE3_A>;
        impl COMBINE3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMBINE3_A {
                match self.bits {
                    false => COMBINE3_A::_0,
                    true => COMBINE3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COMBINE3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COMBINE3_A::_1
            }
        }
        #[doc = "Write proxy for field `COMBINE3`"]
        pub struct COMBINE3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMBINE3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMBINE3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channels (n) and (n+1) are independent."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(COMBINE3_A::_0)
            }
            #[doc = "Channels (n) and (n+1) are combined."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(COMBINE3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Complement Of Channel (n) for n = 6\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMP3_A {
            #[doc = "0: The channel (n+1) output is the same as the channel (n) output."]
            _0 = 0,
            #[doc = "1: The channel (n+1) output is the complement of the channel (n) output."]
            _1 = 1,
        }
        impl From<COMP3_A> for bool {
            #[inline(always)]
            fn from(variant: COMP3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMP3`"]
        pub type COMP3_R = crate::R<bool, COMP3_A>;
        impl COMP3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMP3_A {
                match self.bits {
                    false => COMP3_A::_0,
                    true => COMP3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COMP3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COMP3_A::_1
            }
        }
        #[doc = "Write proxy for field `COMP3`"]
        pub struct COMP3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMP3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMP3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel (n+1) output is the same as the channel (n) output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(COMP3_A::_0)
            }
            #[doc = "The channel (n+1) output is the complement of the channel (n) output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(COMP3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Dual Edge Capture Mode Enable For n = 6\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DECAPEN3_A {
            #[doc = "0: The Dual Edge Capture mode in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The Dual Edge Capture mode in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<DECAPEN3_A> for bool {
            #[inline(always)]
            fn from(variant: DECAPEN3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DECAPEN3`"]
        pub type DECAPEN3_R = crate::R<bool, DECAPEN3_A>;
        impl DECAPEN3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DECAPEN3_A {
                match self.bits {
                    false => DECAPEN3_A::_0,
                    true => DECAPEN3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DECAPEN3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DECAPEN3_A::_1
            }
        }
        #[doc = "Write proxy for field `DECAPEN3`"]
        pub struct DECAPEN3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DECAPEN3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DECAPEN3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The Dual Edge Capture mode in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DECAPEN3_A::_0)
            }
            #[doc = "The Dual Edge Capture mode in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DECAPEN3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Dual Edge Capture Mode Captures For n = 6\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DECAP3_A {
            #[doc = "0: The dual edge captures are inactive."]
            _0 = 0,
            #[doc = "1: The dual edge captures are active."]
            _1 = 1,
        }
        impl From<DECAP3_A> for bool {
            #[inline(always)]
            fn from(variant: DECAP3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DECAP3`"]
        pub type DECAP3_R = crate::R<bool, DECAP3_A>;
        impl DECAP3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DECAP3_A {
                match self.bits {
                    false => DECAP3_A::_0,
                    true => DECAP3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DECAP3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DECAP3_A::_1
            }
        }
        #[doc = "Write proxy for field `DECAP3`"]
        pub struct DECAP3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DECAP3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DECAP3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The dual edge captures are inactive."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DECAP3_A::_0)
            }
            #[doc = "The dual edge captures are active."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DECAP3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Deadtime Enable For n = 6\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DTEN3_A {
            #[doc = "0: The deadtime insertion in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The deadtime insertion in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<DTEN3_A> for bool {
            #[inline(always)]
            fn from(variant: DTEN3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DTEN3`"]
        pub type DTEN3_R = crate::R<bool, DTEN3_A>;
        impl DTEN3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DTEN3_A {
                match self.bits {
                    false => DTEN3_A::_0,
                    true => DTEN3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DTEN3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DTEN3_A::_1
            }
        }
        #[doc = "Write proxy for field `DTEN3`"]
        pub struct DTEN3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTEN3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DTEN3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The deadtime insertion in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DTEN3_A::_0)
            }
            #[doc = "The deadtime insertion in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DTEN3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Synchronization Enable For n = 6\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SYNCEN3_A {
            #[doc = "0: The PWM synchronization in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The PWM synchronization in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<SYNCEN3_A> for bool {
            #[inline(always)]
            fn from(variant: SYNCEN3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SYNCEN3`"]
        pub type SYNCEN3_R = crate::R<bool, SYNCEN3_A>;
        impl SYNCEN3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SYNCEN3_A {
                match self.bits {
                    false => SYNCEN3_A::_0,
                    true => SYNCEN3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SYNCEN3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SYNCEN3_A::_1
            }
        }
        #[doc = "Write proxy for field `SYNCEN3`"]
        pub struct SYNCEN3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNCEN3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SYNCEN3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The PWM synchronization in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SYNCEN3_A::_0)
            }
            #[doc = "The PWM synchronization in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SYNCEN3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Fault Control Enable For n = 6\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTEN3_A {
            #[doc = "0: The fault control in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The fault control in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<FAULTEN3_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTEN3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTEN3`"]
        pub type FAULTEN3_R = crate::R<bool, FAULTEN3_A>;
        impl FAULTEN3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTEN3_A {
                match self.bits {
                    false => FAULTEN3_A::_0,
                    true => FAULTEN3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTEN3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTEN3_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTEN3`"]
        pub struct FAULTEN3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTEN3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTEN3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The fault control in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTEN3_A::_0)
            }
            #[doc = "The fault control in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTEN3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Combine Channels For n = 0"]
            #[inline(always)]
            pub fn combine0(&self) -> COMBINE0_R {
                COMBINE0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Complement Of Channel (n) For n = 0"]
            #[inline(always)]
            pub fn comp0(&self) -> COMP0_R {
                COMP0_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Dual Edge Capture Mode Enable For n = 0"]
            #[inline(always)]
            pub fn decapen0(&self) -> DECAPEN0_R {
                DECAPEN0_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Dual Edge Capture Mode Captures For n = 0"]
            #[inline(always)]
            pub fn decap0(&self) -> DECAP0_R {
                DECAP0_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Deadtime Enable For n = 0"]
            #[inline(always)]
            pub fn dten0(&self) -> DTEN0_R {
                DTEN0_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Synchronization Enable For n = 0"]
            #[inline(always)]
            pub fn syncen0(&self) -> SYNCEN0_R {
                SYNCEN0_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Fault Control Enable For n = 0"]
            #[inline(always)]
            pub fn faulten0(&self) -> FAULTEN0_R {
                FAULTEN0_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Combine Channels For n = 2"]
            #[inline(always)]
            pub fn combine1(&self) -> COMBINE1_R {
                COMBINE1_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Complement Of Channel (n) For n = 2"]
            #[inline(always)]
            pub fn comp1(&self) -> COMP1_R {
                COMP1_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Dual Edge Capture Mode Enable For n = 2"]
            #[inline(always)]
            pub fn decapen1(&self) -> DECAPEN1_R {
                DECAPEN1_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Dual Edge Capture Mode Captures For n = 2"]
            #[inline(always)]
            pub fn decap1(&self) -> DECAP1_R {
                DECAP1_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Deadtime Enable For n = 2"]
            #[inline(always)]
            pub fn dten1(&self) -> DTEN1_R {
                DTEN1_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Synchronization Enable For n = 2"]
            #[inline(always)]
            pub fn syncen1(&self) -> SYNCEN1_R {
                SYNCEN1_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Fault Control Enable For n = 2"]
            #[inline(always)]
            pub fn faulten1(&self) -> FAULTEN1_R {
                FAULTEN1_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Combine Channels For n = 4"]
            #[inline(always)]
            pub fn combine2(&self) -> COMBINE2_R {
                COMBINE2_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Complement Of Channel (n) For n = 4"]
            #[inline(always)]
            pub fn comp2(&self) -> COMP2_R {
                COMP2_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Dual Edge Capture Mode Enable For n = 4"]
            #[inline(always)]
            pub fn decapen2(&self) -> DECAPEN2_R {
                DECAPEN2_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Dual Edge Capture Mode Captures For n = 4"]
            #[inline(always)]
            pub fn decap2(&self) -> DECAP2_R {
                DECAP2_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Deadtime Enable For n = 4"]
            #[inline(always)]
            pub fn dten2(&self) -> DTEN2_R {
                DTEN2_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Synchronization Enable For n = 4"]
            #[inline(always)]
            pub fn syncen2(&self) -> SYNCEN2_R {
                SYNCEN2_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Fault Control Enable For n = 4"]
            #[inline(always)]
            pub fn faulten2(&self) -> FAULTEN2_R {
                FAULTEN2_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Combine Channels For n = 6"]
            #[inline(always)]
            pub fn combine3(&self) -> COMBINE3_R {
                COMBINE3_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Complement Of Channel (n) for n = 6"]
            #[inline(always)]
            pub fn comp3(&self) -> COMP3_R {
                COMP3_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Dual Edge Capture Mode Enable For n = 6"]
            #[inline(always)]
            pub fn decapen3(&self) -> DECAPEN3_R {
                DECAPEN3_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Dual Edge Capture Mode Captures For n = 6"]
            #[inline(always)]
            pub fn decap3(&self) -> DECAP3_R {
                DECAP3_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Deadtime Enable For n = 6"]
            #[inline(always)]
            pub fn dten3(&self) -> DTEN3_R {
                DTEN3_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Synchronization Enable For n = 6"]
            #[inline(always)]
            pub fn syncen3(&self) -> SYNCEN3_R {
                SYNCEN3_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Fault Control Enable For n = 6"]
            #[inline(always)]
            pub fn faulten3(&self) -> FAULTEN3_R {
                FAULTEN3_R::new(((self.bits >> 30) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Combine Channels For n = 0"]
            #[inline(always)]
            pub fn combine0(&mut self) -> COMBINE0_W {
                COMBINE0_W { w: self }
            }
            #[doc = "Bit 1 - Complement Of Channel (n) For n = 0"]
            #[inline(always)]
            pub fn comp0(&mut self) -> COMP0_W {
                COMP0_W { w: self }
            }
            #[doc = "Bit 2 - Dual Edge Capture Mode Enable For n = 0"]
            #[inline(always)]
            pub fn decapen0(&mut self) -> DECAPEN0_W {
                DECAPEN0_W { w: self }
            }
            #[doc = "Bit 3 - Dual Edge Capture Mode Captures For n = 0"]
            #[inline(always)]
            pub fn decap0(&mut self) -> DECAP0_W {
                DECAP0_W { w: self }
            }
            #[doc = "Bit 4 - Deadtime Enable For n = 0"]
            #[inline(always)]
            pub fn dten0(&mut self) -> DTEN0_W {
                DTEN0_W { w: self }
            }
            #[doc = "Bit 5 - Synchronization Enable For n = 0"]
            #[inline(always)]
            pub fn syncen0(&mut self) -> SYNCEN0_W {
                SYNCEN0_W { w: self }
            }
            #[doc = "Bit 6 - Fault Control Enable For n = 0"]
            #[inline(always)]
            pub fn faulten0(&mut self) -> FAULTEN0_W {
                FAULTEN0_W { w: self }
            }
            #[doc = "Bit 8 - Combine Channels For n = 2"]
            #[inline(always)]
            pub fn combine1(&mut self) -> COMBINE1_W {
                COMBINE1_W { w: self }
            }
            #[doc = "Bit 9 - Complement Of Channel (n) For n = 2"]
            #[inline(always)]
            pub fn comp1(&mut self) -> COMP1_W {
                COMP1_W { w: self }
            }
            #[doc = "Bit 10 - Dual Edge Capture Mode Enable For n = 2"]
            #[inline(always)]
            pub fn decapen1(&mut self) -> DECAPEN1_W {
                DECAPEN1_W { w: self }
            }
            #[doc = "Bit 11 - Dual Edge Capture Mode Captures For n = 2"]
            #[inline(always)]
            pub fn decap1(&mut self) -> DECAP1_W {
                DECAP1_W { w: self }
            }
            #[doc = "Bit 12 - Deadtime Enable For n = 2"]
            #[inline(always)]
            pub fn dten1(&mut self) -> DTEN1_W {
                DTEN1_W { w: self }
            }
            #[doc = "Bit 13 - Synchronization Enable For n = 2"]
            #[inline(always)]
            pub fn syncen1(&mut self) -> SYNCEN1_W {
                SYNCEN1_W { w: self }
            }
            #[doc = "Bit 14 - Fault Control Enable For n = 2"]
            #[inline(always)]
            pub fn faulten1(&mut self) -> FAULTEN1_W {
                FAULTEN1_W { w: self }
            }
            #[doc = "Bit 16 - Combine Channels For n = 4"]
            #[inline(always)]
            pub fn combine2(&mut self) -> COMBINE2_W {
                COMBINE2_W { w: self }
            }
            #[doc = "Bit 17 - Complement Of Channel (n) For n = 4"]
            #[inline(always)]
            pub fn comp2(&mut self) -> COMP2_W {
                COMP2_W { w: self }
            }
            #[doc = "Bit 18 - Dual Edge Capture Mode Enable For n = 4"]
            #[inline(always)]
            pub fn decapen2(&mut self) -> DECAPEN2_W {
                DECAPEN2_W { w: self }
            }
            #[doc = "Bit 19 - Dual Edge Capture Mode Captures For n = 4"]
            #[inline(always)]
            pub fn decap2(&mut self) -> DECAP2_W {
                DECAP2_W { w: self }
            }
            #[doc = "Bit 20 - Deadtime Enable For n = 4"]
            #[inline(always)]
            pub fn dten2(&mut self) -> DTEN2_W {
                DTEN2_W { w: self }
            }
            #[doc = "Bit 21 - Synchronization Enable For n = 4"]
            #[inline(always)]
            pub fn syncen2(&mut self) -> SYNCEN2_W {
                SYNCEN2_W { w: self }
            }
            #[doc = "Bit 22 - Fault Control Enable For n = 4"]
            #[inline(always)]
            pub fn faulten2(&mut self) -> FAULTEN2_W {
                FAULTEN2_W { w: self }
            }
            #[doc = "Bit 24 - Combine Channels For n = 6"]
            #[inline(always)]
            pub fn combine3(&mut self) -> COMBINE3_W {
                COMBINE3_W { w: self }
            }
            #[doc = "Bit 25 - Complement Of Channel (n) for n = 6"]
            #[inline(always)]
            pub fn comp3(&mut self) -> COMP3_W {
                COMP3_W { w: self }
            }
            #[doc = "Bit 26 - Dual Edge Capture Mode Enable For n = 6"]
            #[inline(always)]
            pub fn decapen3(&mut self) -> DECAPEN3_W {
                DECAPEN3_W { w: self }
            }
            #[doc = "Bit 27 - Dual Edge Capture Mode Captures For n = 6"]
            #[inline(always)]
            pub fn decap3(&mut self) -> DECAP3_W {
                DECAP3_W { w: self }
            }
            #[doc = "Bit 28 - Deadtime Enable For n = 6"]
            #[inline(always)]
            pub fn dten3(&mut self) -> DTEN3_W {
                DTEN3_W { w: self }
            }
            #[doc = "Bit 29 - Synchronization Enable For n = 6"]
            #[inline(always)]
            pub fn syncen3(&mut self) -> SYNCEN3_W {
                SYNCEN3_W { w: self }
            }
            #[doc = "Bit 30 - Fault Control Enable For n = 6"]
            #[inline(always)]
            pub fn faulten3(&mut self) -> FAULTEN3_W {
                FAULTEN3_W { w: self }
            }
        }
    }
    #[doc = "Deadtime Insertion Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [deadtime](deadtime) module"]
    pub type DEADTIME = crate::Reg<u32, _DEADTIME>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DEADTIME;
    #[doc = "`read()` method returns [deadtime::R](deadtime::R) reader structure"]
    impl crate::Readable for DEADTIME {}
    #[doc = "`write(|w| ..)` method takes [deadtime::W](deadtime::W) writer structure"]
    impl crate::Writable for DEADTIME {}
    #[doc = "Deadtime Insertion Control"]
    pub mod deadtime {
        #[doc = "Reader of register DEADTIME"]
        pub type R = crate::R<u32, super::DEADTIME>;
        #[doc = "Writer for register DEADTIME"]
        pub type W = crate::W<u32, super::DEADTIME>;
        #[doc = "Register DEADTIME `reset()`'s with value 0"]
        impl crate::ResetValue for super::DEADTIME {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DTVAL`"]
        pub type DTVAL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DTVAL`"]
        pub struct DTVAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTVAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        #[doc = "Deadtime Prescaler Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum DTPS_A {
            #[doc = "2: Divide the system clock by 4."]
            _10 = 2,
            #[doc = "3: Divide the system clock by 16."]
            _11 = 3,
        }
        impl From<DTPS_A> for u8 {
            #[inline(always)]
            fn from(variant: DTPS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `DTPS`"]
        pub type DTPS_R = crate::R<u8, DTPS_A>;
        impl DTPS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, DTPS_A> {
                use crate::Variant::*;
                match self.bits {
                    2 => Val(DTPS_A::_10),
                    3 => Val(DTPS_A::_11),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == DTPS_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == DTPS_A::_11
            }
        }
        #[doc = "Write proxy for field `DTPS`"]
        pub struct DTPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTPS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DTPS_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Divide the system clock by 4."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(DTPS_A::_10)
            }
            #[doc = "Divide the system clock by 16."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(DTPS_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - Deadtime Value"]
            #[inline(always)]
            pub fn dtval(&self) -> DTVAL_R {
                DTVAL_R::new((self.bits & 0x3f) as u8)
            }
            #[doc = "Bits 6:7 - Deadtime Prescaler Value"]
            #[inline(always)]
            pub fn dtps(&self) -> DTPS_R {
                DTPS_R::new(((self.bits >> 6) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - Deadtime Value"]
            #[inline(always)]
            pub fn dtval(&mut self) -> DTVAL_W {
                DTVAL_W { w: self }
            }
            #[doc = "Bits 6:7 - Deadtime Prescaler Value"]
            #[inline(always)]
            pub fn dtps(&mut self) -> DTPS_W {
                DTPS_W { w: self }
            }
        }
    }
    #[doc = "FTM External Trigger\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exttrig](exttrig) module"]
    pub type EXTTRIG = crate::Reg<u32, _EXTTRIG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EXTTRIG;
    #[doc = "`read()` method returns [exttrig::R](exttrig::R) reader structure"]
    impl crate::Readable for EXTTRIG {}
    #[doc = "`write(|w| ..)` method takes [exttrig::W](exttrig::W) writer structure"]
    impl crate::Writable for EXTTRIG {}
    #[doc = "FTM External Trigger"]
    pub mod exttrig {
        #[doc = "Reader of register EXTTRIG"]
        pub type R = crate::R<u32, super::EXTTRIG>;
        #[doc = "Writer for register EXTTRIG"]
        pub type W = crate::W<u32, super::EXTTRIG>;
        #[doc = "Register EXTTRIG `reset()`'s with value 0"]
        impl crate::ResetValue for super::EXTTRIG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Channel 2 Trigger Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH2TRIG_A {
            #[doc = "0: The generation of the channel trigger is disabled."]
            _0 = 0,
            #[doc = "1: The generation of the channel trigger is enabled."]
            _1 = 1,
        }
        impl From<CH2TRIG_A> for bool {
            #[inline(always)]
            fn from(variant: CH2TRIG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH2TRIG`"]
        pub type CH2TRIG_R = crate::R<bool, CH2TRIG_A>;
        impl CH2TRIG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH2TRIG_A {
                match self.bits {
                    false => CH2TRIG_A::_0,
                    true => CH2TRIG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH2TRIG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH2TRIG_A::_1
            }
        }
        #[doc = "Write proxy for field `CH2TRIG`"]
        pub struct CH2TRIG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2TRIG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH2TRIG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The generation of the channel trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH2TRIG_A::_0)
            }
            #[doc = "The generation of the channel trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH2TRIG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Channel 3 Trigger Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH3TRIG_A {
            #[doc = "0: The generation of the channel trigger is disabled."]
            _0 = 0,
            #[doc = "1: The generation of the channel trigger is enabled."]
            _1 = 1,
        }
        impl From<CH3TRIG_A> for bool {
            #[inline(always)]
            fn from(variant: CH3TRIG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH3TRIG`"]
        pub type CH3TRIG_R = crate::R<bool, CH3TRIG_A>;
        impl CH3TRIG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH3TRIG_A {
                match self.bits {
                    false => CH3TRIG_A::_0,
                    true => CH3TRIG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH3TRIG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH3TRIG_A::_1
            }
        }
        #[doc = "Write proxy for field `CH3TRIG`"]
        pub struct CH3TRIG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3TRIG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH3TRIG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The generation of the channel trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH3TRIG_A::_0)
            }
            #[doc = "The generation of the channel trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH3TRIG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Channel 4 Trigger Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH4TRIG_A {
            #[doc = "0: The generation of the channel trigger is disabled."]
            _0 = 0,
            #[doc = "1: The generation of the channel trigger is enabled."]
            _1 = 1,
        }
        impl From<CH4TRIG_A> for bool {
            #[inline(always)]
            fn from(variant: CH4TRIG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH4TRIG`"]
        pub type CH4TRIG_R = crate::R<bool, CH4TRIG_A>;
        impl CH4TRIG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH4TRIG_A {
                match self.bits {
                    false => CH4TRIG_A::_0,
                    true => CH4TRIG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH4TRIG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH4TRIG_A::_1
            }
        }
        #[doc = "Write proxy for field `CH4TRIG`"]
        pub struct CH4TRIG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH4TRIG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH4TRIG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The generation of the channel trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH4TRIG_A::_0)
            }
            #[doc = "The generation of the channel trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH4TRIG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel 5 Trigger Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH5TRIG_A {
            #[doc = "0: The generation of the channel trigger is disabled."]
            _0 = 0,
            #[doc = "1: The generation of the channel trigger is enabled."]
            _1 = 1,
        }
        impl From<CH5TRIG_A> for bool {
            #[inline(always)]
            fn from(variant: CH5TRIG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH5TRIG`"]
        pub type CH5TRIG_R = crate::R<bool, CH5TRIG_A>;
        impl CH5TRIG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH5TRIG_A {
                match self.bits {
                    false => CH5TRIG_A::_0,
                    true => CH5TRIG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH5TRIG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH5TRIG_A::_1
            }
        }
        #[doc = "Write proxy for field `CH5TRIG`"]
        pub struct CH5TRIG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH5TRIG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH5TRIG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The generation of the channel trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH5TRIG_A::_0)
            }
            #[doc = "The generation of the channel trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH5TRIG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Channel 0 Trigger Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH0TRIG_A {
            #[doc = "0: The generation of the channel trigger is disabled."]
            _0 = 0,
            #[doc = "1: The generation of the channel trigger is enabled."]
            _1 = 1,
        }
        impl From<CH0TRIG_A> for bool {
            #[inline(always)]
            fn from(variant: CH0TRIG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH0TRIG`"]
        pub type CH0TRIG_R = crate::R<bool, CH0TRIG_A>;
        impl CH0TRIG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH0TRIG_A {
                match self.bits {
                    false => CH0TRIG_A::_0,
                    true => CH0TRIG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH0TRIG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH0TRIG_A::_1
            }
        }
        #[doc = "Write proxy for field `CH0TRIG`"]
        pub struct CH0TRIG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0TRIG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH0TRIG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The generation of the channel trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH0TRIG_A::_0)
            }
            #[doc = "The generation of the channel trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH0TRIG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Channel 1 Trigger Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH1TRIG_A {
            #[doc = "0: The generation of the channel trigger is disabled."]
            _0 = 0,
            #[doc = "1: The generation of the channel trigger is enabled."]
            _1 = 1,
        }
        impl From<CH1TRIG_A> for bool {
            #[inline(always)]
            fn from(variant: CH1TRIG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH1TRIG`"]
        pub type CH1TRIG_R = crate::R<bool, CH1TRIG_A>;
        impl CH1TRIG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH1TRIG_A {
                match self.bits {
                    false => CH1TRIG_A::_0,
                    true => CH1TRIG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH1TRIG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH1TRIG_A::_1
            }
        }
        #[doc = "Write proxy for field `CH1TRIG`"]
        pub struct CH1TRIG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1TRIG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH1TRIG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The generation of the channel trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH1TRIG_A::_0)
            }
            #[doc = "The generation of the channel trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH1TRIG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Initialization Trigger Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum INITTRIGEN_A {
            #[doc = "0: The generation of initialization trigger is disabled."]
            _0 = 0,
            #[doc = "1: The generation of initialization trigger is enabled."]
            _1 = 1,
        }
        impl From<INITTRIGEN_A> for bool {
            #[inline(always)]
            fn from(variant: INITTRIGEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `INITTRIGEN`"]
        pub type INITTRIGEN_R = crate::R<bool, INITTRIGEN_A>;
        impl INITTRIGEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> INITTRIGEN_A {
                match self.bits {
                    false => INITTRIGEN_A::_0,
                    true => INITTRIGEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == INITTRIGEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == INITTRIGEN_A::_1
            }
        }
        #[doc = "Write proxy for field `INITTRIGEN`"]
        pub struct INITTRIGEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INITTRIGEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: INITTRIGEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The generation of initialization trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(INITTRIGEN_A::_0)
            }
            #[doc = "The generation of initialization trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(INITTRIGEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel Trigger Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TRIGF_A {
            #[doc = "0: No channel trigger was generated."]
            _0 = 0,
            #[doc = "1: A channel trigger was generated."]
            _1 = 1,
        }
        impl From<TRIGF_A> for bool {
            #[inline(always)]
            fn from(variant: TRIGF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TRIGF`"]
        pub type TRIGF_R = crate::R<bool, TRIGF_A>;
        impl TRIGF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TRIGF_A {
                match self.bits {
                    false => TRIGF_A::_0,
                    true => TRIGF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TRIGF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TRIGF_A::_1
            }
        }
        #[doc = "Write proxy for field `TRIGF`"]
        pub struct TRIGF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIGF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TRIGF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel trigger was generated."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TRIGF_A::_0)
            }
            #[doc = "A channel trigger was generated."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TRIGF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel 2 Trigger Enable"]
            #[inline(always)]
            pub fn ch2trig(&self) -> CH2TRIG_R {
                CH2TRIG_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 3 Trigger Enable"]
            #[inline(always)]
            pub fn ch3trig(&self) -> CH3TRIG_R {
                CH3TRIG_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel 4 Trigger Enable"]
            #[inline(always)]
            pub fn ch4trig(&self) -> CH4TRIG_R {
                CH4TRIG_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel 5 Trigger Enable"]
            #[inline(always)]
            pub fn ch5trig(&self) -> CH5TRIG_R {
                CH5TRIG_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 0 Trigger Enable"]
            #[inline(always)]
            pub fn ch0trig(&self) -> CH0TRIG_R {
                CH0TRIG_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 1 Trigger Enable"]
            #[inline(always)]
            pub fn ch1trig(&self) -> CH1TRIG_R {
                CH1TRIG_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Initialization Trigger Enable"]
            #[inline(always)]
            pub fn inittrigen(&self) -> INITTRIGEN_R {
                INITTRIGEN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel Trigger Flag"]
            #[inline(always)]
            pub fn trigf(&self) -> TRIGF_R {
                TRIGF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 2 Trigger Enable"]
            #[inline(always)]
            pub fn ch2trig(&mut self) -> CH2TRIG_W {
                CH2TRIG_W { w: self }
            }
            #[doc = "Bit 1 - Channel 3 Trigger Enable"]
            #[inline(always)]
            pub fn ch3trig(&mut self) -> CH3TRIG_W {
                CH3TRIG_W { w: self }
            }
            #[doc = "Bit 2 - Channel 4 Trigger Enable"]
            #[inline(always)]
            pub fn ch4trig(&mut self) -> CH4TRIG_W {
                CH4TRIG_W { w: self }
            }
            #[doc = "Bit 3 - Channel 5 Trigger Enable"]
            #[inline(always)]
            pub fn ch5trig(&mut self) -> CH5TRIG_W {
                CH5TRIG_W { w: self }
            }
            #[doc = "Bit 4 - Channel 0 Trigger Enable"]
            #[inline(always)]
            pub fn ch0trig(&mut self) -> CH0TRIG_W {
                CH0TRIG_W { w: self }
            }
            #[doc = "Bit 5 - Channel 1 Trigger Enable"]
            #[inline(always)]
            pub fn ch1trig(&mut self) -> CH1TRIG_W {
                CH1TRIG_W { w: self }
            }
            #[doc = "Bit 6 - Initialization Trigger Enable"]
            #[inline(always)]
            pub fn inittrigen(&mut self) -> INITTRIGEN_W {
                INITTRIGEN_W { w: self }
            }
            #[doc = "Bit 7 - Channel Trigger Flag"]
            #[inline(always)]
            pub fn trigf(&mut self) -> TRIGF_W {
                TRIGF_W { w: self }
            }
        }
    }
    #[doc = "Channels Polarity\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pol](pol) module"]
    pub type POL = crate::Reg<u32, _POL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _POL;
    #[doc = "`read()` method returns [pol::R](pol::R) reader structure"]
    impl crate::Readable for POL {}
    #[doc = "`write(|w| ..)` method takes [pol::W](pol::W) writer structure"]
    impl crate::Writable for POL {}
    #[doc = "Channels Polarity"]
    pub mod pol {
        #[doc = "Reader of register POL"]
        pub type R = crate::R<u32, super::POL>;
        #[doc = "Writer for register POL"]
        pub type W = crate::W<u32, super::POL>;
        #[doc = "Register POL `reset()`'s with value 0"]
        impl crate::ResetValue for super::POL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Channel 0 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POL0_A {
            #[doc = "0: The channel polarity is active high."]
            _0 = 0,
            #[doc = "1: The channel polarity is active low."]
            _1 = 1,
        }
        impl From<POL0_A> for bool {
            #[inline(always)]
            fn from(variant: POL0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POL0`"]
        pub type POL0_R = crate::R<bool, POL0_A>;
        impl POL0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POL0_A {
                match self.bits {
                    false => POL0_A::_0,
                    true => POL0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POL0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POL0_A::_1
            }
        }
        #[doc = "Write proxy for field `POL0`"]
        pub struct POL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POL0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel polarity is active high."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POL0_A::_0)
            }
            #[doc = "The channel polarity is active low."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POL0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Channel 1 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POL1_A {
            #[doc = "0: The channel polarity is active high."]
            _0 = 0,
            #[doc = "1: The channel polarity is active low."]
            _1 = 1,
        }
        impl From<POL1_A> for bool {
            #[inline(always)]
            fn from(variant: POL1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POL1`"]
        pub type POL1_R = crate::R<bool, POL1_A>;
        impl POL1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POL1_A {
                match self.bits {
                    false => POL1_A::_0,
                    true => POL1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POL1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POL1_A::_1
            }
        }
        #[doc = "Write proxy for field `POL1`"]
        pub struct POL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POL1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel polarity is active high."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POL1_A::_0)
            }
            #[doc = "The channel polarity is active low."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POL1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Channel 2 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POL2_A {
            #[doc = "0: The channel polarity is active high."]
            _0 = 0,
            #[doc = "1: The channel polarity is active low."]
            _1 = 1,
        }
        impl From<POL2_A> for bool {
            #[inline(always)]
            fn from(variant: POL2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POL2`"]
        pub type POL2_R = crate::R<bool, POL2_A>;
        impl POL2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POL2_A {
                match self.bits {
                    false => POL2_A::_0,
                    true => POL2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POL2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POL2_A::_1
            }
        }
        #[doc = "Write proxy for field `POL2`"]
        pub struct POL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POL2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel polarity is active high."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POL2_A::_0)
            }
            #[doc = "The channel polarity is active low."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POL2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel 3 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POL3_A {
            #[doc = "0: The channel polarity is active high."]
            _0 = 0,
            #[doc = "1: The channel polarity is active low."]
            _1 = 1,
        }
        impl From<POL3_A> for bool {
            #[inline(always)]
            fn from(variant: POL3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POL3`"]
        pub type POL3_R = crate::R<bool, POL3_A>;
        impl POL3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POL3_A {
                match self.bits {
                    false => POL3_A::_0,
                    true => POL3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POL3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POL3_A::_1
            }
        }
        #[doc = "Write proxy for field `POL3`"]
        pub struct POL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POL3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel polarity is active high."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POL3_A::_0)
            }
            #[doc = "The channel polarity is active low."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POL3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Channel 4 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POL4_A {
            #[doc = "0: The channel polarity is active high."]
            _0 = 0,
            #[doc = "1: The channel polarity is active low."]
            _1 = 1,
        }
        impl From<POL4_A> for bool {
            #[inline(always)]
            fn from(variant: POL4_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POL4`"]
        pub type POL4_R = crate::R<bool, POL4_A>;
        impl POL4_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POL4_A {
                match self.bits {
                    false => POL4_A::_0,
                    true => POL4_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POL4_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POL4_A::_1
            }
        }
        #[doc = "Write proxy for field `POL4`"]
        pub struct POL4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POL4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel polarity is active high."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POL4_A::_0)
            }
            #[doc = "The channel polarity is active low."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POL4_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Channel 5 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POL5_A {
            #[doc = "0: The channel polarity is active high."]
            _0 = 0,
            #[doc = "1: The channel polarity is active low."]
            _1 = 1,
        }
        impl From<POL5_A> for bool {
            #[inline(always)]
            fn from(variant: POL5_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POL5`"]
        pub type POL5_R = crate::R<bool, POL5_A>;
        impl POL5_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POL5_A {
                match self.bits {
                    false => POL5_A::_0,
                    true => POL5_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POL5_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POL5_A::_1
            }
        }
        #[doc = "Write proxy for field `POL5`"]
        pub struct POL5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POL5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel polarity is active high."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POL5_A::_0)
            }
            #[doc = "The channel polarity is active low."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POL5_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Channel 6 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POL6_A {
            #[doc = "0: The channel polarity is active high."]
            _0 = 0,
            #[doc = "1: The channel polarity is active low."]
            _1 = 1,
        }
        impl From<POL6_A> for bool {
            #[inline(always)]
            fn from(variant: POL6_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POL6`"]
        pub type POL6_R = crate::R<bool, POL6_A>;
        impl POL6_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POL6_A {
                match self.bits {
                    false => POL6_A::_0,
                    true => POL6_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POL6_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POL6_A::_1
            }
        }
        #[doc = "Write proxy for field `POL6`"]
        pub struct POL6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POL6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel polarity is active high."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POL6_A::_0)
            }
            #[doc = "The channel polarity is active low."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POL6_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel 7 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POL7_A {
            #[doc = "0: The channel polarity is active high."]
            _0 = 0,
            #[doc = "1: The channel polarity is active low."]
            _1 = 1,
        }
        impl From<POL7_A> for bool {
            #[inline(always)]
            fn from(variant: POL7_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POL7`"]
        pub type POL7_R = crate::R<bool, POL7_A>;
        impl POL7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POL7_A {
                match self.bits {
                    false => POL7_A::_0,
                    true => POL7_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POL7_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POL7_A::_1
            }
        }
        #[doc = "Write proxy for field `POL7`"]
        pub struct POL7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POL7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel polarity is active high."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POL7_A::_0)
            }
            #[doc = "The channel polarity is active low."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POL7_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel 0 Polarity"]
            #[inline(always)]
            pub fn pol0(&self) -> POL0_R {
                POL0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 1 Polarity"]
            #[inline(always)]
            pub fn pol1(&self) -> POL1_R {
                POL1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel 2 Polarity"]
            #[inline(always)]
            pub fn pol2(&self) -> POL2_R {
                POL2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel 3 Polarity"]
            #[inline(always)]
            pub fn pol3(&self) -> POL3_R {
                POL3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 4 Polarity"]
            #[inline(always)]
            pub fn pol4(&self) -> POL4_R {
                POL4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 5 Polarity"]
            #[inline(always)]
            pub fn pol5(&self) -> POL5_R {
                POL5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel 6 Polarity"]
            #[inline(always)]
            pub fn pol6(&self) -> POL6_R {
                POL6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel 7 Polarity"]
            #[inline(always)]
            pub fn pol7(&self) -> POL7_R {
                POL7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 0 Polarity"]
            #[inline(always)]
            pub fn pol0(&mut self) -> POL0_W {
                POL0_W { w: self }
            }
            #[doc = "Bit 1 - Channel 1 Polarity"]
            #[inline(always)]
            pub fn pol1(&mut self) -> POL1_W {
                POL1_W { w: self }
            }
            #[doc = "Bit 2 - Channel 2 Polarity"]
            #[inline(always)]
            pub fn pol2(&mut self) -> POL2_W {
                POL2_W { w: self }
            }
            #[doc = "Bit 3 - Channel 3 Polarity"]
            #[inline(always)]
            pub fn pol3(&mut self) -> POL3_W {
                POL3_W { w: self }
            }
            #[doc = "Bit 4 - Channel 4 Polarity"]
            #[inline(always)]
            pub fn pol4(&mut self) -> POL4_W {
                POL4_W { w: self }
            }
            #[doc = "Bit 5 - Channel 5 Polarity"]
            #[inline(always)]
            pub fn pol5(&mut self) -> POL5_W {
                POL5_W { w: self }
            }
            #[doc = "Bit 6 - Channel 6 Polarity"]
            #[inline(always)]
            pub fn pol6(&mut self) -> POL6_W {
                POL6_W { w: self }
            }
            #[doc = "Bit 7 - Channel 7 Polarity"]
            #[inline(always)]
            pub fn pol7(&mut self) -> POL7_W {
                POL7_W { w: self }
            }
        }
    }
    #[doc = "Fault Mode Status\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fms](fms) module"]
    pub type FMS = crate::Reg<u32, _FMS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FMS;
    #[doc = "`read()` method returns [fms::R](fms::R) reader structure"]
    impl crate::Readable for FMS {}
    #[doc = "`write(|w| ..)` method takes [fms::W](fms::W) writer structure"]
    impl crate::Writable for FMS {}
    #[doc = "Fault Mode Status"]
    pub mod fms {
        #[doc = "Reader of register FMS"]
        pub type R = crate::R<u32, super::FMS>;
        #[doc = "Writer for register FMS"]
        pub type W = crate::W<u32, super::FMS>;
        #[doc = "Register FMS `reset()`'s with value 0"]
        impl crate::ResetValue for super::FMS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Fault Detection Flag 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTF0_A {
            #[doc = "0: No fault condition was detected at the fault input."]
            _0 = 0,
            #[doc = "1: A fault condition was detected at the fault input."]
            _1 = 1,
        }
        impl From<FAULTF0_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTF0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTF0`"]
        pub type FAULTF0_R = crate::R<bool, FAULTF0_A>;
        impl FAULTF0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTF0_A {
                match self.bits {
                    false => FAULTF0_A::_0,
                    true => FAULTF0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTF0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTF0_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTF0`"]
        pub struct FAULTF0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTF0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTF0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No fault condition was detected at the fault input."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTF0_A::_0)
            }
            #[doc = "A fault condition was detected at the fault input."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTF0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Fault Detection Flag 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTF1_A {
            #[doc = "0: No fault condition was detected at the fault input."]
            _0 = 0,
            #[doc = "1: A fault condition was detected at the fault input."]
            _1 = 1,
        }
        impl From<FAULTF1_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTF1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTF1`"]
        pub type FAULTF1_R = crate::R<bool, FAULTF1_A>;
        impl FAULTF1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTF1_A {
                match self.bits {
                    false => FAULTF1_A::_0,
                    true => FAULTF1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTF1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTF1_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTF1`"]
        pub struct FAULTF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTF1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTF1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No fault condition was detected at the fault input."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTF1_A::_0)
            }
            #[doc = "A fault condition was detected at the fault input."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTF1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Fault Detection Flag 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTF2_A {
            #[doc = "0: No fault condition was detected at the fault input."]
            _0 = 0,
            #[doc = "1: A fault condition was detected at the fault input."]
            _1 = 1,
        }
        impl From<FAULTF2_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTF2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTF2`"]
        pub type FAULTF2_R = crate::R<bool, FAULTF2_A>;
        impl FAULTF2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTF2_A {
                match self.bits {
                    false => FAULTF2_A::_0,
                    true => FAULTF2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTF2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTF2_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTF2`"]
        pub struct FAULTF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTF2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTF2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No fault condition was detected at the fault input."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTF2_A::_0)
            }
            #[doc = "A fault condition was detected at the fault input."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTF2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Fault Detection Flag 3\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTF3_A {
            #[doc = "0: No fault condition was detected at the fault input."]
            _0 = 0,
            #[doc = "1: A fault condition was detected at the fault input."]
            _1 = 1,
        }
        impl From<FAULTF3_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTF3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTF3`"]
        pub type FAULTF3_R = crate::R<bool, FAULTF3_A>;
        impl FAULTF3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTF3_A {
                match self.bits {
                    false => FAULTF3_A::_0,
                    true => FAULTF3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTF3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTF3_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTF3`"]
        pub struct FAULTF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTF3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTF3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No fault condition was detected at the fault input."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTF3_A::_0)
            }
            #[doc = "A fault condition was detected at the fault input."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTF3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Fault Inputs\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTIN_A {
            #[doc = "0: The logic OR of the enabled fault inputs is 0."]
            _0 = 0,
            #[doc = "1: The logic OR of the enabled fault inputs is 1."]
            _1 = 1,
        }
        impl From<FAULTIN_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTIN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTIN`"]
        pub type FAULTIN_R = crate::R<bool, FAULTIN_A>;
        impl FAULTIN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTIN_A {
                match self.bits {
                    false => FAULTIN_A::_0,
                    true => FAULTIN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTIN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTIN_A::_1
            }
        }
        #[doc = "Write Protection Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WPEN_A {
            #[doc = "0: Write protection is disabled. Write protected bits can be written."]
            _0 = 0,
            #[doc = "1: Write protection is enabled. Write protected bits cannot be written."]
            _1 = 1,
        }
        impl From<WPEN_A> for bool {
            #[inline(always)]
            fn from(variant: WPEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WPEN`"]
        pub type WPEN_R = crate::R<bool, WPEN_A>;
        impl WPEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WPEN_A {
                match self.bits {
                    false => WPEN_A::_0,
                    true => WPEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == WPEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == WPEN_A::_1
            }
        }
        #[doc = "Write proxy for field `WPEN`"]
        pub struct WPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WPEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WPEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Write protection is disabled. Write protected bits can be written."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(WPEN_A::_0)
            }
            #[doc = "Write protection is enabled. Write protected bits cannot be written."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(WPEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Fault Detection Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTF_A {
            #[doc = "0: No fault condition was detected."]
            _0 = 0,
            #[doc = "1: A fault condition was detected."]
            _1 = 1,
        }
        impl From<FAULTF_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTF`"]
        pub type FAULTF_R = crate::R<bool, FAULTF_A>;
        impl FAULTF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTF_A {
                match self.bits {
                    false => FAULTF_A::_0,
                    true => FAULTF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTF_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTF`"]
        pub struct FAULTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No fault condition was detected."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTF_A::_0)
            }
            #[doc = "A fault condition was detected."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Fault Detection Flag 0"]
            #[inline(always)]
            pub fn faultf0(&self) -> FAULTF0_R {
                FAULTF0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Fault Detection Flag 1"]
            #[inline(always)]
            pub fn faultf1(&self) -> FAULTF1_R {
                FAULTF1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Fault Detection Flag 2"]
            #[inline(always)]
            pub fn faultf2(&self) -> FAULTF2_R {
                FAULTF2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Fault Detection Flag 3"]
            #[inline(always)]
            pub fn faultf3(&self) -> FAULTF3_R {
                FAULTF3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Fault Inputs"]
            #[inline(always)]
            pub fn faultin(&self) -> FAULTIN_R {
                FAULTIN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Write Protection Enable"]
            #[inline(always)]
            pub fn wpen(&self) -> WPEN_R {
                WPEN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Fault Detection Flag"]
            #[inline(always)]
            pub fn faultf(&self) -> FAULTF_R {
                FAULTF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Fault Detection Flag 0"]
            #[inline(always)]
            pub fn faultf0(&mut self) -> FAULTF0_W {
                FAULTF0_W { w: self }
            }
            #[doc = "Bit 1 - Fault Detection Flag 1"]
            #[inline(always)]
            pub fn faultf1(&mut self) -> FAULTF1_W {
                FAULTF1_W { w: self }
            }
            #[doc = "Bit 2 - Fault Detection Flag 2"]
            #[inline(always)]
            pub fn faultf2(&mut self) -> FAULTF2_W {
                FAULTF2_W { w: self }
            }
            #[doc = "Bit 3 - Fault Detection Flag 3"]
            #[inline(always)]
            pub fn faultf3(&mut self) -> FAULTF3_W {
                FAULTF3_W { w: self }
            }
            #[doc = "Bit 6 - Write Protection Enable"]
            #[inline(always)]
            pub fn wpen(&mut self) -> WPEN_W {
                WPEN_W { w: self }
            }
            #[doc = "Bit 7 - Fault Detection Flag"]
            #[inline(always)]
            pub fn faultf(&mut self) -> FAULTF_W {
                FAULTF_W { w: self }
            }
        }
    }
    #[doc = "Input Capture Filter Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [filter](filter) module"]
    pub type FILTER = crate::Reg<u32, _FILTER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FILTER;
    #[doc = "`read()` method returns [filter::R](filter::R) reader structure"]
    impl crate::Readable for FILTER {}
    #[doc = "`write(|w| ..)` method takes [filter::W](filter::W) writer structure"]
    impl crate::Writable for FILTER {}
    #[doc = "Input Capture Filter Control"]
    pub mod filter {
        #[doc = "Reader of register FILTER"]
        pub type R = crate::R<u32, super::FILTER>;
        #[doc = "Writer for register FILTER"]
        pub type W = crate::W<u32, super::FILTER>;
        #[doc = "Register FILTER `reset()`'s with value 0"]
        impl crate::ResetValue for super::FILTER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CH0FVAL`"]
        pub type CH0FVAL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CH0FVAL`"]
        pub struct CH0FVAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0FVAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Reader of field `CH1FVAL`"]
        pub type CH1FVAL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CH1FVAL`"]
        pub struct CH1FVAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1FVAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CH2FVAL`"]
        pub type CH2FVAL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CH2FVAL`"]
        pub struct CH2FVAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2FVAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CH3FVAL`"]
        pub type CH3FVAL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CH3FVAL`"]
        pub struct CH3FVAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3FVAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Channel 0 Input Filter"]
            #[inline(always)]
            pub fn ch0fval(&self) -> CH0FVAL_R {
                CH0FVAL_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Channel 1 Input Filter"]
            #[inline(always)]
            pub fn ch1fval(&self) -> CH1FVAL_R {
                CH1FVAL_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Channel 2 Input Filter"]
            #[inline(always)]
            pub fn ch2fval(&self) -> CH2FVAL_R {
                CH2FVAL_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - Channel 3 Input Filter"]
            #[inline(always)]
            pub fn ch3fval(&self) -> CH3FVAL_R {
                CH3FVAL_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Channel 0 Input Filter"]
            #[inline(always)]
            pub fn ch0fval(&mut self) -> CH0FVAL_W {
                CH0FVAL_W { w: self }
            }
            #[doc = "Bits 4:7 - Channel 1 Input Filter"]
            #[inline(always)]
            pub fn ch1fval(&mut self) -> CH1FVAL_W {
                CH1FVAL_W { w: self }
            }
            #[doc = "Bits 8:11 - Channel 2 Input Filter"]
            #[inline(always)]
            pub fn ch2fval(&mut self) -> CH2FVAL_W {
                CH2FVAL_W { w: self }
            }
            #[doc = "Bits 12:15 - Channel 3 Input Filter"]
            #[inline(always)]
            pub fn ch3fval(&mut self) -> CH3FVAL_W {
                CH3FVAL_W { w: self }
            }
        }
    }
    #[doc = "Fault Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fltctrl](fltctrl) module"]
    pub type FLTCTRL = crate::Reg<u32, _FLTCTRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLTCTRL;
    #[doc = "`read()` method returns [fltctrl::R](fltctrl::R) reader structure"]
    impl crate::Readable for FLTCTRL {}
    #[doc = "`write(|w| ..)` method takes [fltctrl::W](fltctrl::W) writer structure"]
    impl crate::Writable for FLTCTRL {}
    #[doc = "Fault Control"]
    pub mod fltctrl {
        #[doc = "Reader of register FLTCTRL"]
        pub type R = crate::R<u32, super::FLTCTRL>;
        #[doc = "Writer for register FLTCTRL"]
        pub type W = crate::W<u32, super::FLTCTRL>;
        #[doc = "Register FLTCTRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::FLTCTRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Fault Input 0 Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULT0EN_A {
            #[doc = "0: Fault input is disabled."]
            _0 = 0,
            #[doc = "1: Fault input is enabled."]
            _1 = 1,
        }
        impl From<FAULT0EN_A> for bool {
            #[inline(always)]
            fn from(variant: FAULT0EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULT0EN`"]
        pub type FAULT0EN_R = crate::R<bool, FAULT0EN_A>;
        impl FAULT0EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULT0EN_A {
                match self.bits {
                    false => FAULT0EN_A::_0,
                    true => FAULT0EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULT0EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULT0EN_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULT0EN`"]
        pub struct FAULT0EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULT0EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULT0EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault input is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULT0EN_A::_0)
            }
            #[doc = "Fault input is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULT0EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Fault Input 1 Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULT1EN_A {
            #[doc = "0: Fault input is disabled."]
            _0 = 0,
            #[doc = "1: Fault input is enabled."]
            _1 = 1,
        }
        impl From<FAULT1EN_A> for bool {
            #[inline(always)]
            fn from(variant: FAULT1EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULT1EN`"]
        pub type FAULT1EN_R = crate::R<bool, FAULT1EN_A>;
        impl FAULT1EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULT1EN_A {
                match self.bits {
                    false => FAULT1EN_A::_0,
                    true => FAULT1EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULT1EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULT1EN_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULT1EN`"]
        pub struct FAULT1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULT1EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULT1EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault input is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULT1EN_A::_0)
            }
            #[doc = "Fault input is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULT1EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Fault Input 2 Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULT2EN_A {
            #[doc = "0: Fault input is disabled."]
            _0 = 0,
            #[doc = "1: Fault input is enabled."]
            _1 = 1,
        }
        impl From<FAULT2EN_A> for bool {
            #[inline(always)]
            fn from(variant: FAULT2EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULT2EN`"]
        pub type FAULT2EN_R = crate::R<bool, FAULT2EN_A>;
        impl FAULT2EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULT2EN_A {
                match self.bits {
                    false => FAULT2EN_A::_0,
                    true => FAULT2EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULT2EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULT2EN_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULT2EN`"]
        pub struct FAULT2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULT2EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULT2EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault input is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULT2EN_A::_0)
            }
            #[doc = "Fault input is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULT2EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Fault Input 3 Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULT3EN_A {
            #[doc = "0: Fault input is disabled."]
            _0 = 0,
            #[doc = "1: Fault input is enabled."]
            _1 = 1,
        }
        impl From<FAULT3EN_A> for bool {
            #[inline(always)]
            fn from(variant: FAULT3EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULT3EN`"]
        pub type FAULT3EN_R = crate::R<bool, FAULT3EN_A>;
        impl FAULT3EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULT3EN_A {
                match self.bits {
                    false => FAULT3EN_A::_0,
                    true => FAULT3EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULT3EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULT3EN_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULT3EN`"]
        pub struct FAULT3EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULT3EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULT3EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault input is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULT3EN_A::_0)
            }
            #[doc = "Fault input is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULT3EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Fault Input 0 Filter Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FFLTR0EN_A {
            #[doc = "0: Fault input filter is disabled."]
            _0 = 0,
            #[doc = "1: Fault input filter is enabled."]
            _1 = 1,
        }
        impl From<FFLTR0EN_A> for bool {
            #[inline(always)]
            fn from(variant: FFLTR0EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FFLTR0EN`"]
        pub type FFLTR0EN_R = crate::R<bool, FFLTR0EN_A>;
        impl FFLTR0EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FFLTR0EN_A {
                match self.bits {
                    false => FFLTR0EN_A::_0,
                    true => FFLTR0EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FFLTR0EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FFLTR0EN_A::_1
            }
        }
        #[doc = "Write proxy for field `FFLTR0EN`"]
        pub struct FFLTR0EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FFLTR0EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FFLTR0EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault input filter is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FFLTR0EN_A::_0)
            }
            #[doc = "Fault input filter is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FFLTR0EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Fault Input 1 Filter Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FFLTR1EN_A {
            #[doc = "0: Fault input filter is disabled."]
            _0 = 0,
            #[doc = "1: Fault input filter is enabled."]
            _1 = 1,
        }
        impl From<FFLTR1EN_A> for bool {
            #[inline(always)]
            fn from(variant: FFLTR1EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FFLTR1EN`"]
        pub type FFLTR1EN_R = crate::R<bool, FFLTR1EN_A>;
        impl FFLTR1EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FFLTR1EN_A {
                match self.bits {
                    false => FFLTR1EN_A::_0,
                    true => FFLTR1EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FFLTR1EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FFLTR1EN_A::_1
            }
        }
        #[doc = "Write proxy for field `FFLTR1EN`"]
        pub struct FFLTR1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FFLTR1EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FFLTR1EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault input filter is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FFLTR1EN_A::_0)
            }
            #[doc = "Fault input filter is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FFLTR1EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Fault Input 2 Filter Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FFLTR2EN_A {
            #[doc = "0: Fault input filter is disabled."]
            _0 = 0,
            #[doc = "1: Fault input filter is enabled."]
            _1 = 1,
        }
        impl From<FFLTR2EN_A> for bool {
            #[inline(always)]
            fn from(variant: FFLTR2EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FFLTR2EN`"]
        pub type FFLTR2EN_R = crate::R<bool, FFLTR2EN_A>;
        impl FFLTR2EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FFLTR2EN_A {
                match self.bits {
                    false => FFLTR2EN_A::_0,
                    true => FFLTR2EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FFLTR2EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FFLTR2EN_A::_1
            }
        }
        #[doc = "Write proxy for field `FFLTR2EN`"]
        pub struct FFLTR2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FFLTR2EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FFLTR2EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault input filter is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FFLTR2EN_A::_0)
            }
            #[doc = "Fault input filter is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FFLTR2EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Fault Input 3 Filter Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FFLTR3EN_A {
            #[doc = "0: Fault input filter is disabled."]
            _0 = 0,
            #[doc = "1: Fault input filter is enabled."]
            _1 = 1,
        }
        impl From<FFLTR3EN_A> for bool {
            #[inline(always)]
            fn from(variant: FFLTR3EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FFLTR3EN`"]
        pub type FFLTR3EN_R = crate::R<bool, FFLTR3EN_A>;
        impl FFLTR3EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FFLTR3EN_A {
                match self.bits {
                    false => FFLTR3EN_A::_0,
                    true => FFLTR3EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FFLTR3EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FFLTR3EN_A::_1
            }
        }
        #[doc = "Write proxy for field `FFLTR3EN`"]
        pub struct FFLTR3EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FFLTR3EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FFLTR3EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault input filter is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FFLTR3EN_A::_0)
            }
            #[doc = "Fault input filter is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FFLTR3EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `FFVAL`"]
        pub type FFVAL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `FFVAL`"]
        pub struct FFVAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FFVAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Fault Input 0 Enable"]
            #[inline(always)]
            pub fn fault0en(&self) -> FAULT0EN_R {
                FAULT0EN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Fault Input 1 Enable"]
            #[inline(always)]
            pub fn fault1en(&self) -> FAULT1EN_R {
                FAULT1EN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Fault Input 2 Enable"]
            #[inline(always)]
            pub fn fault2en(&self) -> FAULT2EN_R {
                FAULT2EN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Fault Input 3 Enable"]
            #[inline(always)]
            pub fn fault3en(&self) -> FAULT3EN_R {
                FAULT3EN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Fault Input 0 Filter Enable"]
            #[inline(always)]
            pub fn ffltr0en(&self) -> FFLTR0EN_R {
                FFLTR0EN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Fault Input 1 Filter Enable"]
            #[inline(always)]
            pub fn ffltr1en(&self) -> FFLTR1EN_R {
                FFLTR1EN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Fault Input 2 Filter Enable"]
            #[inline(always)]
            pub fn ffltr2en(&self) -> FFLTR2EN_R {
                FFLTR2EN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Fault Input 3 Filter Enable"]
            #[inline(always)]
            pub fn ffltr3en(&self) -> FFLTR3EN_R {
                FFLTR3EN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:11 - Fault Input Filter"]
            #[inline(always)]
            pub fn ffval(&self) -> FFVAL_R {
                FFVAL_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - Fault Input 0 Enable"]
            #[inline(always)]
            pub fn fault0en(&mut self) -> FAULT0EN_W {
                FAULT0EN_W { w: self }
            }
            #[doc = "Bit 1 - Fault Input 1 Enable"]
            #[inline(always)]
            pub fn fault1en(&mut self) -> FAULT1EN_W {
                FAULT1EN_W { w: self }
            }
            #[doc = "Bit 2 - Fault Input 2 Enable"]
            #[inline(always)]
            pub fn fault2en(&mut self) -> FAULT2EN_W {
                FAULT2EN_W { w: self }
            }
            #[doc = "Bit 3 - Fault Input 3 Enable"]
            #[inline(always)]
            pub fn fault3en(&mut self) -> FAULT3EN_W {
                FAULT3EN_W { w: self }
            }
            #[doc = "Bit 4 - Fault Input 0 Filter Enable"]
            #[inline(always)]
            pub fn ffltr0en(&mut self) -> FFLTR0EN_W {
                FFLTR0EN_W { w: self }
            }
            #[doc = "Bit 5 - Fault Input 1 Filter Enable"]
            #[inline(always)]
            pub fn ffltr1en(&mut self) -> FFLTR1EN_W {
                FFLTR1EN_W { w: self }
            }
            #[doc = "Bit 6 - Fault Input 2 Filter Enable"]
            #[inline(always)]
            pub fn ffltr2en(&mut self) -> FFLTR2EN_W {
                FFLTR2EN_W { w: self }
            }
            #[doc = "Bit 7 - Fault Input 3 Filter Enable"]
            #[inline(always)]
            pub fn ffltr3en(&mut self) -> FFLTR3EN_W {
                FFLTR3EN_W { w: self }
            }
            #[doc = "Bits 8:11 - Fault Input Filter"]
            #[inline(always)]
            pub fn ffval(&mut self) -> FFVAL_W {
                FFVAL_W { w: self }
            }
        }
    }
    #[doc = "Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [conf](conf) module"]
    pub type CONF = crate::Reg<u32, _CONF>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONF;
    #[doc = "`read()` method returns [conf::R](conf::R) reader structure"]
    impl crate::Readable for CONF {}
    #[doc = "`write(|w| ..)` method takes [conf::W](conf::W) writer structure"]
    impl crate::Writable for CONF {}
    #[doc = "Configuration"]
    pub mod conf {
        #[doc = "Reader of register CONF"]
        pub type R = crate::R<u32, super::CONF>;
        #[doc = "Writer for register CONF"]
        pub type W = crate::W<u32, super::CONF>;
        #[doc = "Register CONF `reset()`'s with value 0"]
        impl crate::ResetValue for super::CONF {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `NUMTOF`"]
        pub type NUMTOF_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `NUMTOF`"]
        pub struct NUMTOF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NUMTOF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        #[doc = "Reader of field `BDMMODE`"]
        pub type BDMMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BDMMODE`"]
        pub struct BDMMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BDMMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Global Time Base Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum GTBEEN_A {
            #[doc = "0: Use of an external global time base is disabled."]
            _0 = 0,
            #[doc = "1: Use of an external global time base is enabled."]
            _1 = 1,
        }
        impl From<GTBEEN_A> for bool {
            #[inline(always)]
            fn from(variant: GTBEEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `GTBEEN`"]
        pub type GTBEEN_R = crate::R<bool, GTBEEN_A>;
        impl GTBEEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> GTBEEN_A {
                match self.bits {
                    false => GTBEEN_A::_0,
                    true => GTBEEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == GTBEEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == GTBEEN_A::_1
            }
        }
        #[doc = "Write proxy for field `GTBEEN`"]
        pub struct GTBEEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GTBEEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GTBEEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Use of an external global time base is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(GTBEEN_A::_0)
            }
            #[doc = "Use of an external global time base is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(GTBEEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Global Time Base Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum GTBEOUT_A {
            #[doc = "0: A global time base signal generation is disabled."]
            _0 = 0,
            #[doc = "1: A global time base signal generation is enabled."]
            _1 = 1,
        }
        impl From<GTBEOUT_A> for bool {
            #[inline(always)]
            fn from(variant: GTBEOUT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `GTBEOUT`"]
        pub type GTBEOUT_R = crate::R<bool, GTBEOUT_A>;
        impl GTBEOUT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> GTBEOUT_A {
                match self.bits {
                    false => GTBEOUT_A::_0,
                    true => GTBEOUT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == GTBEOUT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == GTBEOUT_A::_1
            }
        }
        #[doc = "Write proxy for field `GTBEOUT`"]
        pub struct GTBEOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GTBEOUT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GTBEOUT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "A global time base signal generation is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(GTBEOUT_A::_0)
            }
            #[doc = "A global time base signal generation is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(GTBEOUT_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:4 - TOF Frequency"]
            #[inline(always)]
            pub fn numtof(&self) -> NUMTOF_R {
                NUMTOF_R::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bits 6:7 - Debug Mode"]
            #[inline(always)]
            pub fn bdmmode(&self) -> BDMMODE_R {
                BDMMODE_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bit 9 - Global Time Base Enable"]
            #[inline(always)]
            pub fn gtbeen(&self) -> GTBEEN_R {
                GTBEEN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Global Time Base Output"]
            #[inline(always)]
            pub fn gtbeout(&self) -> GTBEOUT_R {
                GTBEOUT_R::new(((self.bits >> 10) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - TOF Frequency"]
            #[inline(always)]
            pub fn numtof(&mut self) -> NUMTOF_W {
                NUMTOF_W { w: self }
            }
            #[doc = "Bits 6:7 - Debug Mode"]
            #[inline(always)]
            pub fn bdmmode(&mut self) -> BDMMODE_W {
                BDMMODE_W { w: self }
            }
            #[doc = "Bit 9 - Global Time Base Enable"]
            #[inline(always)]
            pub fn gtbeen(&mut self) -> GTBEEN_W {
                GTBEEN_W { w: self }
            }
            #[doc = "Bit 10 - Global Time Base Output"]
            #[inline(always)]
            pub fn gtbeout(&mut self) -> GTBEOUT_W {
                GTBEOUT_W { w: self }
            }
        }
    }
    #[doc = "FTM Fault Input Polarity\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fltpol](fltpol) module"]
    pub type FLTPOL = crate::Reg<u32, _FLTPOL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLTPOL;
    #[doc = "`read()` method returns [fltpol::R](fltpol::R) reader structure"]
    impl crate::Readable for FLTPOL {}
    #[doc = "`write(|w| ..)` method takes [fltpol::W](fltpol::W) writer structure"]
    impl crate::Writable for FLTPOL {}
    #[doc = "FTM Fault Input Polarity"]
    pub mod fltpol {
        #[doc = "Reader of register FLTPOL"]
        pub type R = crate::R<u32, super::FLTPOL>;
        #[doc = "Writer for register FLTPOL"]
        pub type W = crate::W<u32, super::FLTPOL>;
        #[doc = "Register FLTPOL `reset()`'s with value 0"]
        impl crate::ResetValue for super::FLTPOL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Fault Input 0 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FLT0POL_A {
            #[doc = "0: The fault input polarity is active high. A 1 at the fault input indicates a fault."]
            _0 = 0,
            #[doc = "1: The fault input polarity is active low. A 0 at the fault input indicates a fault."]
            _1 = 1,
        }
        impl From<FLT0POL_A> for bool {
            #[inline(always)]
            fn from(variant: FLT0POL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FLT0POL`"]
        pub type FLT0POL_R = crate::R<bool, FLT0POL_A>;
        impl FLT0POL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLT0POL_A {
                match self.bits {
                    false => FLT0POL_A::_0,
                    true => FLT0POL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FLT0POL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FLT0POL_A::_1
            }
        }
        #[doc = "Write proxy for field `FLT0POL`"]
        pub struct FLT0POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLT0POL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLT0POL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The fault input polarity is active high. A 1 at the fault input indicates a fault."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FLT0POL_A::_0)
            }
            #[doc = "The fault input polarity is active low. A 0 at the fault input indicates a fault."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FLT0POL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Fault Input 1 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FLT1POL_A {
            #[doc = "0: The fault input polarity is active high. A 1 at the fault input indicates a fault."]
            _0 = 0,
            #[doc = "1: The fault input polarity is active low. A 0 at the fault input indicates a fault."]
            _1 = 1,
        }
        impl From<FLT1POL_A> for bool {
            #[inline(always)]
            fn from(variant: FLT1POL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FLT1POL`"]
        pub type FLT1POL_R = crate::R<bool, FLT1POL_A>;
        impl FLT1POL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLT1POL_A {
                match self.bits {
                    false => FLT1POL_A::_0,
                    true => FLT1POL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FLT1POL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FLT1POL_A::_1
            }
        }
        #[doc = "Write proxy for field `FLT1POL`"]
        pub struct FLT1POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLT1POL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLT1POL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The fault input polarity is active high. A 1 at the fault input indicates a fault."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FLT1POL_A::_0)
            }
            #[doc = "The fault input polarity is active low. A 0 at the fault input indicates a fault."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FLT1POL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Fault Input 2 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FLT2POL_A {
            #[doc = "0: The fault input polarity is active high. A 1 at the fault input indicates a fault."]
            _0 = 0,
            #[doc = "1: The fault input polarity is active low. A 0 at the fault input indicates a fault."]
            _1 = 1,
        }
        impl From<FLT2POL_A> for bool {
            #[inline(always)]
            fn from(variant: FLT2POL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FLT2POL`"]
        pub type FLT2POL_R = crate::R<bool, FLT2POL_A>;
        impl FLT2POL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLT2POL_A {
                match self.bits {
                    false => FLT2POL_A::_0,
                    true => FLT2POL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FLT2POL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FLT2POL_A::_1
            }
        }
        #[doc = "Write proxy for field `FLT2POL`"]
        pub struct FLT2POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLT2POL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLT2POL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The fault input polarity is active high. A 1 at the fault input indicates a fault."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FLT2POL_A::_0)
            }
            #[doc = "The fault input polarity is active low. A 0 at the fault input indicates a fault."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FLT2POL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Fault Input 3 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FLT3POL_A {
            #[doc = "0: The fault input polarity is active high. A 1 at the fault input indicates a fault."]
            _0 = 0,
            #[doc = "1: The fault input polarity is active low. A 0 at the fault input indicates a fault."]
            _1 = 1,
        }
        impl From<FLT3POL_A> for bool {
            #[inline(always)]
            fn from(variant: FLT3POL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FLT3POL`"]
        pub type FLT3POL_R = crate::R<bool, FLT3POL_A>;
        impl FLT3POL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLT3POL_A {
                match self.bits {
                    false => FLT3POL_A::_0,
                    true => FLT3POL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FLT3POL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FLT3POL_A::_1
            }
        }
        #[doc = "Write proxy for field `FLT3POL`"]
        pub struct FLT3POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLT3POL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLT3POL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The fault input polarity is active high. A 1 at the fault input indicates a fault."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FLT3POL_A::_0)
            }
            #[doc = "The fault input polarity is active low. A 0 at the fault input indicates a fault."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FLT3POL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Fault Input 0 Polarity"]
            #[inline(always)]
            pub fn flt0pol(&self) -> FLT0POL_R {
                FLT0POL_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Fault Input 1 Polarity"]
            #[inline(always)]
            pub fn flt1pol(&self) -> FLT1POL_R {
                FLT1POL_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Fault Input 2 Polarity"]
            #[inline(always)]
            pub fn flt2pol(&self) -> FLT2POL_R {
                FLT2POL_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Fault Input 3 Polarity"]
            #[inline(always)]
            pub fn flt3pol(&self) -> FLT3POL_R {
                FLT3POL_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Fault Input 0 Polarity"]
            #[inline(always)]
            pub fn flt0pol(&mut self) -> FLT0POL_W {
                FLT0POL_W { w: self }
            }
            #[doc = "Bit 1 - Fault Input 1 Polarity"]
            #[inline(always)]
            pub fn flt1pol(&mut self) -> FLT1POL_W {
                FLT1POL_W { w: self }
            }
            #[doc = "Bit 2 - Fault Input 2 Polarity"]
            #[inline(always)]
            pub fn flt2pol(&mut self) -> FLT2POL_W {
                FLT2POL_W { w: self }
            }
            #[doc = "Bit 3 - Fault Input 3 Polarity"]
            #[inline(always)]
            pub fn flt3pol(&mut self) -> FLT3POL_W {
                FLT3POL_W { w: self }
            }
        }
    }
    #[doc = "Synchronization Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [synconf](synconf) module"]
    pub type SYNCONF = crate::Reg<u32, _SYNCONF>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SYNCONF;
    #[doc = "`read()` method returns [synconf::R](synconf::R) reader structure"]
    impl crate::Readable for SYNCONF {}
    #[doc = "`write(|w| ..)` method takes [synconf::W](synconf::W) writer structure"]
    impl crate::Writable for SYNCONF {}
    #[doc = "Synchronization Configuration"]
    pub mod synconf {
        #[doc = "Reader of register SYNCONF"]
        pub type R = crate::R<u32, super::SYNCONF>;
        #[doc = "Writer for register SYNCONF"]
        pub type W = crate::W<u32, super::SYNCONF>;
        #[doc = "Register SYNCONF `reset()`'s with value 0"]
        impl crate::ResetValue for super::SYNCONF {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Hardware Trigger Mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HWTRIGMODE_A {
            #[doc = "0: FTM clears the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."]
            _0 = 0,
            #[doc = "1: FTM does not clear the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."]
            _1 = 1,
        }
        impl From<HWTRIGMODE_A> for bool {
            #[inline(always)]
            fn from(variant: HWTRIGMODE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HWTRIGMODE`"]
        pub type HWTRIGMODE_R = crate::R<bool, HWTRIGMODE_A>;
        impl HWTRIGMODE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HWTRIGMODE_A {
                match self.bits {
                    false => HWTRIGMODE_A::_0,
                    true => HWTRIGMODE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HWTRIGMODE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HWTRIGMODE_A::_1
            }
        }
        #[doc = "Write proxy for field `HWTRIGMODE`"]
        pub struct HWTRIGMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HWTRIGMODE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HWTRIGMODE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FTM clears the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HWTRIGMODE_A::_0)
            }
            #[doc = "FTM does not clear the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HWTRIGMODE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "CNTIN Register Synchronization\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CNTINC_A {
            #[doc = "0: CNTIN register is updated with its buffer value at all rising edges of system clock."]
            _0 = 0,
            #[doc = "1: CNTIN register is updated with its buffer value by the PWM synchronization."]
            _1 = 1,
        }
        impl From<CNTINC_A> for bool {
            #[inline(always)]
            fn from(variant: CNTINC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CNTINC`"]
        pub type CNTINC_R = crate::R<bool, CNTINC_A>;
        impl CNTINC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CNTINC_A {
                match self.bits {
                    false => CNTINC_A::_0,
                    true => CNTINC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CNTINC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CNTINC_A::_1
            }
        }
        #[doc = "Write proxy for field `CNTINC`"]
        pub struct CNTINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNTINC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CNTINC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CNTIN register is updated with its buffer value at all rising edges of system clock."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CNTINC_A::_0)
            }
            #[doc = "CNTIN register is updated with its buffer value by the PWM synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CNTINC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "INVCTRL Register Synchronization\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum INVC_A {
            #[doc = "0: INVCTRL register is updated with its buffer value at all rising edges of system clock."]
            _0 = 0,
            #[doc = "1: INVCTRL register is updated with its buffer value by the PWM synchronization."]
            _1 = 1,
        }
        impl From<INVC_A> for bool {
            #[inline(always)]
            fn from(variant: INVC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `INVC`"]
        pub type INVC_R = crate::R<bool, INVC_A>;
        impl INVC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> INVC_A {
                match self.bits {
                    false => INVC_A::_0,
                    true => INVC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == INVC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == INVC_A::_1
            }
        }
        #[doc = "Write proxy for field `INVC`"]
        pub struct INVC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INVC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: INVC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "INVCTRL register is updated with its buffer value at all rising edges of system clock."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(INVC_A::_0)
            }
            #[doc = "INVCTRL register is updated with its buffer value by the PWM synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(INVC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "SWOCTRL Register Synchronization\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWOC_A {
            #[doc = "0: SWOCTRL register is updated with its buffer value at all rising edges of system clock."]
            _0 = 0,
            #[doc = "1: SWOCTRL register is updated with its buffer value by the PWM synchronization."]
            _1 = 1,
        }
        impl From<SWOC_A> for bool {
            #[inline(always)]
            fn from(variant: SWOC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWOC`"]
        pub type SWOC_R = crate::R<bool, SWOC_A>;
        impl SWOC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWOC_A {
                match self.bits {
                    false => SWOC_A::_0,
                    true => SWOC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SWOC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SWOC_A::_1
            }
        }
        #[doc = "Write proxy for field `SWOC`"]
        pub struct SWOC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWOC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWOC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SWOCTRL register is updated with its buffer value at all rising edges of system clock."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SWOC_A::_0)
            }
            #[doc = "SWOCTRL register is updated with its buffer value by the PWM synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SWOC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Synchronization Mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SYNCMODE_A {
            #[doc = "0: Legacy PWM synchronization is selected."]
            _0 = 0,
            #[doc = "1: Enhanced PWM synchronization is selected."]
            _1 = 1,
        }
        impl From<SYNCMODE_A> for bool {
            #[inline(always)]
            fn from(variant: SYNCMODE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SYNCMODE`"]
        pub type SYNCMODE_R = crate::R<bool, SYNCMODE_A>;
        impl SYNCMODE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SYNCMODE_A {
                match self.bits {
                    false => SYNCMODE_A::_0,
                    true => SYNCMODE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SYNCMODE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SYNCMODE_A::_1
            }
        }
        #[doc = "Write proxy for field `SYNCMODE`"]
        pub struct SYNCMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNCMODE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SYNCMODE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Legacy PWM synchronization is selected."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SYNCMODE_A::_0)
            }
            #[doc = "Enhanced PWM synchronization is selected."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SYNCMODE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "FTM counter synchronization is activated by the software trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWRSTCNT_A {
            #[doc = "0: The software trigger does not activate the FTM counter synchronization."]
            _0 = 0,
            #[doc = "1: The software trigger activates the FTM counter synchronization."]
            _1 = 1,
        }
        impl From<SWRSTCNT_A> for bool {
            #[inline(always)]
            fn from(variant: SWRSTCNT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWRSTCNT`"]
        pub type SWRSTCNT_R = crate::R<bool, SWRSTCNT_A>;
        impl SWRSTCNT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWRSTCNT_A {
                match self.bits {
                    false => SWRSTCNT_A::_0,
                    true => SWRSTCNT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SWRSTCNT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SWRSTCNT_A::_1
            }
        }
        #[doc = "Write proxy for field `SWRSTCNT`"]
        pub struct SWRSTCNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWRSTCNT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWRSTCNT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software trigger does not activate the FTM counter synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SWRSTCNT_A::_0)
            }
            #[doc = "The software trigger activates the FTM counter synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SWRSTCNT_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "MOD, CNTIN, and CV registers synchronization is activated by the software trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWWRBUF_A {
            #[doc = "0: The software trigger does not activate MOD, CNTIN, and CV registers synchronization."]
            _0 = 0,
            #[doc = "1: The software trigger activates MOD, CNTIN, and CV registers synchronization."]
            _1 = 1,
        }
        impl From<SWWRBUF_A> for bool {
            #[inline(always)]
            fn from(variant: SWWRBUF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWWRBUF`"]
        pub type SWWRBUF_R = crate::R<bool, SWWRBUF_A>;
        impl SWWRBUF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWWRBUF_A {
                match self.bits {
                    false => SWWRBUF_A::_0,
                    true => SWWRBUF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SWWRBUF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SWWRBUF_A::_1
            }
        }
        #[doc = "Write proxy for field `SWWRBUF`"]
        pub struct SWWRBUF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWWRBUF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWWRBUF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software trigger does not activate MOD, CNTIN, and CV registers synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SWWRBUF_A::_0)
            }
            #[doc = "The software trigger activates MOD, CNTIN, and CV registers synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SWWRBUF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Output mask synchronization is activated by the software trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWOM_A {
            #[doc = "0: The software trigger does not activate the OUTMASK register synchronization."]
            _0 = 0,
            #[doc = "1: The software trigger activates the OUTMASK register synchronization."]
            _1 = 1,
        }
        impl From<SWOM_A> for bool {
            #[inline(always)]
            fn from(variant: SWOM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWOM`"]
        pub type SWOM_R = crate::R<bool, SWOM_A>;
        impl SWOM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWOM_A {
                match self.bits {
                    false => SWOM_A::_0,
                    true => SWOM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SWOM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SWOM_A::_1
            }
        }
        #[doc = "Write proxy for field `SWOM`"]
        pub struct SWOM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWOM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWOM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software trigger does not activate the OUTMASK register synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SWOM_A::_0)
            }
            #[doc = "The software trigger activates the OUTMASK register synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SWOM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Inverting control synchronization is activated by the software trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWINVC_A {
            #[doc = "0: The software trigger does not activate the INVCTRL register synchronization."]
            _0 = 0,
            #[doc = "1: The software trigger activates the INVCTRL register synchronization."]
            _1 = 1,
        }
        impl From<SWINVC_A> for bool {
            #[inline(always)]
            fn from(variant: SWINVC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWINVC`"]
        pub type SWINVC_R = crate::R<bool, SWINVC_A>;
        impl SWINVC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWINVC_A {
                match self.bits {
                    false => SWINVC_A::_0,
                    true => SWINVC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SWINVC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SWINVC_A::_1
            }
        }
        #[doc = "Write proxy for field `SWINVC`"]
        pub struct SWINVC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWINVC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWINVC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software trigger does not activate the INVCTRL register synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SWINVC_A::_0)
            }
            #[doc = "The software trigger activates the INVCTRL register synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SWINVC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Software output control synchronization is activated by the software trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWSOC_A {
            #[doc = "0: The software trigger does not activate the SWOCTRL register synchronization."]
            _0 = 0,
            #[doc = "1: The software trigger activates the SWOCTRL register synchronization."]
            _1 = 1,
        }
        impl From<SWSOC_A> for bool {
            #[inline(always)]
            fn from(variant: SWSOC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWSOC`"]
        pub type SWSOC_R = crate::R<bool, SWSOC_A>;
        impl SWSOC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWSOC_A {
                match self.bits {
                    false => SWSOC_A::_0,
                    true => SWSOC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SWSOC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SWSOC_A::_1
            }
        }
        #[doc = "Write proxy for field `SWSOC`"]
        pub struct SWSOC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWSOC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWSOC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software trigger does not activate the SWOCTRL register synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SWSOC_A::_0)
            }
            #[doc = "The software trigger activates the SWOCTRL register synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SWSOC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "FTM counter synchronization is activated by a hardware trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HWRSTCNT_A {
            #[doc = "0: A hardware trigger does not activate the FTM counter synchronization."]
            _0 = 0,
            #[doc = "1: A hardware trigger activates the FTM counter synchronization."]
            _1 = 1,
        }
        impl From<HWRSTCNT_A> for bool {
            #[inline(always)]
            fn from(variant: HWRSTCNT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HWRSTCNT`"]
        pub type HWRSTCNT_R = crate::R<bool, HWRSTCNT_A>;
        impl HWRSTCNT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HWRSTCNT_A {
                match self.bits {
                    false => HWRSTCNT_A::_0,
                    true => HWRSTCNT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HWRSTCNT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HWRSTCNT_A::_1
            }
        }
        #[doc = "Write proxy for field `HWRSTCNT`"]
        pub struct HWRSTCNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HWRSTCNT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HWRSTCNT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "A hardware trigger does not activate the FTM counter synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HWRSTCNT_A::_0)
            }
            #[doc = "A hardware trigger activates the FTM counter synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HWRSTCNT_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "MOD, CNTIN, and CV registers synchronization is activated by a hardware trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HWWRBUF_A {
            #[doc = "0: A hardware trigger does not activate MOD, CNTIN, and CV registers synchronization."]
            _0 = 0,
            #[doc = "1: A hardware trigger activates MOD, CNTIN, and CV registers synchronization."]
            _1 = 1,
        }
        impl From<HWWRBUF_A> for bool {
            #[inline(always)]
            fn from(variant: HWWRBUF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HWWRBUF`"]
        pub type HWWRBUF_R = crate::R<bool, HWWRBUF_A>;
        impl HWWRBUF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HWWRBUF_A {
                match self.bits {
                    false => HWWRBUF_A::_0,
                    true => HWWRBUF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HWWRBUF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HWWRBUF_A::_1
            }
        }
        #[doc = "Write proxy for field `HWWRBUF`"]
        pub struct HWWRBUF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HWWRBUF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HWWRBUF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "A hardware trigger does not activate MOD, CNTIN, and CV registers synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HWWRBUF_A::_0)
            }
            #[doc = "A hardware trigger activates MOD, CNTIN, and CV registers synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HWWRBUF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Output mask synchronization is activated by a hardware trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HWOM_A {
            #[doc = "0: A hardware trigger does not activate the OUTMASK register synchronization."]
            _0 = 0,
            #[doc = "1: A hardware trigger activates the OUTMASK register synchronization."]
            _1 = 1,
        }
        impl From<HWOM_A> for bool {
            #[inline(always)]
            fn from(variant: HWOM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HWOM`"]
        pub type HWOM_R = crate::R<bool, HWOM_A>;
        impl HWOM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HWOM_A {
                match self.bits {
                    false => HWOM_A::_0,
                    true => HWOM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HWOM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HWOM_A::_1
            }
        }
        #[doc = "Write proxy for field `HWOM`"]
        pub struct HWOM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HWOM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HWOM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "A hardware trigger does not activate the OUTMASK register synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HWOM_A::_0)
            }
            #[doc = "A hardware trigger activates the OUTMASK register synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HWOM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Inverting control synchronization is activated by a hardware trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HWINVC_A {
            #[doc = "0: A hardware trigger does not activate the INVCTRL register synchronization."]
            _0 = 0,
            #[doc = "1: A hardware trigger activates the INVCTRL register synchronization."]
            _1 = 1,
        }
        impl From<HWINVC_A> for bool {
            #[inline(always)]
            fn from(variant: HWINVC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HWINVC`"]
        pub type HWINVC_R = crate::R<bool, HWINVC_A>;
        impl HWINVC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HWINVC_A {
                match self.bits {
                    false => HWINVC_A::_0,
                    true => HWINVC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HWINVC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HWINVC_A::_1
            }
        }
        #[doc = "Write proxy for field `HWINVC`"]
        pub struct HWINVC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HWINVC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HWINVC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "A hardware trigger does not activate the INVCTRL register synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HWINVC_A::_0)
            }
            #[doc = "A hardware trigger activates the INVCTRL register synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HWINVC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Software output control synchronization is activated by a hardware trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HWSOC_A {
            #[doc = "0: A hardware trigger does not activate the SWOCTRL register synchronization."]
            _0 = 0,
            #[doc = "1: A hardware trigger activates the SWOCTRL register synchronization."]
            _1 = 1,
        }
        impl From<HWSOC_A> for bool {
            #[inline(always)]
            fn from(variant: HWSOC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HWSOC`"]
        pub type HWSOC_R = crate::R<bool, HWSOC_A>;
        impl HWSOC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HWSOC_A {
                match self.bits {
                    false => HWSOC_A::_0,
                    true => HWSOC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HWSOC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HWSOC_A::_1
            }
        }
        #[doc = "Write proxy for field `HWSOC`"]
        pub struct HWSOC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HWSOC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HWSOC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "A hardware trigger does not activate the SWOCTRL register synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HWSOC_A::_0)
            }
            #[doc = "A hardware trigger activates the SWOCTRL register synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HWSOC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Hardware Trigger Mode"]
            #[inline(always)]
            pub fn hwtrigmode(&self) -> HWTRIGMODE_R {
                HWTRIGMODE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 2 - CNTIN Register Synchronization"]
            #[inline(always)]
            pub fn cntinc(&self) -> CNTINC_R {
                CNTINC_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 4 - INVCTRL Register Synchronization"]
            #[inline(always)]
            pub fn invc(&self) -> INVC_R {
                INVC_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - SWOCTRL Register Synchronization"]
            #[inline(always)]
            pub fn swoc(&self) -> SWOC_R {
                SWOC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Synchronization Mode"]
            #[inline(always)]
            pub fn syncmode(&self) -> SYNCMODE_R {
                SYNCMODE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - FTM counter synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swrstcnt(&self) -> SWRSTCNT_R {
                SWRSTCNT_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - MOD, CNTIN, and CV registers synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swwrbuf(&self) -> SWWRBUF_R {
                SWWRBUF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Output mask synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swom(&self) -> SWOM_R {
                SWOM_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Inverting control synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swinvc(&self) -> SWINVC_R {
                SWINVC_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Software output control synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swsoc(&self) -> SWSOC_R {
                SWSOC_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 16 - FTM counter synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwrstcnt(&self) -> HWRSTCNT_R {
                HWRSTCNT_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - MOD, CNTIN, and CV registers synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwwrbuf(&self) -> HWWRBUF_R {
                HWWRBUF_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Output mask synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwom(&self) -> HWOM_R {
                HWOM_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Inverting control synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwinvc(&self) -> HWINVC_R {
                HWINVC_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Software output control synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwsoc(&self) -> HWSOC_R {
                HWSOC_R::new(((self.bits >> 20) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Hardware Trigger Mode"]
            #[inline(always)]
            pub fn hwtrigmode(&mut self) -> HWTRIGMODE_W {
                HWTRIGMODE_W { w: self }
            }
            #[doc = "Bit 2 - CNTIN Register Synchronization"]
            #[inline(always)]
            pub fn cntinc(&mut self) -> CNTINC_W {
                CNTINC_W { w: self }
            }
            #[doc = "Bit 4 - INVCTRL Register Synchronization"]
            #[inline(always)]
            pub fn invc(&mut self) -> INVC_W {
                INVC_W { w: self }
            }
            #[doc = "Bit 5 - SWOCTRL Register Synchronization"]
            #[inline(always)]
            pub fn swoc(&mut self) -> SWOC_W {
                SWOC_W { w: self }
            }
            #[doc = "Bit 7 - Synchronization Mode"]
            #[inline(always)]
            pub fn syncmode(&mut self) -> SYNCMODE_W {
                SYNCMODE_W { w: self }
            }
            #[doc = "Bit 8 - FTM counter synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swrstcnt(&mut self) -> SWRSTCNT_W {
                SWRSTCNT_W { w: self }
            }
            #[doc = "Bit 9 - MOD, CNTIN, and CV registers synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swwrbuf(&mut self) -> SWWRBUF_W {
                SWWRBUF_W { w: self }
            }
            #[doc = "Bit 10 - Output mask synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swom(&mut self) -> SWOM_W {
                SWOM_W { w: self }
            }
            #[doc = "Bit 11 - Inverting control synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swinvc(&mut self) -> SWINVC_W {
                SWINVC_W { w: self }
            }
            #[doc = "Bit 12 - Software output control synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swsoc(&mut self) -> SWSOC_W {
                SWSOC_W { w: self }
            }
            #[doc = "Bit 16 - FTM counter synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwrstcnt(&mut self) -> HWRSTCNT_W {
                HWRSTCNT_W { w: self }
            }
            #[doc = "Bit 17 - MOD, CNTIN, and CV registers synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwwrbuf(&mut self) -> HWWRBUF_W {
                HWWRBUF_W { w: self }
            }
            #[doc = "Bit 18 - Output mask synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwom(&mut self) -> HWOM_W {
                HWOM_W { w: self }
            }
            #[doc = "Bit 19 - Inverting control synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwinvc(&mut self) -> HWINVC_W {
                HWINVC_W { w: self }
            }
            #[doc = "Bit 20 - Software output control synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwsoc(&mut self) -> HWSOC_W {
                HWSOC_W { w: self }
            }
        }
    }
    #[doc = "FTM Inverting Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [invctrl](invctrl) module"]
    pub type INVCTRL = crate::Reg<u32, _INVCTRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _INVCTRL;
    #[doc = "`read()` method returns [invctrl::R](invctrl::R) reader structure"]
    impl crate::Readable for INVCTRL {}
    #[doc = "`write(|w| ..)` method takes [invctrl::W](invctrl::W) writer structure"]
    impl crate::Writable for INVCTRL {}
    #[doc = "FTM Inverting Control"]
    pub mod invctrl {
        #[doc = "Reader of register INVCTRL"]
        pub type R = crate::R<u32, super::INVCTRL>;
        #[doc = "Writer for register INVCTRL"]
        pub type W = crate::W<u32, super::INVCTRL>;
        #[doc = "Register INVCTRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::INVCTRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Pair Channels 0 Inverting Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum INV0EN_A {
            #[doc = "0: Inverting is disabled."]
            _0 = 0,
            #[doc = "1: Inverting is enabled."]
            _1 = 1,
        }
        impl From<INV0EN_A> for bool {
            #[inline(always)]
            fn from(variant: INV0EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `INV0EN`"]
        pub type INV0EN_R = crate::R<bool, INV0EN_A>;
        impl INV0EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> INV0EN_A {
                match self.bits {
                    false => INV0EN_A::_0,
                    true => INV0EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == INV0EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == INV0EN_A::_1
            }
        }
        #[doc = "Write proxy for field `INV0EN`"]
        pub struct INV0EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INV0EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: INV0EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Inverting is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(INV0EN_A::_0)
            }
            #[doc = "Inverting is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(INV0EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Pair Channels 1 Inverting Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum INV1EN_A {
            #[doc = "0: Inverting is disabled."]
            _0 = 0,
            #[doc = "1: Inverting is enabled."]
            _1 = 1,
        }
        impl From<INV1EN_A> for bool {
            #[inline(always)]
            fn from(variant: INV1EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `INV1EN`"]
        pub type INV1EN_R = crate::R<bool, INV1EN_A>;
        impl INV1EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> INV1EN_A {
                match self.bits {
                    false => INV1EN_A::_0,
                    true => INV1EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == INV1EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == INV1EN_A::_1
            }
        }
        #[doc = "Write proxy for field `INV1EN`"]
        pub struct INV1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INV1EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: INV1EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Inverting is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(INV1EN_A::_0)
            }
            #[doc = "Inverting is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(INV1EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Pair Channels 2 Inverting Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum INV2EN_A {
            #[doc = "0: Inverting is disabled."]
            _0 = 0,
            #[doc = "1: Inverting is enabled."]
            _1 = 1,
        }
        impl From<INV2EN_A> for bool {
            #[inline(always)]
            fn from(variant: INV2EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `INV2EN`"]
        pub type INV2EN_R = crate::R<bool, INV2EN_A>;
        impl INV2EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> INV2EN_A {
                match self.bits {
                    false => INV2EN_A::_0,
                    true => INV2EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == INV2EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == INV2EN_A::_1
            }
        }
        #[doc = "Write proxy for field `INV2EN`"]
        pub struct INV2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INV2EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: INV2EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Inverting is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(INV2EN_A::_0)
            }
            #[doc = "Inverting is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(INV2EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Pair Channels 3 Inverting Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum INV3EN_A {
            #[doc = "0: Inverting is disabled."]
            _0 = 0,
            #[doc = "1: Inverting is enabled."]
            _1 = 1,
        }
        impl From<INV3EN_A> for bool {
            #[inline(always)]
            fn from(variant: INV3EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `INV3EN`"]
        pub type INV3EN_R = crate::R<bool, INV3EN_A>;
        impl INV3EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> INV3EN_A {
                match self.bits {
                    false => INV3EN_A::_0,
                    true => INV3EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == INV3EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == INV3EN_A::_1
            }
        }
        #[doc = "Write proxy for field `INV3EN`"]
        pub struct INV3EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INV3EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: INV3EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Inverting is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(INV3EN_A::_0)
            }
            #[doc = "Inverting is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(INV3EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Pair Channels 0 Inverting Enable"]
            #[inline(always)]
            pub fn inv0en(&self) -> INV0EN_R {
                INV0EN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Pair Channels 1 Inverting Enable"]
            #[inline(always)]
            pub fn inv1en(&self) -> INV1EN_R {
                INV1EN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Pair Channels 2 Inverting Enable"]
            #[inline(always)]
            pub fn inv2en(&self) -> INV2EN_R {
                INV2EN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Pair Channels 3 Inverting Enable"]
            #[inline(always)]
            pub fn inv3en(&self) -> INV3EN_R {
                INV3EN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Pair Channels 0 Inverting Enable"]
            #[inline(always)]
            pub fn inv0en(&mut self) -> INV0EN_W {
                INV0EN_W { w: self }
            }
            #[doc = "Bit 1 - Pair Channels 1 Inverting Enable"]
            #[inline(always)]
            pub fn inv1en(&mut self) -> INV1EN_W {
                INV1EN_W { w: self }
            }
            #[doc = "Bit 2 - Pair Channels 2 Inverting Enable"]
            #[inline(always)]
            pub fn inv2en(&mut self) -> INV2EN_W {
                INV2EN_W { w: self }
            }
            #[doc = "Bit 3 - Pair Channels 3 Inverting Enable"]
            #[inline(always)]
            pub fn inv3en(&mut self) -> INV3EN_W {
                INV3EN_W { w: self }
            }
        }
    }
    #[doc = "FTM Software Output Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [swoctrl](swoctrl) module"]
    pub type SWOCTRL = crate::Reg<u32, _SWOCTRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SWOCTRL;
    #[doc = "`read()` method returns [swoctrl::R](swoctrl::R) reader structure"]
    impl crate::Readable for SWOCTRL {}
    #[doc = "`write(|w| ..)` method takes [swoctrl::W](swoctrl::W) writer structure"]
    impl crate::Writable for SWOCTRL {}
    #[doc = "FTM Software Output Control"]
    pub mod swoctrl {
        #[doc = "Reader of register SWOCTRL"]
        pub type R = crate::R<u32, super::SWOCTRL>;
        #[doc = "Writer for register SWOCTRL"]
        pub type W = crate::W<u32, super::SWOCTRL>;
        #[doc = "Register SWOCTRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::SWOCTRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Channel 0 Software Output Control Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH0OC_A {
            #[doc = "0: The channel output is not affected by software output control."]
            _0 = 0,
            #[doc = "1: The channel output is affected by software output control."]
            _1 = 1,
        }
        impl From<CH0OC_A> for bool {
            #[inline(always)]
            fn from(variant: CH0OC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH0OC`"]
        pub type CH0OC_R = crate::R<bool, CH0OC_A>;
        impl CH0OC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH0OC_A {
                match self.bits {
                    false => CH0OC_A::_0,
                    true => CH0OC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH0OC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH0OC_A::_1
            }
        }
        #[doc = "Write proxy for field `CH0OC`"]
        pub struct CH0OC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0OC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH0OC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel output is not affected by software output control."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH0OC_A::_0)
            }
            #[doc = "The channel output is affected by software output control."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH0OC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Channel 1 Software Output Control Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH1OC_A {
            #[doc = "0: The channel output is not affected by software output control."]
            _0 = 0,
            #[doc = "1: The channel output is affected by software output control."]
            _1 = 1,
        }
        impl From<CH1OC_A> for bool {
            #[inline(always)]
            fn from(variant: CH1OC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH1OC`"]
        pub type CH1OC_R = crate::R<bool, CH1OC_A>;
        impl CH1OC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH1OC_A {
                match self.bits {
                    false => CH1OC_A::_0,
                    true => CH1OC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH1OC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH1OC_A::_1
            }
        }
        #[doc = "Write proxy for field `CH1OC`"]
        pub struct CH1OC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1OC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH1OC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel output is not affected by software output control."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH1OC_A::_0)
            }
            #[doc = "The channel output is affected by software output control."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH1OC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Channel 2 Software Output Control Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH2OC_A {
            #[doc = "0: The channel output is not affected by software output control."]
            _0 = 0,
            #[doc = "1: The channel output is affected by software output control."]
            _1 = 1,
        }
        impl From<CH2OC_A> for bool {
            #[inline(always)]
            fn from(variant: CH2OC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH2OC`"]
        pub type CH2OC_R = crate::R<bool, CH2OC_A>;
        impl CH2OC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH2OC_A {
                match self.bits {
                    false => CH2OC_A::_0,
                    true => CH2OC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH2OC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH2OC_A::_1
            }
        }
        #[doc = "Write proxy for field `CH2OC`"]
        pub struct CH2OC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2OC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH2OC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel output is not affected by software output control."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH2OC_A::_0)
            }
            #[doc = "The channel output is affected by software output control."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH2OC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel 3 Software Output Control Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH3OC_A {
            #[doc = "0: The channel output is not affected by software output control."]
            _0 = 0,
            #[doc = "1: The channel output is affected by software output control."]
            _1 = 1,
        }
        impl From<CH3OC_A> for bool {
            #[inline(always)]
            fn from(variant: CH3OC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH3OC`"]
        pub type CH3OC_R = crate::R<bool, CH3OC_A>;
        impl CH3OC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH3OC_A {
                match self.bits {
                    false => CH3OC_A::_0,
                    true => CH3OC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH3OC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH3OC_A::_1
            }
        }
        #[doc = "Write proxy for field `CH3OC`"]
        pub struct CH3OC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3OC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH3OC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel output is not affected by software output control."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH3OC_A::_0)
            }
            #[doc = "The channel output is affected by software output control."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH3OC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Channel 4 Software Output Control Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH4OC_A {
            #[doc = "0: The channel output is not affected by software output control."]
            _0 = 0,
            #[doc = "1: The channel output is affected by software output control."]
            _1 = 1,
        }
        impl From<CH4OC_A> for bool {
            #[inline(always)]
            fn from(variant: CH4OC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH4OC`"]
        pub type CH4OC_R = crate::R<bool, CH4OC_A>;
        impl CH4OC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH4OC_A {
                match self.bits {
                    false => CH4OC_A::_0,
                    true => CH4OC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH4OC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH4OC_A::_1
            }
        }
        #[doc = "Write proxy for field `CH4OC`"]
        pub struct CH4OC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH4OC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH4OC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel output is not affected by software output control."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH4OC_A::_0)
            }
            #[doc = "The channel output is affected by software output control."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH4OC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Channel 5 Software Output Control Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH5OC_A {
            #[doc = "0: The channel output is not affected by software output control."]
            _0 = 0,
            #[doc = "1: The channel output is affected by software output control."]
            _1 = 1,
        }
        impl From<CH5OC_A> for bool {
            #[inline(always)]
            fn from(variant: CH5OC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH5OC`"]
        pub type CH5OC_R = crate::R<bool, CH5OC_A>;
        impl CH5OC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH5OC_A {
                match self.bits {
                    false => CH5OC_A::_0,
                    true => CH5OC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH5OC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH5OC_A::_1
            }
        }
        #[doc = "Write proxy for field `CH5OC`"]
        pub struct CH5OC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH5OC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH5OC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel output is not affected by software output control."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH5OC_A::_0)
            }
            #[doc = "The channel output is affected by software output control."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH5OC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Channel 6 Software Output Control Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH6OC_A {
            #[doc = "0: The channel output is not affected by software output control."]
            _0 = 0,
            #[doc = "1: The channel output is affected by software output control."]
            _1 = 1,
        }
        impl From<CH6OC_A> for bool {
            #[inline(always)]
            fn from(variant: CH6OC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH6OC`"]
        pub type CH6OC_R = crate::R<bool, CH6OC_A>;
        impl CH6OC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH6OC_A {
                match self.bits {
                    false => CH6OC_A::_0,
                    true => CH6OC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH6OC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH6OC_A::_1
            }
        }
        #[doc = "Write proxy for field `CH6OC`"]
        pub struct CH6OC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH6OC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH6OC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel output is not affected by software output control."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH6OC_A::_0)
            }
            #[doc = "The channel output is affected by software output control."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH6OC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel 7 Software Output Control Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH7OC_A {
            #[doc = "0: The channel output is not affected by software output control."]
            _0 = 0,
            #[doc = "1: The channel output is affected by software output control."]
            _1 = 1,
        }
        impl From<CH7OC_A> for bool {
            #[inline(always)]
            fn from(variant: CH7OC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH7OC`"]
        pub type CH7OC_R = crate::R<bool, CH7OC_A>;
        impl CH7OC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH7OC_A {
                match self.bits {
                    false => CH7OC_A::_0,
                    true => CH7OC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH7OC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH7OC_A::_1
            }
        }
        #[doc = "Write proxy for field `CH7OC`"]
        pub struct CH7OC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH7OC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH7OC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel output is not affected by software output control."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH7OC_A::_0)
            }
            #[doc = "The channel output is affected by software output control."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH7OC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Channel 0 Software Output Control Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH0OCV_A {
            #[doc = "0: The software output control forces 0 to the channel output."]
            _0 = 0,
            #[doc = "1: The software output control forces 1 to the channel output."]
            _1 = 1,
        }
        impl From<CH0OCV_A> for bool {
            #[inline(always)]
            fn from(variant: CH0OCV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH0OCV`"]
        pub type CH0OCV_R = crate::R<bool, CH0OCV_A>;
        impl CH0OCV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH0OCV_A {
                match self.bits {
                    false => CH0OCV_A::_0,
                    true => CH0OCV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH0OCV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH0OCV_A::_1
            }
        }
        #[doc = "Write proxy for field `CH0OCV`"]
        pub struct CH0OCV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0OCV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH0OCV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software output control forces 0 to the channel output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH0OCV_A::_0)
            }
            #[doc = "The software output control forces 1 to the channel output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH0OCV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Channel 1 Software Output Control Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH1OCV_A {
            #[doc = "0: The software output control forces 0 to the channel output."]
            _0 = 0,
            #[doc = "1: The software output control forces 1 to the channel output."]
            _1 = 1,
        }
        impl From<CH1OCV_A> for bool {
            #[inline(always)]
            fn from(variant: CH1OCV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH1OCV`"]
        pub type CH1OCV_R = crate::R<bool, CH1OCV_A>;
        impl CH1OCV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH1OCV_A {
                match self.bits {
                    false => CH1OCV_A::_0,
                    true => CH1OCV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH1OCV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH1OCV_A::_1
            }
        }
        #[doc = "Write proxy for field `CH1OCV`"]
        pub struct CH1OCV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1OCV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH1OCV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software output control forces 0 to the channel output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH1OCV_A::_0)
            }
            #[doc = "The software output control forces 1 to the channel output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH1OCV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Channel 2 Software Output Control Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH2OCV_A {
            #[doc = "0: The software output control forces 0 to the channel output."]
            _0 = 0,
            #[doc = "1: The software output control forces 1 to the channel output."]
            _1 = 1,
        }
        impl From<CH2OCV_A> for bool {
            #[inline(always)]
            fn from(variant: CH2OCV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH2OCV`"]
        pub type CH2OCV_R = crate::R<bool, CH2OCV_A>;
        impl CH2OCV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH2OCV_A {
                match self.bits {
                    false => CH2OCV_A::_0,
                    true => CH2OCV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH2OCV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH2OCV_A::_1
            }
        }
        #[doc = "Write proxy for field `CH2OCV`"]
        pub struct CH2OCV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2OCV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH2OCV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software output control forces 0 to the channel output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH2OCV_A::_0)
            }
            #[doc = "The software output control forces 1 to the channel output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH2OCV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Channel 3 Software Output Control Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH3OCV_A {
            #[doc = "0: The software output control forces 0 to the channel output."]
            _0 = 0,
            #[doc = "1: The software output control forces 1 to the channel output."]
            _1 = 1,
        }
        impl From<CH3OCV_A> for bool {
            #[inline(always)]
            fn from(variant: CH3OCV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH3OCV`"]
        pub type CH3OCV_R = crate::R<bool, CH3OCV_A>;
        impl CH3OCV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH3OCV_A {
                match self.bits {
                    false => CH3OCV_A::_0,
                    true => CH3OCV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH3OCV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH3OCV_A::_1
            }
        }
        #[doc = "Write proxy for field `CH3OCV`"]
        pub struct CH3OCV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3OCV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH3OCV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software output control forces 0 to the channel output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH3OCV_A::_0)
            }
            #[doc = "The software output control forces 1 to the channel output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH3OCV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Channel 4 Software Output Control Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH4OCV_A {
            #[doc = "0: The software output control forces 0 to the channel output."]
            _0 = 0,
            #[doc = "1: The software output control forces 1 to the channel output."]
            _1 = 1,
        }
        impl From<CH4OCV_A> for bool {
            #[inline(always)]
            fn from(variant: CH4OCV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH4OCV`"]
        pub type CH4OCV_R = crate::R<bool, CH4OCV_A>;
        impl CH4OCV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH4OCV_A {
                match self.bits {
                    false => CH4OCV_A::_0,
                    true => CH4OCV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH4OCV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH4OCV_A::_1
            }
        }
        #[doc = "Write proxy for field `CH4OCV`"]
        pub struct CH4OCV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH4OCV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH4OCV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software output control forces 0 to the channel output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH4OCV_A::_0)
            }
            #[doc = "The software output control forces 1 to the channel output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH4OCV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Channel 5 Software Output Control Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH5OCV_A {
            #[doc = "0: The software output control forces 0 to the channel output."]
            _0 = 0,
            #[doc = "1: The software output control forces 1 to the channel output."]
            _1 = 1,
        }
        impl From<CH5OCV_A> for bool {
            #[inline(always)]
            fn from(variant: CH5OCV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH5OCV`"]
        pub type CH5OCV_R = crate::R<bool, CH5OCV_A>;
        impl CH5OCV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH5OCV_A {
                match self.bits {
                    false => CH5OCV_A::_0,
                    true => CH5OCV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH5OCV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH5OCV_A::_1
            }
        }
        #[doc = "Write proxy for field `CH5OCV`"]
        pub struct CH5OCV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH5OCV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH5OCV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software output control forces 0 to the channel output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH5OCV_A::_0)
            }
            #[doc = "The software output control forces 1 to the channel output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH5OCV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Channel 6 Software Output Control Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH6OCV_A {
            #[doc = "0: The software output control forces 0 to the channel output."]
            _0 = 0,
            #[doc = "1: The software output control forces 1 to the channel output."]
            _1 = 1,
        }
        impl From<CH6OCV_A> for bool {
            #[inline(always)]
            fn from(variant: CH6OCV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH6OCV`"]
        pub type CH6OCV_R = crate::R<bool, CH6OCV_A>;
        impl CH6OCV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH6OCV_A {
                match self.bits {
                    false => CH6OCV_A::_0,
                    true => CH6OCV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH6OCV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH6OCV_A::_1
            }
        }
        #[doc = "Write proxy for field `CH6OCV`"]
        pub struct CH6OCV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH6OCV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH6OCV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software output control forces 0 to the channel output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH6OCV_A::_0)
            }
            #[doc = "The software output control forces 1 to the channel output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH6OCV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Channel 7 Software Output Control Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH7OCV_A {
            #[doc = "0: The software output control forces 0 to the channel output."]
            _0 = 0,
            #[doc = "1: The software output control forces 1 to the channel output."]
            _1 = 1,
        }
        impl From<CH7OCV_A> for bool {
            #[inline(always)]
            fn from(variant: CH7OCV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH7OCV`"]
        pub type CH7OCV_R = crate::R<bool, CH7OCV_A>;
        impl CH7OCV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH7OCV_A {
                match self.bits {
                    false => CH7OCV_A::_0,
                    true => CH7OCV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH7OCV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH7OCV_A::_1
            }
        }
        #[doc = "Write proxy for field `CH7OCV`"]
        pub struct CH7OCV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH7OCV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH7OCV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software output control forces 0 to the channel output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH7OCV_A::_0)
            }
            #[doc = "The software output control forces 1 to the channel output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH7OCV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel 0 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch0oc(&self) -> CH0OC_R {
                CH0OC_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 1 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch1oc(&self) -> CH1OC_R {
                CH1OC_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel 2 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch2oc(&self) -> CH2OC_R {
                CH2OC_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel 3 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch3oc(&self) -> CH3OC_R {
                CH3OC_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 4 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch4oc(&self) -> CH4OC_R {
                CH4OC_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 5 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch5oc(&self) -> CH5OC_R {
                CH5OC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel 6 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch6oc(&self) -> CH6OC_R {
                CH6OC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel 7 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch7oc(&self) -> CH7OC_R {
                CH7OC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Channel 0 Software Output Control Value"]
            #[inline(always)]
            pub fn ch0ocv(&self) -> CH0OCV_R {
                CH0OCV_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Channel 1 Software Output Control Value"]
            #[inline(always)]
            pub fn ch1ocv(&self) -> CH1OCV_R {
                CH1OCV_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Channel 2 Software Output Control Value"]
            #[inline(always)]
            pub fn ch2ocv(&self) -> CH2OCV_R {
                CH2OCV_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Channel 3 Software Output Control Value"]
            #[inline(always)]
            pub fn ch3ocv(&self) -> CH3OCV_R {
                CH3OCV_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Channel 4 Software Output Control Value"]
            #[inline(always)]
            pub fn ch4ocv(&self) -> CH4OCV_R {
                CH4OCV_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Channel 5 Software Output Control Value"]
            #[inline(always)]
            pub fn ch5ocv(&self) -> CH5OCV_R {
                CH5OCV_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Channel 6 Software Output Control Value"]
            #[inline(always)]
            pub fn ch6ocv(&self) -> CH6OCV_R {
                CH6OCV_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Channel 7 Software Output Control Value"]
            #[inline(always)]
            pub fn ch7ocv(&self) -> CH7OCV_R {
                CH7OCV_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 0 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch0oc(&mut self) -> CH0OC_W {
                CH0OC_W { w: self }
            }
            #[doc = "Bit 1 - Channel 1 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch1oc(&mut self) -> CH1OC_W {
                CH1OC_W { w: self }
            }
            #[doc = "Bit 2 - Channel 2 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch2oc(&mut self) -> CH2OC_W {
                CH2OC_W { w: self }
            }
            #[doc = "Bit 3 - Channel 3 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch3oc(&mut self) -> CH3OC_W {
                CH3OC_W { w: self }
            }
            #[doc = "Bit 4 - Channel 4 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch4oc(&mut self) -> CH4OC_W {
                CH4OC_W { w: self }
            }
            #[doc = "Bit 5 - Channel 5 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch5oc(&mut self) -> CH5OC_W {
                CH5OC_W { w: self }
            }
            #[doc = "Bit 6 - Channel 6 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch6oc(&mut self) -> CH6OC_W {
                CH6OC_W { w: self }
            }
            #[doc = "Bit 7 - Channel 7 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch7oc(&mut self) -> CH7OC_W {
                CH7OC_W { w: self }
            }
            #[doc = "Bit 8 - Channel 0 Software Output Control Value"]
            #[inline(always)]
            pub fn ch0ocv(&mut self) -> CH0OCV_W {
                CH0OCV_W { w: self }
            }
            #[doc = "Bit 9 - Channel 1 Software Output Control Value"]
            #[inline(always)]
            pub fn ch1ocv(&mut self) -> CH1OCV_W {
                CH1OCV_W { w: self }
            }
            #[doc = "Bit 10 - Channel 2 Software Output Control Value"]
            #[inline(always)]
            pub fn ch2ocv(&mut self) -> CH2OCV_W {
                CH2OCV_W { w: self }
            }
            #[doc = "Bit 11 - Channel 3 Software Output Control Value"]
            #[inline(always)]
            pub fn ch3ocv(&mut self) -> CH3OCV_W {
                CH3OCV_W { w: self }
            }
            #[doc = "Bit 12 - Channel 4 Software Output Control Value"]
            #[inline(always)]
            pub fn ch4ocv(&mut self) -> CH4OCV_W {
                CH4OCV_W { w: self }
            }
            #[doc = "Bit 13 - Channel 5 Software Output Control Value"]
            #[inline(always)]
            pub fn ch5ocv(&mut self) -> CH5OCV_W {
                CH5OCV_W { w: self }
            }
            #[doc = "Bit 14 - Channel 6 Software Output Control Value"]
            #[inline(always)]
            pub fn ch6ocv(&mut self) -> CH6OCV_W {
                CH6OCV_W { w: self }
            }
            #[doc = "Bit 15 - Channel 7 Software Output Control Value"]
            #[inline(always)]
            pub fn ch7ocv(&mut self) -> CH7OCV_W {
                CH7OCV_W { w: self }
            }
        }
    }
    #[doc = "FTM PWM Load\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwmload](pwmload) module"]
    pub type PWMLOAD = crate::Reg<u32, _PWMLOAD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PWMLOAD;
    #[doc = "`read()` method returns [pwmload::R](pwmload::R) reader structure"]
    impl crate::Readable for PWMLOAD {}
    #[doc = "`write(|w| ..)` method takes [pwmload::W](pwmload::W) writer structure"]
    impl crate::Writable for PWMLOAD {}
    #[doc = "FTM PWM Load"]
    pub mod pwmload {
        #[doc = "Reader of register PWMLOAD"]
        pub type R = crate::R<u32, super::PWMLOAD>;
        #[doc = "Writer for register PWMLOAD"]
        pub type W = crate::W<u32, super::PWMLOAD>;
        #[doc = "Register PWMLOAD `reset()`'s with value 0"]
        impl crate::ResetValue for super::PWMLOAD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Channel 0 Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH0SEL_A {
            #[doc = "0: Do not include the channel in the matching process."]
            _0 = 0,
            #[doc = "1: Include the channel in the matching process."]
            _1 = 1,
        }
        impl From<CH0SEL_A> for bool {
            #[inline(always)]
            fn from(variant: CH0SEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH0SEL`"]
        pub type CH0SEL_R = crate::R<bool, CH0SEL_A>;
        impl CH0SEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH0SEL_A {
                match self.bits {
                    false => CH0SEL_A::_0,
                    true => CH0SEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH0SEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH0SEL_A::_1
            }
        }
        #[doc = "Write proxy for field `CH0SEL`"]
        pub struct CH0SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0SEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH0SEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Do not include the channel in the matching process."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH0SEL_A::_0)
            }
            #[doc = "Include the channel in the matching process."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH0SEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Channel 1 Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH1SEL_A {
            #[doc = "0: Do not include the channel in the matching process."]
            _0 = 0,
            #[doc = "1: Include the channel in the matching process."]
            _1 = 1,
        }
        impl From<CH1SEL_A> for bool {
            #[inline(always)]
            fn from(variant: CH1SEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH1SEL`"]
        pub type CH1SEL_R = crate::R<bool, CH1SEL_A>;
        impl CH1SEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH1SEL_A {
                match self.bits {
                    false => CH1SEL_A::_0,
                    true => CH1SEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH1SEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH1SEL_A::_1
            }
        }
        #[doc = "Write proxy for field `CH1SEL`"]
        pub struct CH1SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1SEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH1SEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Do not include the channel in the matching process."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH1SEL_A::_0)
            }
            #[doc = "Include the channel in the matching process."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH1SEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Channel 2 Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH2SEL_A {
            #[doc = "0: Do not include the channel in the matching process."]
            _0 = 0,
            #[doc = "1: Include the channel in the matching process."]
            _1 = 1,
        }
        impl From<CH2SEL_A> for bool {
            #[inline(always)]
            fn from(variant: CH2SEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH2SEL`"]
        pub type CH2SEL_R = crate::R<bool, CH2SEL_A>;
        impl CH2SEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH2SEL_A {
                match self.bits {
                    false => CH2SEL_A::_0,
                    true => CH2SEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH2SEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH2SEL_A::_1
            }
        }
        #[doc = "Write proxy for field `CH2SEL`"]
        pub struct CH2SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2SEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH2SEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Do not include the channel in the matching process."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH2SEL_A::_0)
            }
            #[doc = "Include the channel in the matching process."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH2SEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel 3 Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH3SEL_A {
            #[doc = "0: Do not include the channel in the matching process."]
            _0 = 0,
            #[doc = "1: Include the channel in the matching process."]
            _1 = 1,
        }
        impl From<CH3SEL_A> for bool {
            #[inline(always)]
            fn from(variant: CH3SEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH3SEL`"]
        pub type CH3SEL_R = crate::R<bool, CH3SEL_A>;
        impl CH3SEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH3SEL_A {
                match self.bits {
                    false => CH3SEL_A::_0,
                    true => CH3SEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH3SEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH3SEL_A::_1
            }
        }
        #[doc = "Write proxy for field `CH3SEL`"]
        pub struct CH3SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3SEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH3SEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Do not include the channel in the matching process."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH3SEL_A::_0)
            }
            #[doc = "Include the channel in the matching process."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH3SEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Channel 4 Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH4SEL_A {
            #[doc = "0: Do not include the channel in the matching process."]
            _0 = 0,
            #[doc = "1: Include the channel in the matching process."]
            _1 = 1,
        }
        impl From<CH4SEL_A> for bool {
            #[inline(always)]
            fn from(variant: CH4SEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH4SEL`"]
        pub type CH4SEL_R = crate::R<bool, CH4SEL_A>;
        impl CH4SEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH4SEL_A {
                match self.bits {
                    false => CH4SEL_A::_0,
                    true => CH4SEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH4SEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH4SEL_A::_1
            }
        }
        #[doc = "Write proxy for field `CH4SEL`"]
        pub struct CH4SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH4SEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH4SEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Do not include the channel in the matching process."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH4SEL_A::_0)
            }
            #[doc = "Include the channel in the matching process."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH4SEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Channel 5 Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH5SEL_A {
            #[doc = "0: Do not include the channel in the matching process."]
            _0 = 0,
            #[doc = "1: Include the channel in the matching process."]
            _1 = 1,
        }
        impl From<CH5SEL_A> for bool {
            #[inline(always)]
            fn from(variant: CH5SEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH5SEL`"]
        pub type CH5SEL_R = crate::R<bool, CH5SEL_A>;
        impl CH5SEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH5SEL_A {
                match self.bits {
                    false => CH5SEL_A::_0,
                    true => CH5SEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH5SEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH5SEL_A::_1
            }
        }
        #[doc = "Write proxy for field `CH5SEL`"]
        pub struct CH5SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH5SEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH5SEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Do not include the channel in the matching process."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH5SEL_A::_0)
            }
            #[doc = "Include the channel in the matching process."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH5SEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Channel 6 Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH6SEL_A {
            #[doc = "0: Do not include the channel in the matching process."]
            _0 = 0,
            #[doc = "1: Include the channel in the matching process."]
            _1 = 1,
        }
        impl From<CH6SEL_A> for bool {
            #[inline(always)]
            fn from(variant: CH6SEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH6SEL`"]
        pub type CH6SEL_R = crate::R<bool, CH6SEL_A>;
        impl CH6SEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH6SEL_A {
                match self.bits {
                    false => CH6SEL_A::_0,
                    true => CH6SEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH6SEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH6SEL_A::_1
            }
        }
        #[doc = "Write proxy for field `CH6SEL`"]
        pub struct CH6SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH6SEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH6SEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Do not include the channel in the matching process."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH6SEL_A::_0)
            }
            #[doc = "Include the channel in the matching process."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH6SEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel 7 Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH7SEL_A {
            #[doc = "0: Do not include the channel in the matching process."]
            _0 = 0,
            #[doc = "1: Include the channel in the matching process."]
            _1 = 1,
        }
        impl From<CH7SEL_A> for bool {
            #[inline(always)]
            fn from(variant: CH7SEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH7SEL`"]
        pub type CH7SEL_R = crate::R<bool, CH7SEL_A>;
        impl CH7SEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH7SEL_A {
                match self.bits {
                    false => CH7SEL_A::_0,
                    true => CH7SEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH7SEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH7SEL_A::_1
            }
        }
        #[doc = "Write proxy for field `CH7SEL`"]
        pub struct CH7SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH7SEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH7SEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Do not include the channel in the matching process."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH7SEL_A::_0)
            }
            #[doc = "Include the channel in the matching process."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH7SEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Load Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LDOK_A {
            #[doc = "0: Loading updated values is disabled."]
            _0 = 0,
            #[doc = "1: Loading updated values is enabled."]
            _1 = 1,
        }
        impl From<LDOK_A> for bool {
            #[inline(always)]
            fn from(variant: LDOK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LDOK`"]
        pub type LDOK_R = crate::R<bool, LDOK_A>;
        impl LDOK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LDOK_A {
                match self.bits {
                    false => LDOK_A::_0,
                    true => LDOK_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LDOK_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LDOK_A::_1
            }
        }
        #[doc = "Write proxy for field `LDOK`"]
        pub struct LDOK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LDOK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LDOK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Loading updated values is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(LDOK_A::_0)
            }
            #[doc = "Loading updated values is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(LDOK_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel 0 Select"]
            #[inline(always)]
            pub fn ch0sel(&self) -> CH0SEL_R {
                CH0SEL_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 1 Select"]
            #[inline(always)]
            pub fn ch1sel(&self) -> CH1SEL_R {
                CH1SEL_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel 2 Select"]
            #[inline(always)]
            pub fn ch2sel(&self) -> CH2SEL_R {
                CH2SEL_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel 3 Select"]
            #[inline(always)]
            pub fn ch3sel(&self) -> CH3SEL_R {
                CH3SEL_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 4 Select"]
            #[inline(always)]
            pub fn ch4sel(&self) -> CH4SEL_R {
                CH4SEL_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 5 Select"]
            #[inline(always)]
            pub fn ch5sel(&self) -> CH5SEL_R {
                CH5SEL_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel 6 Select"]
            #[inline(always)]
            pub fn ch6sel(&self) -> CH6SEL_R {
                CH6SEL_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel 7 Select"]
            #[inline(always)]
            pub fn ch7sel(&self) -> CH7SEL_R {
                CH7SEL_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Load Enable"]
            #[inline(always)]
            pub fn ldok(&self) -> LDOK_R {
                LDOK_R::new(((self.bits >> 9) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 0 Select"]
            #[inline(always)]
            pub fn ch0sel(&mut self) -> CH0SEL_W {
                CH0SEL_W { w: self }
            }
            #[doc = "Bit 1 - Channel 1 Select"]
            #[inline(always)]
            pub fn ch1sel(&mut self) -> CH1SEL_W {
                CH1SEL_W { w: self }
            }
            #[doc = "Bit 2 - Channel 2 Select"]
            #[inline(always)]
            pub fn ch2sel(&mut self) -> CH2SEL_W {
                CH2SEL_W { w: self }
            }
            #[doc = "Bit 3 - Channel 3 Select"]
            #[inline(always)]
            pub fn ch3sel(&mut self) -> CH3SEL_W {
                CH3SEL_W { w: self }
            }
            #[doc = "Bit 4 - Channel 4 Select"]
            #[inline(always)]
            pub fn ch4sel(&mut self) -> CH4SEL_W {
                CH4SEL_W { w: self }
            }
            #[doc = "Bit 5 - Channel 5 Select"]
            #[inline(always)]
            pub fn ch5sel(&mut self) -> CH5SEL_W {
                CH5SEL_W { w: self }
            }
            #[doc = "Bit 6 - Channel 6 Select"]
            #[inline(always)]
            pub fn ch6sel(&mut self) -> CH6SEL_W {
                CH6SEL_W { w: self }
            }
            #[doc = "Bit 7 - Channel 7 Select"]
            #[inline(always)]
            pub fn ch7sel(&mut self) -> CH7SEL_W {
                CH7SEL_W { w: self }
            }
            #[doc = "Bit 9 - Load Enable"]
            #[inline(always)]
            pub fn ldok(&mut self) -> LDOK_W {
                LDOK_W { w: self }
            }
        }
    }
}
#[doc = "FlexTimer Module"]
pub struct FTM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FTM2 {}
impl FTM2 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ftm2::RegisterBlock {
        0x4003_a000 as *const _
    }
}
impl Deref for FTM2 {
    type Target = ftm2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*FTM2::ptr() }
    }
}
#[doc = "FlexTimer Module"]
pub mod ftm2 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Status And Control"]
        pub sc: SC,
        #[doc = "0x04 - Counter"]
        pub cnt: CNT,
        #[doc = "0x08 - Modulo"]
        pub mod_: MOD,
        #[doc = "0x0c - Channel (n) Status And Control"]
        pub c0sc: CSC,
        #[doc = "0x10 - Channel (n) Value"]
        pub c0v: CV,
        #[doc = "0x14 - Channel (n) Status And Control"]
        pub c1sc: CSC,
        #[doc = "0x18 - Channel (n) Value"]
        pub c1v: CV,
        #[doc = "0x1c - Channel (n) Status And Control"]
        pub c2sc: CSC,
        #[doc = "0x20 - Channel (n) Value"]
        pub c2v: CV,
        #[doc = "0x24 - Channel (n) Status And Control"]
        pub c3sc: CSC,
        #[doc = "0x28 - Channel (n) Value"]
        pub c3v: CV,
        #[doc = "0x2c - Channel (n) Status And Control"]
        pub c4sc: CSC,
        #[doc = "0x30 - Channel (n) Value"]
        pub c4v: CV,
        #[doc = "0x34 - Channel (n) Status And Control"]
        pub c5sc: CSC,
        #[doc = "0x38 - Channel (n) Value"]
        pub c5v: CV,
        #[doc = "0x3c - Channel (n) Status And Control"]
        pub c6sc: CSC,
        #[doc = "0x40 - Channel (n) Value"]
        pub c6v: CV,
        #[doc = "0x44 - Channel (n) Status And Control"]
        pub c7sc: CSC,
        #[doc = "0x48 - Channel (n) Value"]
        pub c7v: CV,
        #[doc = "0x4c - Counter Initial Value"]
        pub cntin: CNTIN,
        #[doc = "0x50 - Capture And Compare Status"]
        pub status: STATUS,
        #[doc = "0x54 - Features Mode Selection"]
        pub mode: MODE,
        #[doc = "0x58 - Synchronization"]
        pub sync: SYNC,
        #[doc = "0x5c - Initial State For Channels Output"]
        pub outinit: OUTINIT,
        #[doc = "0x60 - Output Mask"]
        pub outmask: OUTMASK,
        #[doc = "0x64 - Function For Linked Channels"]
        pub combine: COMBINE,
        #[doc = "0x68 - Deadtime Insertion Control"]
        pub deadtime: DEADTIME,
        #[doc = "0x6c - FTM External Trigger"]
        pub exttrig: EXTTRIG,
        #[doc = "0x70 - Channels Polarity"]
        pub pol: POL,
        #[doc = "0x74 - Fault Mode Status"]
        pub fms: FMS,
        #[doc = "0x78 - Input Capture Filter Control"]
        pub filter: FILTER,
        #[doc = "0x7c - Fault Control"]
        pub fltctrl: FLTCTRL,
        _reserved32: [u8; 4usize],
        #[doc = "0x84 - Configuration"]
        pub conf: CONF,
        #[doc = "0x88 - FTM Fault Input Polarity"]
        pub fltpol: FLTPOL,
        #[doc = "0x8c - Synchronization Configuration"]
        pub synconf: SYNCONF,
        #[doc = "0x90 - FTM Inverting Control"]
        pub invctrl: INVCTRL,
        #[doc = "0x94 - FTM Software Output Control"]
        pub swoctrl: SWOCTRL,
        #[doc = "0x98 - FTM PWM Load"]
        pub pwmload: PWMLOAD,
    }
    #[doc = "Status And Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sc](sc) module"]
    pub type SC = crate::Reg<u32, _SC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SC;
    #[doc = "`read()` method returns [sc::R](sc::R) reader structure"]
    impl crate::Readable for SC {}
    #[doc = "`write(|w| ..)` method takes [sc::W](sc::W) writer structure"]
    impl crate::Writable for SC {}
    #[doc = "Status And Control"]
    pub mod sc {
        #[doc = "Reader of register SC"]
        pub type R = crate::R<u32, super::SC>;
        #[doc = "Writer for register SC"]
        pub type W = crate::W<u32, super::SC>;
        #[doc = "Register SC `reset()`'s with value 0"]
        impl crate::ResetValue for super::SC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Prescale Factor Selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PS_A {
            #[doc = "0: Divide by 1"]
            _000 = 0,
            #[doc = "1: Divide by 2"]
            _001 = 1,
            #[doc = "2: Divide by 4"]
            _010 = 2,
            #[doc = "3: Divide by 8"]
            _011 = 3,
            #[doc = "4: Divide by 16"]
            _100 = 4,
            #[doc = "5: Divide by 32"]
            _101 = 5,
            #[doc = "6: Divide by 64"]
            _110 = 6,
            #[doc = "7: Divide by 128"]
            _111 = 7,
        }
        impl From<PS_A> for u8 {
            #[inline(always)]
            fn from(variant: PS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PS`"]
        pub type PS_R = crate::R<u8, PS_A>;
        impl PS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PS_A {
                match self.bits {
                    0 => PS_A::_000,
                    1 => PS_A::_001,
                    2 => PS_A::_010,
                    3 => PS_A::_011,
                    4 => PS_A::_100,
                    5 => PS_A::_101,
                    6 => PS_A::_110,
                    7 => PS_A::_111,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_000`"]
            #[inline(always)]
            pub fn is_000(&self) -> bool {
                *self == PS_A::_000
            }
            #[doc = "Checks if the value of the field is `_001`"]
            #[inline(always)]
            pub fn is_001(&self) -> bool {
                *self == PS_A::_001
            }
            #[doc = "Checks if the value of the field is `_010`"]
            #[inline(always)]
            pub fn is_010(&self) -> bool {
                *self == PS_A::_010
            }
            #[doc = "Checks if the value of the field is `_011`"]
            #[inline(always)]
            pub fn is_011(&self) -> bool {
                *self == PS_A::_011
            }
            #[doc = "Checks if the value of the field is `_100`"]
            #[inline(always)]
            pub fn is_100(&self) -> bool {
                *self == PS_A::_100
            }
            #[doc = "Checks if the value of the field is `_101`"]
            #[inline(always)]
            pub fn is_101(&self) -> bool {
                *self == PS_A::_101
            }
            #[doc = "Checks if the value of the field is `_110`"]
            #[inline(always)]
            pub fn is_110(&self) -> bool {
                *self == PS_A::_110
            }
            #[doc = "Checks if the value of the field is `_111`"]
            #[inline(always)]
            pub fn is_111(&self) -> bool {
                *self == PS_A::_111
            }
        }
        #[doc = "Write proxy for field `PS`"]
        pub struct PS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Divide by 1"]
            #[inline(always)]
            pub fn _000(self) -> &'a mut W {
                self.variant(PS_A::_000)
            }
            #[doc = "Divide by 2"]
            #[inline(always)]
            pub fn _001(self) -> &'a mut W {
                self.variant(PS_A::_001)
            }
            #[doc = "Divide by 4"]
            #[inline(always)]
            pub fn _010(self) -> &'a mut W {
                self.variant(PS_A::_010)
            }
            #[doc = "Divide by 8"]
            #[inline(always)]
            pub fn _011(self) -> &'a mut W {
                self.variant(PS_A::_011)
            }
            #[doc = "Divide by 16"]
            #[inline(always)]
            pub fn _100(self) -> &'a mut W {
                self.variant(PS_A::_100)
            }
            #[doc = "Divide by 32"]
            #[inline(always)]
            pub fn _101(self) -> &'a mut W {
                self.variant(PS_A::_101)
            }
            #[doc = "Divide by 64"]
            #[inline(always)]
            pub fn _110(self) -> &'a mut W {
                self.variant(PS_A::_110)
            }
            #[doc = "Divide by 128"]
            #[inline(always)]
            pub fn _111(self) -> &'a mut W {
                self.variant(PS_A::_111)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        #[doc = "Clock Source Selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CLKS_A {
            #[doc = "0: No clock selected. This in effect disables the FTM counter."]
            _00 = 0,
            #[doc = "1: System clock"]
            _01 = 1,
            #[doc = "2: Fixed frequency clock"]
            _10 = 2,
            #[doc = "3: External clock"]
            _11 = 3,
        }
        impl From<CLKS_A> for u8 {
            #[inline(always)]
            fn from(variant: CLKS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CLKS`"]
        pub type CLKS_R = crate::R<u8, CLKS_A>;
        impl CLKS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CLKS_A {
                match self.bits {
                    0 => CLKS_A::_00,
                    1 => CLKS_A::_01,
                    2 => CLKS_A::_10,
                    3 => CLKS_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == CLKS_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == CLKS_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == CLKS_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == CLKS_A::_11
            }
        }
        #[doc = "Write proxy for field `CLKS`"]
        pub struct CLKS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLKS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CLKS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No clock selected. This in effect disables the FTM counter."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(CLKS_A::_00)
            }
            #[doc = "System clock"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(CLKS_A::_01)
            }
            #[doc = "Fixed frequency clock"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(CLKS_A::_10)
            }
            #[doc = "External clock"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(CLKS_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 3)) | (((value as u32) & 0x03) << 3);
                self.w
            }
        }
        #[doc = "Center-Aligned PWM Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CPWMS_A {
            #[doc = "0: FTM counter operates in Up Counting mode."]
            _0 = 0,
            #[doc = "1: FTM counter operates in Up-Down Counting mode."]
            _1 = 1,
        }
        impl From<CPWMS_A> for bool {
            #[inline(always)]
            fn from(variant: CPWMS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CPWMS`"]
        pub type CPWMS_R = crate::R<bool, CPWMS_A>;
        impl CPWMS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CPWMS_A {
                match self.bits {
                    false => CPWMS_A::_0,
                    true => CPWMS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CPWMS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CPWMS_A::_1
            }
        }
        #[doc = "Write proxy for field `CPWMS`"]
        pub struct CPWMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPWMS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CPWMS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FTM counter operates in Up Counting mode."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CPWMS_A::_0)
            }
            #[doc = "FTM counter operates in Up-Down Counting mode."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CPWMS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Timer Overflow Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TOIE_A {
            #[doc = "0: Disable TOF interrupts. Use software polling."]
            _0 = 0,
            #[doc = "1: Enable TOF interrupts. An interrupt is generated when TOF equals one."]
            _1 = 1,
        }
        impl From<TOIE_A> for bool {
            #[inline(always)]
            fn from(variant: TOIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TOIE`"]
        pub type TOIE_R = crate::R<bool, TOIE_A>;
        impl TOIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TOIE_A {
                match self.bits {
                    false => TOIE_A::_0,
                    true => TOIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TOIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TOIE_A::_1
            }
        }
        #[doc = "Write proxy for field `TOIE`"]
        pub struct TOIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TOIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Disable TOF interrupts. Use software polling."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TOIE_A::_0)
            }
            #[doc = "Enable TOF interrupts. An interrupt is generated when TOF equals one."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TOIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Timer Overflow Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TOF_A {
            #[doc = "0: FTM counter has not overflowed."]
            _0 = 0,
            #[doc = "1: FTM counter has overflowed."]
            _1 = 1,
        }
        impl From<TOF_A> for bool {
            #[inline(always)]
            fn from(variant: TOF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TOF`"]
        pub type TOF_R = crate::R<bool, TOF_A>;
        impl TOF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TOF_A {
                match self.bits {
                    false => TOF_A::_0,
                    true => TOF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TOF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TOF_A::_1
            }
        }
        #[doc = "Write proxy for field `TOF`"]
        pub struct TOF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TOF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FTM counter has not overflowed."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TOF_A::_0)
            }
            #[doc = "FTM counter has overflowed."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TOF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Prescale Factor Selection"]
            #[inline(always)]
            pub fn ps(&self) -> PS_R {
                PS_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bits 3:4 - Clock Source Selection"]
            #[inline(always)]
            pub fn clks(&self) -> CLKS_R {
                CLKS_R::new(((self.bits >> 3) & 0x03) as u8)
            }
            #[doc = "Bit 5 - Center-Aligned PWM Select"]
            #[inline(always)]
            pub fn cpwms(&self) -> CPWMS_R {
                CPWMS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Timer Overflow Interrupt Enable"]
            #[inline(always)]
            pub fn toie(&self) -> TOIE_R {
                TOIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Timer Overflow Flag"]
            #[inline(always)]
            pub fn tof(&self) -> TOF_R {
                TOF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Prescale Factor Selection"]
            #[inline(always)]
            pub fn ps(&mut self) -> PS_W {
                PS_W { w: self }
            }
            #[doc = "Bits 3:4 - Clock Source Selection"]
            #[inline(always)]
            pub fn clks(&mut self) -> CLKS_W {
                CLKS_W { w: self }
            }
            #[doc = "Bit 5 - Center-Aligned PWM Select"]
            #[inline(always)]
            pub fn cpwms(&mut self) -> CPWMS_W {
                CPWMS_W { w: self }
            }
            #[doc = "Bit 6 - Timer Overflow Interrupt Enable"]
            #[inline(always)]
            pub fn toie(&mut self) -> TOIE_W {
                TOIE_W { w: self }
            }
            #[doc = "Bit 7 - Timer Overflow Flag"]
            #[inline(always)]
            pub fn tof(&mut self) -> TOF_W {
                TOF_W { w: self }
            }
        }
    }
    #[doc = "Counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "Counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `COUNT`"]
        pub type COUNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `COUNT`"]
        pub struct COUNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COUNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Counter Value"]
            #[inline(always)]
            pub fn count(&self) -> COUNT_R {
                COUNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Counter Value"]
            #[inline(always)]
            pub fn count(&mut self) -> COUNT_W {
                COUNT_W { w: self }
            }
        }
    }
    #[doc = "Modulo\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mod_](mod_) module"]
    pub type MOD = crate::Reg<u32, _MOD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MOD;
    #[doc = "`read()` method returns [mod_::R](mod_::R) reader structure"]
    impl crate::Readable for MOD {}
    #[doc = "`write(|w| ..)` method takes [mod_::W](mod_::W) writer structure"]
    impl crate::Writable for MOD {}
    #[doc = "Modulo"]
    pub mod mod_ {
        #[doc = "Reader of register MOD"]
        pub type R = crate::R<u32, super::MOD>;
        #[doc = "Writer for register MOD"]
        pub type W = crate::W<u32, super::MOD>;
        #[doc = "Register MOD `reset()`'s with value 0"]
        impl crate::ResetValue for super::MOD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MOD`"]
        pub type MOD_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `MOD`"]
        pub struct MOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MOD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Modulo Value"]
            #[inline(always)]
            pub fn mod_(&self) -> MOD_R {
                MOD_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Modulo Value"]
            #[inline(always)]
            pub fn mod_(&mut self) -> MOD_W {
                MOD_W { w: self }
            }
        }
    }
    #[doc = "Channel (n) Status And Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csc](csc) module"]
    pub type CSC = crate::Reg<u32, _CSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CSC;
    #[doc = "`read()` method returns [csc::R](csc::R) reader structure"]
    impl crate::Readable for CSC {}
    #[doc = "`write(|w| ..)` method takes [csc::W](csc::W) writer structure"]
    impl crate::Writable for CSC {}
    #[doc = "Channel (n) Status And Control"]
    pub mod csc {
        #[doc = "Reader of register C%sSC"]
        pub type R = crate::R<u32, super::CSC>;
        #[doc = "Writer for register C%sSC"]
        pub type W = crate::W<u32, super::CSC>;
        #[doc = "Register C%sSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::CSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ELSA`"]
        pub type ELSA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ELSA`"]
        pub struct ELSA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ELSA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `ELSB`"]
        pub type ELSB_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ELSB`"]
        pub struct ELSB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ELSB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `MSA`"]
        pub type MSA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSA`"]
        pub struct MSA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `MSB`"]
        pub type MSB_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSB`"]
        pub struct MSB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Channel Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CHIE_A {
            #[doc = "0: Disable channel interrupts. Use software polling."]
            _0 = 0,
            #[doc = "1: Enable channel interrupts."]
            _1 = 1,
        }
        impl From<CHIE_A> for bool {
            #[inline(always)]
            fn from(variant: CHIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CHIE`"]
        pub type CHIE_R = crate::R<bool, CHIE_A>;
        impl CHIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CHIE_A {
                match self.bits {
                    false => CHIE_A::_0,
                    true => CHIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CHIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CHIE_A::_1
            }
        }
        #[doc = "Write proxy for field `CHIE`"]
        pub struct CHIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Disable channel interrupts. Use software polling."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CHIE_A::_0)
            }
            #[doc = "Enable channel interrupts."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CHIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CHF_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CHF_A> for bool {
            #[inline(always)]
            fn from(variant: CHF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CHF`"]
        pub type CHF_R = crate::R<bool, CHF_A>;
        impl CHF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CHF_A {
                match self.bits {
                    false => CHF_A::_0,
                    true => CHF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CHF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CHF_A::_1
            }
        }
        #[doc = "Write proxy for field `CHF`"]
        pub struct CHF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CHF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CHF_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CHF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - Edge or Level Select"]
            #[inline(always)]
            pub fn elsa(&self) -> ELSA_R {
                ELSA_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Edge or Level Select"]
            #[inline(always)]
            pub fn elsb(&self) -> ELSB_R {
                ELSB_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel Mode Select"]
            #[inline(always)]
            pub fn msa(&self) -> MSA_R {
                MSA_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel Mode Select"]
            #[inline(always)]
            pub fn msb(&self) -> MSB_R {
                MSB_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel Interrupt Enable"]
            #[inline(always)]
            pub fn chie(&self) -> CHIE_R {
                CHIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel Flag"]
            #[inline(always)]
            pub fn chf(&self) -> CHF_R {
                CHF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - Edge or Level Select"]
            #[inline(always)]
            pub fn elsa(&mut self) -> ELSA_W {
                ELSA_W { w: self }
            }
            #[doc = "Bit 3 - Edge or Level Select"]
            #[inline(always)]
            pub fn elsb(&mut self) -> ELSB_W {
                ELSB_W { w: self }
            }
            #[doc = "Bit 4 - Channel Mode Select"]
            #[inline(always)]
            pub fn msa(&mut self) -> MSA_W {
                MSA_W { w: self }
            }
            #[doc = "Bit 5 - Channel Mode Select"]
            #[inline(always)]
            pub fn msb(&mut self) -> MSB_W {
                MSB_W { w: self }
            }
            #[doc = "Bit 6 - Channel Interrupt Enable"]
            #[inline(always)]
            pub fn chie(&mut self) -> CHIE_W {
                CHIE_W { w: self }
            }
            #[doc = "Bit 7 - Channel Flag"]
            #[inline(always)]
            pub fn chf(&mut self) -> CHF_W {
                CHF_W { w: self }
            }
        }
    }
    #[doc = "Channel (n) Value\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cv](cv) module"]
    pub type CV = crate::Reg<u32, _CV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CV;
    #[doc = "`read()` method returns [cv::R](cv::R) reader structure"]
    impl crate::Readable for CV {}
    #[doc = "`write(|w| ..)` method takes [cv::W](cv::W) writer structure"]
    impl crate::Writable for CV {}
    #[doc = "Channel (n) Value"]
    pub mod cv {
        #[doc = "Reader of register C%sV"]
        pub type R = crate::R<u32, super::CV>;
        #[doc = "Writer for register C%sV"]
        pub type W = crate::W<u32, super::CV>;
        #[doc = "Register C%sV `reset()`'s with value 0"]
        impl crate::ResetValue for super::CV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VAL`"]
        pub type VAL_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `VAL`"]
        pub struct VAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Channel Value"]
            #[inline(always)]
            pub fn val(&self) -> VAL_R {
                VAL_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Channel Value"]
            #[inline(always)]
            pub fn val(&mut self) -> VAL_W {
                VAL_W { w: self }
            }
        }
    }
    #[doc = "Counter Initial Value\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cntin](cntin) module"]
    pub type CNTIN = crate::Reg<u32, _CNTIN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNTIN;
    #[doc = "`read()` method returns [cntin::R](cntin::R) reader structure"]
    impl crate::Readable for CNTIN {}
    #[doc = "`write(|w| ..)` method takes [cntin::W](cntin::W) writer structure"]
    impl crate::Writable for CNTIN {}
    #[doc = "Counter Initial Value"]
    pub mod cntin {
        #[doc = "Reader of register CNTIN"]
        pub type R = crate::R<u32, super::CNTIN>;
        #[doc = "Writer for register CNTIN"]
        pub type W = crate::W<u32, super::CNTIN>;
        #[doc = "Register CNTIN `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNTIN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `INIT`"]
        pub type INIT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `INIT`"]
        pub struct INIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INIT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Initial Value Of The FTM Counter"]
            #[inline(always)]
            pub fn init(&self) -> INIT_R {
                INIT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Initial Value Of The FTM Counter"]
            #[inline(always)]
            pub fn init(&mut self) -> INIT_W {
                INIT_W { w: self }
            }
        }
    }
    #[doc = "Capture And Compare Status\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [status](status) module"]
    pub type STATUS = crate::Reg<u32, _STATUS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STATUS;
    #[doc = "`read()` method returns [status::R](status::R) reader structure"]
    impl crate::Readable for STATUS {}
    #[doc = "`write(|w| ..)` method takes [status::W](status::W) writer structure"]
    impl crate::Writable for STATUS {}
    #[doc = "Capture And Compare Status"]
    pub mod status {
        #[doc = "Reader of register STATUS"]
        pub type R = crate::R<u32, super::STATUS>;
        #[doc = "Writer for register STATUS"]
        pub type W = crate::W<u32, super::STATUS>;
        #[doc = "Register STATUS `reset()`'s with value 0"]
        impl crate::ResetValue for super::STATUS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Channel 0 Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH0F_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CH0F_A> for bool {
            #[inline(always)]
            fn from(variant: CH0F_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH0F`"]
        pub type CH0F_R = crate::R<bool, CH0F_A>;
        impl CH0F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH0F_A {
                match self.bits {
                    false => CH0F_A::_0,
                    true => CH0F_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH0F_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH0F_A::_1
            }
        }
        #[doc = "Write proxy for field `CH0F`"]
        pub struct CH0F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH0F_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH0F_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH0F_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Channel 1 Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH1F_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CH1F_A> for bool {
            #[inline(always)]
            fn from(variant: CH1F_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH1F`"]
        pub type CH1F_R = crate::R<bool, CH1F_A>;
        impl CH1F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH1F_A {
                match self.bits {
                    false => CH1F_A::_0,
                    true => CH1F_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH1F_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH1F_A::_1
            }
        }
        #[doc = "Write proxy for field `CH1F`"]
        pub struct CH1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH1F_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH1F_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH1F_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Channel 2 Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH2F_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CH2F_A> for bool {
            #[inline(always)]
            fn from(variant: CH2F_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH2F`"]
        pub type CH2F_R = crate::R<bool, CH2F_A>;
        impl CH2F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH2F_A {
                match self.bits {
                    false => CH2F_A::_0,
                    true => CH2F_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH2F_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH2F_A::_1
            }
        }
        #[doc = "Write proxy for field `CH2F`"]
        pub struct CH2F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH2F_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH2F_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH2F_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel 3 Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH3F_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CH3F_A> for bool {
            #[inline(always)]
            fn from(variant: CH3F_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH3F`"]
        pub type CH3F_R = crate::R<bool, CH3F_A>;
        impl CH3F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH3F_A {
                match self.bits {
                    false => CH3F_A::_0,
                    true => CH3F_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH3F_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH3F_A::_1
            }
        }
        #[doc = "Write proxy for field `CH3F`"]
        pub struct CH3F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH3F_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH3F_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH3F_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Channel 4 Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH4F_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CH4F_A> for bool {
            #[inline(always)]
            fn from(variant: CH4F_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH4F`"]
        pub type CH4F_R = crate::R<bool, CH4F_A>;
        impl CH4F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH4F_A {
                match self.bits {
                    false => CH4F_A::_0,
                    true => CH4F_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH4F_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH4F_A::_1
            }
        }
        #[doc = "Write proxy for field `CH4F`"]
        pub struct CH4F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH4F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH4F_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH4F_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH4F_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Channel 5 Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH5F_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CH5F_A> for bool {
            #[inline(always)]
            fn from(variant: CH5F_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH5F`"]
        pub type CH5F_R = crate::R<bool, CH5F_A>;
        impl CH5F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH5F_A {
                match self.bits {
                    false => CH5F_A::_0,
                    true => CH5F_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH5F_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH5F_A::_1
            }
        }
        #[doc = "Write proxy for field `CH5F`"]
        pub struct CH5F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH5F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH5F_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH5F_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH5F_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Channel 6 Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH6F_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CH6F_A> for bool {
            #[inline(always)]
            fn from(variant: CH6F_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH6F`"]
        pub type CH6F_R = crate::R<bool, CH6F_A>;
        impl CH6F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH6F_A {
                match self.bits {
                    false => CH6F_A::_0,
                    true => CH6F_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH6F_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH6F_A::_1
            }
        }
        #[doc = "Write proxy for field `CH6F`"]
        pub struct CH6F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH6F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH6F_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH6F_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH6F_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel 7 Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH7F_A {
            #[doc = "0: No channel event has occurred."]
            _0 = 0,
            #[doc = "1: A channel event has occurred."]
            _1 = 1,
        }
        impl From<CH7F_A> for bool {
            #[inline(always)]
            fn from(variant: CH7F_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH7F`"]
        pub type CH7F_R = crate::R<bool, CH7F_A>;
        impl CH7F_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH7F_A {
                match self.bits {
                    false => CH7F_A::_0,
                    true => CH7F_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH7F_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH7F_A::_1
            }
        }
        #[doc = "Write proxy for field `CH7F`"]
        pub struct CH7F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH7F_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH7F_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel event has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH7F_A::_0)
            }
            #[doc = "A channel event has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH7F_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel 0 Flag"]
            #[inline(always)]
            pub fn ch0f(&self) -> CH0F_R {
                CH0F_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 1 Flag"]
            #[inline(always)]
            pub fn ch1f(&self) -> CH1F_R {
                CH1F_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel 2 Flag"]
            #[inline(always)]
            pub fn ch2f(&self) -> CH2F_R {
                CH2F_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel 3 Flag"]
            #[inline(always)]
            pub fn ch3f(&self) -> CH3F_R {
                CH3F_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 4 Flag"]
            #[inline(always)]
            pub fn ch4f(&self) -> CH4F_R {
                CH4F_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 5 Flag"]
            #[inline(always)]
            pub fn ch5f(&self) -> CH5F_R {
                CH5F_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel 6 Flag"]
            #[inline(always)]
            pub fn ch6f(&self) -> CH6F_R {
                CH6F_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel 7 Flag"]
            #[inline(always)]
            pub fn ch7f(&self) -> CH7F_R {
                CH7F_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 0 Flag"]
            #[inline(always)]
            pub fn ch0f(&mut self) -> CH0F_W {
                CH0F_W { w: self }
            }
            #[doc = "Bit 1 - Channel 1 Flag"]
            #[inline(always)]
            pub fn ch1f(&mut self) -> CH1F_W {
                CH1F_W { w: self }
            }
            #[doc = "Bit 2 - Channel 2 Flag"]
            #[inline(always)]
            pub fn ch2f(&mut self) -> CH2F_W {
                CH2F_W { w: self }
            }
            #[doc = "Bit 3 - Channel 3 Flag"]
            #[inline(always)]
            pub fn ch3f(&mut self) -> CH3F_W {
                CH3F_W { w: self }
            }
            #[doc = "Bit 4 - Channel 4 Flag"]
            #[inline(always)]
            pub fn ch4f(&mut self) -> CH4F_W {
                CH4F_W { w: self }
            }
            #[doc = "Bit 5 - Channel 5 Flag"]
            #[inline(always)]
            pub fn ch5f(&mut self) -> CH5F_W {
                CH5F_W { w: self }
            }
            #[doc = "Bit 6 - Channel 6 Flag"]
            #[inline(always)]
            pub fn ch6f(&mut self) -> CH6F_W {
                CH6F_W { w: self }
            }
            #[doc = "Bit 7 - Channel 7 Flag"]
            #[inline(always)]
            pub fn ch7f(&mut self) -> CH7F_W {
                CH7F_W { w: self }
            }
        }
    }
    #[doc = "Features Mode Selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mode](mode) module"]
    pub type MODE = crate::Reg<u32, _MODE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MODE;
    #[doc = "`read()` method returns [mode::R](mode::R) reader structure"]
    impl crate::Readable for MODE {}
    #[doc = "`write(|w| ..)` method takes [mode::W](mode::W) writer structure"]
    impl crate::Writable for MODE {}
    #[doc = "Features Mode Selection"]
    pub mod mode {
        #[doc = "Reader of register MODE"]
        pub type R = crate::R<u32, super::MODE>;
        #[doc = "Writer for register MODE"]
        pub type W = crate::W<u32, super::MODE>;
        #[doc = "Register MODE `reset()`'s with value 0x04"]
        impl crate::ResetValue for super::MODE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x04
            }
        }
        #[doc = "FTM Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FTMEN_A {
            #[doc = "0: Only the TPM-compatible registers (first set of registers) can be used without any restriction. Do not use the FTM-specific registers."]
            _0 = 0,
            #[doc = "1: All registers including the FTM-specific registers (second set of registers) are available for use with no restrictions."]
            _1 = 1,
        }
        impl From<FTMEN_A> for bool {
            #[inline(always)]
            fn from(variant: FTMEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FTMEN`"]
        pub type FTMEN_R = crate::R<bool, FTMEN_A>;
        impl FTMEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FTMEN_A {
                match self.bits {
                    false => FTMEN_A::_0,
                    true => FTMEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FTMEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FTMEN_A::_1
            }
        }
        #[doc = "Write proxy for field `FTMEN`"]
        pub struct FTMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FTMEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FTMEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Only the TPM-compatible registers (first set of registers) can be used without any restriction. Do not use the FTM-specific registers."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FTMEN_A::_0)
            }
            #[doc = "All registers including the FTM-specific registers (second set of registers) are available for use with no restrictions."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FTMEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `INIT`"]
        pub type INIT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `INIT`"]
        pub struct INIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INIT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write Protection Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WPDIS_A {
            #[doc = "0: Write protection is enabled."]
            _0 = 0,
            #[doc = "1: Write protection is disabled."]
            _1 = 1,
        }
        impl From<WPDIS_A> for bool {
            #[inline(always)]
            fn from(variant: WPDIS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WPDIS`"]
        pub type WPDIS_R = crate::R<bool, WPDIS_A>;
        impl WPDIS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WPDIS_A {
                match self.bits {
                    false => WPDIS_A::_0,
                    true => WPDIS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == WPDIS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == WPDIS_A::_1
            }
        }
        #[doc = "Write proxy for field `WPDIS`"]
        pub struct WPDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WPDIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WPDIS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Write protection is enabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(WPDIS_A::_0)
            }
            #[doc = "Write protection is disabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(WPDIS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "PWM Synchronization Mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PWMSYNC_A {
            #[doc = "0: No restrictions. Software and hardware triggers can be used by MOD, CnV, OUTMASK, and FTM counter synchronization."]
            _0 = 0,
            #[doc = "1: Software trigger can only be used by MOD and CnV synchronization, and hardware triggers can only be used by OUTMASK and FTM counter synchronization."]
            _1 = 1,
        }
        impl From<PWMSYNC_A> for bool {
            #[inline(always)]
            fn from(variant: PWMSYNC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PWMSYNC`"]
        pub type PWMSYNC_R = crate::R<bool, PWMSYNC_A>;
        impl PWMSYNC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PWMSYNC_A {
                match self.bits {
                    false => PWMSYNC_A::_0,
                    true => PWMSYNC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PWMSYNC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PWMSYNC_A::_1
            }
        }
        #[doc = "Write proxy for field `PWMSYNC`"]
        pub struct PWMSYNC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWMSYNC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PWMSYNC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No restrictions. Software and hardware triggers can be used by MOD, CnV, OUTMASK, and FTM counter synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PWMSYNC_A::_0)
            }
            #[doc = "Software trigger can only be used by MOD and CnV synchronization, and hardware triggers can only be used by OUTMASK and FTM counter synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PWMSYNC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Capture Test Mode Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CAPTEST_A {
            #[doc = "0: Capture test mode is disabled."]
            _0 = 0,
            #[doc = "1: Capture test mode is enabled."]
            _1 = 1,
        }
        impl From<CAPTEST_A> for bool {
            #[inline(always)]
            fn from(variant: CAPTEST_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CAPTEST`"]
        pub type CAPTEST_R = crate::R<bool, CAPTEST_A>;
        impl CAPTEST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CAPTEST_A {
                match self.bits {
                    false => CAPTEST_A::_0,
                    true => CAPTEST_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CAPTEST_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CAPTEST_A::_1
            }
        }
        #[doc = "Write proxy for field `CAPTEST`"]
        pub struct CAPTEST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAPTEST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CAPTEST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Capture test mode is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CAPTEST_A::_0)
            }
            #[doc = "Capture test mode is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CAPTEST_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Fault Control Mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FAULTM_A {
            #[doc = "0: Fault control is disabled for all channels."]
            _00 = 0,
            #[doc = "1: Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected mode is the manual fault clearing."]
            _01 = 1,
            #[doc = "2: Fault control is enabled for all channels, and the selected mode is the manual fault clearing."]
            _10 = 2,
            #[doc = "3: Fault control is enabled for all channels, and the selected mode is the automatic fault clearing."]
            _11 = 3,
        }
        impl From<FAULTM_A> for u8 {
            #[inline(always)]
            fn from(variant: FAULTM_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FAULTM`"]
        pub type FAULTM_R = crate::R<u8, FAULTM_A>;
        impl FAULTM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTM_A {
                match self.bits {
                    0 => FAULTM_A::_00,
                    1 => FAULTM_A::_01,
                    2 => FAULTM_A::_10,
                    3 => FAULTM_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == FAULTM_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == FAULTM_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == FAULTM_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == FAULTM_A::_11
            }
        }
        #[doc = "Write proxy for field `FAULTM`"]
        pub struct FAULTM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTM_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Fault control is disabled for all channels."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(FAULTM_A::_00)
            }
            #[doc = "Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected mode is the manual fault clearing."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(FAULTM_A::_01)
            }
            #[doc = "Fault control is enabled for all channels, and the selected mode is the manual fault clearing."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(FAULTM_A::_10)
            }
            #[doc = "Fault control is enabled for all channels, and the selected mode is the automatic fault clearing."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(FAULTM_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 5)) | (((value as u32) & 0x03) << 5);
                self.w
            }
        }
        #[doc = "Fault Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTIE_A {
            #[doc = "0: Fault control interrupt is disabled."]
            _0 = 0,
            #[doc = "1: Fault control interrupt is enabled."]
            _1 = 1,
        }
        impl From<FAULTIE_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTIE`"]
        pub type FAULTIE_R = crate::R<bool, FAULTIE_A>;
        impl FAULTIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTIE_A {
                match self.bits {
                    false => FAULTIE_A::_0,
                    true => FAULTIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTIE_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTIE`"]
        pub struct FAULTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault control interrupt is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTIE_A::_0)
            }
            #[doc = "Fault control interrupt is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - FTM Enable"]
            #[inline(always)]
            pub fn ftmen(&self) -> FTMEN_R {
                FTMEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Initialize The Channels Output"]
            #[inline(always)]
            pub fn init(&self) -> INIT_R {
                INIT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Write Protection Disable"]
            #[inline(always)]
            pub fn wpdis(&self) -> WPDIS_R {
                WPDIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - PWM Synchronization Mode"]
            #[inline(always)]
            pub fn pwmsync(&self) -> PWMSYNC_R {
                PWMSYNC_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture Test Mode Enable"]
            #[inline(always)]
            pub fn captest(&self) -> CAPTEST_R {
                CAPTEST_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 5:6 - Fault Control Mode"]
            #[inline(always)]
            pub fn faultm(&self) -> FAULTM_R {
                FAULTM_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Fault Interrupt Enable"]
            #[inline(always)]
            pub fn faultie(&self) -> FAULTIE_R {
                FAULTIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - FTM Enable"]
            #[inline(always)]
            pub fn ftmen(&mut self) -> FTMEN_W {
                FTMEN_W { w: self }
            }
            #[doc = "Bit 1 - Initialize The Channels Output"]
            #[inline(always)]
            pub fn init(&mut self) -> INIT_W {
                INIT_W { w: self }
            }
            #[doc = "Bit 2 - Write Protection Disable"]
            #[inline(always)]
            pub fn wpdis(&mut self) -> WPDIS_W {
                WPDIS_W { w: self }
            }
            #[doc = "Bit 3 - PWM Synchronization Mode"]
            #[inline(always)]
            pub fn pwmsync(&mut self) -> PWMSYNC_W {
                PWMSYNC_W { w: self }
            }
            #[doc = "Bit 4 - Capture Test Mode Enable"]
            #[inline(always)]
            pub fn captest(&mut self) -> CAPTEST_W {
                CAPTEST_W { w: self }
            }
            #[doc = "Bits 5:6 - Fault Control Mode"]
            #[inline(always)]
            pub fn faultm(&mut self) -> FAULTM_W {
                FAULTM_W { w: self }
            }
            #[doc = "Bit 7 - Fault Interrupt Enable"]
            #[inline(always)]
            pub fn faultie(&mut self) -> FAULTIE_W {
                FAULTIE_W { w: self }
            }
        }
    }
    #[doc = "Synchronization\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sync](sync) module"]
    pub type SYNC = crate::Reg<u32, _SYNC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SYNC;
    #[doc = "`read()` method returns [sync::R](sync::R) reader structure"]
    impl crate::Readable for SYNC {}
    #[doc = "`write(|w| ..)` method takes [sync::W](sync::W) writer structure"]
    impl crate::Writable for SYNC {}
    #[doc = "Synchronization"]
    pub mod sync {
        #[doc = "Reader of register SYNC"]
        pub type R = crate::R<u32, super::SYNC>;
        #[doc = "Writer for register SYNC"]
        pub type W = crate::W<u32, super::SYNC>;
        #[doc = "Register SYNC `reset()`'s with value 0"]
        impl crate::ResetValue for super::SYNC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Minimum Loading Point Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CNTMIN_A {
            #[doc = "0: The minimum loading point is disabled."]
            _0 = 0,
            #[doc = "1: The minimum loading point is enabled."]
            _1 = 1,
        }
        impl From<CNTMIN_A> for bool {
            #[inline(always)]
            fn from(variant: CNTMIN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CNTMIN`"]
        pub type CNTMIN_R = crate::R<bool, CNTMIN_A>;
        impl CNTMIN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CNTMIN_A {
                match self.bits {
                    false => CNTMIN_A::_0,
                    true => CNTMIN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CNTMIN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CNTMIN_A::_1
            }
        }
        #[doc = "Write proxy for field `CNTMIN`"]
        pub struct CNTMIN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNTMIN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CNTMIN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The minimum loading point is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CNTMIN_A::_0)
            }
            #[doc = "The minimum loading point is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CNTMIN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Maximum Loading Point Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CNTMAX_A {
            #[doc = "0: The maximum loading point is disabled."]
            _0 = 0,
            #[doc = "1: The maximum loading point is enabled."]
            _1 = 1,
        }
        impl From<CNTMAX_A> for bool {
            #[inline(always)]
            fn from(variant: CNTMAX_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CNTMAX`"]
        pub type CNTMAX_R = crate::R<bool, CNTMAX_A>;
        impl CNTMAX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CNTMAX_A {
                match self.bits {
                    false => CNTMAX_A::_0,
                    true => CNTMAX_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CNTMAX_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CNTMAX_A::_1
            }
        }
        #[doc = "Write proxy for field `CNTMAX`"]
        pub struct CNTMAX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNTMAX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CNTMAX_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The maximum loading point is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CNTMAX_A::_0)
            }
            #[doc = "The maximum loading point is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CNTMAX_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "FTM Counter Reinitialization By Synchronization (FTM counter synchronization)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum REINIT_A {
            #[doc = "0: FTM counter continues to count normally."]
            _0 = 0,
            #[doc = "1: FTM counter is updated with its initial value when the selected trigger is detected."]
            _1 = 1,
        }
        impl From<REINIT_A> for bool {
            #[inline(always)]
            fn from(variant: REINIT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `REINIT`"]
        pub type REINIT_R = crate::R<bool, REINIT_A>;
        impl REINIT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> REINIT_A {
                match self.bits {
                    false => REINIT_A::_0,
                    true => REINIT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == REINIT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == REINIT_A::_1
            }
        }
        #[doc = "Write proxy for field `REINIT`"]
        pub struct REINIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REINIT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: REINIT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FTM counter continues to count normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(REINIT_A::_0)
            }
            #[doc = "FTM counter is updated with its initial value when the selected trigger is detected."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(REINIT_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Output Mask Synchronization\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SYNCHOM_A {
            #[doc = "0: OUTMASK register is updated with the value of its buffer in all rising edges of the system clock."]
            _0 = 0,
            #[doc = "1: OUTMASK register is updated with the value of its buffer only by the PWM synchronization."]
            _1 = 1,
        }
        impl From<SYNCHOM_A> for bool {
            #[inline(always)]
            fn from(variant: SYNCHOM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SYNCHOM`"]
        pub type SYNCHOM_R = crate::R<bool, SYNCHOM_A>;
        impl SYNCHOM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SYNCHOM_A {
                match self.bits {
                    false => SYNCHOM_A::_0,
                    true => SYNCHOM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SYNCHOM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SYNCHOM_A::_1
            }
        }
        #[doc = "Write proxy for field `SYNCHOM`"]
        pub struct SYNCHOM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNCHOM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SYNCHOM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "OUTMASK register is updated with the value of its buffer in all rising edges of the system clock."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SYNCHOM_A::_0)
            }
            #[doc = "OUTMASK register is updated with the value of its buffer only by the PWM synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SYNCHOM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "PWM Synchronization Hardware Trigger 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TRIG0_A {
            #[doc = "0: Trigger is disabled."]
            _0 = 0,
            #[doc = "1: Trigger is enabled."]
            _1 = 1,
        }
        impl From<TRIG0_A> for bool {
            #[inline(always)]
            fn from(variant: TRIG0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TRIG0`"]
        pub type TRIG0_R = crate::R<bool, TRIG0_A>;
        impl TRIG0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TRIG0_A {
                match self.bits {
                    false => TRIG0_A::_0,
                    true => TRIG0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TRIG0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TRIG0_A::_1
            }
        }
        #[doc = "Write proxy for field `TRIG0`"]
        pub struct TRIG0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIG0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TRIG0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TRIG0_A::_0)
            }
            #[doc = "Trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TRIG0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "PWM Synchronization Hardware Trigger 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TRIG1_A {
            #[doc = "0: Trigger is disabled."]
            _0 = 0,
            #[doc = "1: Trigger is enabled."]
            _1 = 1,
        }
        impl From<TRIG1_A> for bool {
            #[inline(always)]
            fn from(variant: TRIG1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TRIG1`"]
        pub type TRIG1_R = crate::R<bool, TRIG1_A>;
        impl TRIG1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TRIG1_A {
                match self.bits {
                    false => TRIG1_A::_0,
                    true => TRIG1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TRIG1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TRIG1_A::_1
            }
        }
        #[doc = "Write proxy for field `TRIG1`"]
        pub struct TRIG1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIG1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TRIG1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TRIG1_A::_0)
            }
            #[doc = "Trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TRIG1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "PWM Synchronization Hardware Trigger 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TRIG2_A {
            #[doc = "0: Trigger is disabled."]
            _0 = 0,
            #[doc = "1: Trigger is enabled."]
            _1 = 1,
        }
        impl From<TRIG2_A> for bool {
            #[inline(always)]
            fn from(variant: TRIG2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TRIG2`"]
        pub type TRIG2_R = crate::R<bool, TRIG2_A>;
        impl TRIG2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TRIG2_A {
                match self.bits {
                    false => TRIG2_A::_0,
                    true => TRIG2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TRIG2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TRIG2_A::_1
            }
        }
        #[doc = "Write proxy for field `TRIG2`"]
        pub struct TRIG2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIG2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TRIG2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TRIG2_A::_0)
            }
            #[doc = "Trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TRIG2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "PWM Synchronization Software Trigger\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWSYNC_A {
            #[doc = "0: Software trigger is not selected."]
            _0 = 0,
            #[doc = "1: Software trigger is selected."]
            _1 = 1,
        }
        impl From<SWSYNC_A> for bool {
            #[inline(always)]
            fn from(variant: SWSYNC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWSYNC`"]
        pub type SWSYNC_R = crate::R<bool, SWSYNC_A>;
        impl SWSYNC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWSYNC_A {
                match self.bits {
                    false => SWSYNC_A::_0,
                    true => SWSYNC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SWSYNC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SWSYNC_A::_1
            }
        }
        #[doc = "Write proxy for field `SWSYNC`"]
        pub struct SWSYNC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWSYNC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWSYNC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Software trigger is not selected."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SWSYNC_A::_0)
            }
            #[doc = "Software trigger is selected."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SWSYNC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Minimum Loading Point Enable"]
            #[inline(always)]
            pub fn cntmin(&self) -> CNTMIN_R {
                CNTMIN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Maximum Loading Point Enable"]
            #[inline(always)]
            pub fn cntmax(&self) -> CNTMAX_R {
                CNTMAX_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - FTM Counter Reinitialization By Synchronization (FTM counter synchronization)"]
            #[inline(always)]
            pub fn reinit(&self) -> REINIT_R {
                REINIT_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Output Mask Synchronization"]
            #[inline(always)]
            pub fn synchom(&self) -> SYNCHOM_R {
                SYNCHOM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - PWM Synchronization Hardware Trigger 0"]
            #[inline(always)]
            pub fn trig0(&self) -> TRIG0_R {
                TRIG0_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - PWM Synchronization Hardware Trigger 1"]
            #[inline(always)]
            pub fn trig1(&self) -> TRIG1_R {
                TRIG1_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - PWM Synchronization Hardware Trigger 2"]
            #[inline(always)]
            pub fn trig2(&self) -> TRIG2_R {
                TRIG2_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - PWM Synchronization Software Trigger"]
            #[inline(always)]
            pub fn swsync(&self) -> SWSYNC_R {
                SWSYNC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Minimum Loading Point Enable"]
            #[inline(always)]
            pub fn cntmin(&mut self) -> CNTMIN_W {
                CNTMIN_W { w: self }
            }
            #[doc = "Bit 1 - Maximum Loading Point Enable"]
            #[inline(always)]
            pub fn cntmax(&mut self) -> CNTMAX_W {
                CNTMAX_W { w: self }
            }
            #[doc = "Bit 2 - FTM Counter Reinitialization By Synchronization (FTM counter synchronization)"]
            #[inline(always)]
            pub fn reinit(&mut self) -> REINIT_W {
                REINIT_W { w: self }
            }
            #[doc = "Bit 3 - Output Mask Synchronization"]
            #[inline(always)]
            pub fn synchom(&mut self) -> SYNCHOM_W {
                SYNCHOM_W { w: self }
            }
            #[doc = "Bit 4 - PWM Synchronization Hardware Trigger 0"]
            #[inline(always)]
            pub fn trig0(&mut self) -> TRIG0_W {
                TRIG0_W { w: self }
            }
            #[doc = "Bit 5 - PWM Synchronization Hardware Trigger 1"]
            #[inline(always)]
            pub fn trig1(&mut self) -> TRIG1_W {
                TRIG1_W { w: self }
            }
            #[doc = "Bit 6 - PWM Synchronization Hardware Trigger 2"]
            #[inline(always)]
            pub fn trig2(&mut self) -> TRIG2_W {
                TRIG2_W { w: self }
            }
            #[doc = "Bit 7 - PWM Synchronization Software Trigger"]
            #[inline(always)]
            pub fn swsync(&mut self) -> SWSYNC_W {
                SWSYNC_W { w: self }
            }
        }
    }
    #[doc = "Initial State For Channels Output\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [outinit](outinit) module"]
    pub type OUTINIT = crate::Reg<u32, _OUTINIT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OUTINIT;
    #[doc = "`read()` method returns [outinit::R](outinit::R) reader structure"]
    impl crate::Readable for OUTINIT {}
    #[doc = "`write(|w| ..)` method takes [outinit::W](outinit::W) writer structure"]
    impl crate::Writable for OUTINIT {}
    #[doc = "Initial State For Channels Output"]
    pub mod outinit {
        #[doc = "Reader of register OUTINIT"]
        pub type R = crate::R<u32, super::OUTINIT>;
        #[doc = "Writer for register OUTINIT"]
        pub type W = crate::W<u32, super::OUTINIT>;
        #[doc = "Register OUTINIT `reset()`'s with value 0"]
        impl crate::ResetValue for super::OUTINIT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Channel 0 Output Initialization Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH0OI_A {
            #[doc = "0: The initialization value is 0."]
            _0 = 0,
            #[doc = "1: The initialization value is 1."]
            _1 = 1,
        }
        impl From<CH0OI_A> for bool {
            #[inline(always)]
            fn from(variant: CH0OI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH0OI`"]
        pub type CH0OI_R = crate::R<bool, CH0OI_A>;
        impl CH0OI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH0OI_A {
                match self.bits {
                    false => CH0OI_A::_0,
                    true => CH0OI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH0OI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH0OI_A::_1
            }
        }
        #[doc = "Write proxy for field `CH0OI`"]
        pub struct CH0OI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0OI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH0OI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The initialization value is 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH0OI_A::_0)
            }
            #[doc = "The initialization value is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH0OI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Channel 1 Output Initialization Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH1OI_A {
            #[doc = "0: The initialization value is 0."]
            _0 = 0,
            #[doc = "1: The initialization value is 1."]
            _1 = 1,
        }
        impl From<CH1OI_A> for bool {
            #[inline(always)]
            fn from(variant: CH1OI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH1OI`"]
        pub type CH1OI_R = crate::R<bool, CH1OI_A>;
        impl CH1OI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH1OI_A {
                match self.bits {
                    false => CH1OI_A::_0,
                    true => CH1OI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH1OI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH1OI_A::_1
            }
        }
        #[doc = "Write proxy for field `CH1OI`"]
        pub struct CH1OI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1OI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH1OI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The initialization value is 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH1OI_A::_0)
            }
            #[doc = "The initialization value is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH1OI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Channel 2 Output Initialization Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH2OI_A {
            #[doc = "0: The initialization value is 0."]
            _0 = 0,
            #[doc = "1: The initialization value is 1."]
            _1 = 1,
        }
        impl From<CH2OI_A> for bool {
            #[inline(always)]
            fn from(variant: CH2OI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH2OI`"]
        pub type CH2OI_R = crate::R<bool, CH2OI_A>;
        impl CH2OI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH2OI_A {
                match self.bits {
                    false => CH2OI_A::_0,
                    true => CH2OI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH2OI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH2OI_A::_1
            }
        }
        #[doc = "Write proxy for field `CH2OI`"]
        pub struct CH2OI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2OI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH2OI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The initialization value is 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH2OI_A::_0)
            }
            #[doc = "The initialization value is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH2OI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel 3 Output Initialization Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH3OI_A {
            #[doc = "0: The initialization value is 0."]
            _0 = 0,
            #[doc = "1: The initialization value is 1."]
            _1 = 1,
        }
        impl From<CH3OI_A> for bool {
            #[inline(always)]
            fn from(variant: CH3OI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH3OI`"]
        pub type CH3OI_R = crate::R<bool, CH3OI_A>;
        impl CH3OI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH3OI_A {
                match self.bits {
                    false => CH3OI_A::_0,
                    true => CH3OI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH3OI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH3OI_A::_1
            }
        }
        #[doc = "Write proxy for field `CH3OI`"]
        pub struct CH3OI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3OI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH3OI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The initialization value is 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH3OI_A::_0)
            }
            #[doc = "The initialization value is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH3OI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Channel 4 Output Initialization Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH4OI_A {
            #[doc = "0: The initialization value is 0."]
            _0 = 0,
            #[doc = "1: The initialization value is 1."]
            _1 = 1,
        }
        impl From<CH4OI_A> for bool {
            #[inline(always)]
            fn from(variant: CH4OI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH4OI`"]
        pub type CH4OI_R = crate::R<bool, CH4OI_A>;
        impl CH4OI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH4OI_A {
                match self.bits {
                    false => CH4OI_A::_0,
                    true => CH4OI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH4OI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH4OI_A::_1
            }
        }
        #[doc = "Write proxy for field `CH4OI`"]
        pub struct CH4OI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH4OI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH4OI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The initialization value is 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH4OI_A::_0)
            }
            #[doc = "The initialization value is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH4OI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Channel 5 Output Initialization Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH5OI_A {
            #[doc = "0: The initialization value is 0."]
            _0 = 0,
            #[doc = "1: The initialization value is 1."]
            _1 = 1,
        }
        impl From<CH5OI_A> for bool {
            #[inline(always)]
            fn from(variant: CH5OI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH5OI`"]
        pub type CH5OI_R = crate::R<bool, CH5OI_A>;
        impl CH5OI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH5OI_A {
                match self.bits {
                    false => CH5OI_A::_0,
                    true => CH5OI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH5OI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH5OI_A::_1
            }
        }
        #[doc = "Write proxy for field `CH5OI`"]
        pub struct CH5OI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH5OI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH5OI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The initialization value is 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH5OI_A::_0)
            }
            #[doc = "The initialization value is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH5OI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Channel 6 Output Initialization Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH6OI_A {
            #[doc = "0: The initialization value is 0."]
            _0 = 0,
            #[doc = "1: The initialization value is 1."]
            _1 = 1,
        }
        impl From<CH6OI_A> for bool {
            #[inline(always)]
            fn from(variant: CH6OI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH6OI`"]
        pub type CH6OI_R = crate::R<bool, CH6OI_A>;
        impl CH6OI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH6OI_A {
                match self.bits {
                    false => CH6OI_A::_0,
                    true => CH6OI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH6OI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH6OI_A::_1
            }
        }
        #[doc = "Write proxy for field `CH6OI`"]
        pub struct CH6OI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH6OI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH6OI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The initialization value is 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH6OI_A::_0)
            }
            #[doc = "The initialization value is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH6OI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel 7 Output Initialization Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH7OI_A {
            #[doc = "0: The initialization value is 0."]
            _0 = 0,
            #[doc = "1: The initialization value is 1."]
            _1 = 1,
        }
        impl From<CH7OI_A> for bool {
            #[inline(always)]
            fn from(variant: CH7OI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH7OI`"]
        pub type CH7OI_R = crate::R<bool, CH7OI_A>;
        impl CH7OI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH7OI_A {
                match self.bits {
                    false => CH7OI_A::_0,
                    true => CH7OI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH7OI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH7OI_A::_1
            }
        }
        #[doc = "Write proxy for field `CH7OI`"]
        pub struct CH7OI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH7OI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH7OI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The initialization value is 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH7OI_A::_0)
            }
            #[doc = "The initialization value is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH7OI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel 0 Output Initialization Value"]
            #[inline(always)]
            pub fn ch0oi(&self) -> CH0OI_R {
                CH0OI_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 1 Output Initialization Value"]
            #[inline(always)]
            pub fn ch1oi(&self) -> CH1OI_R {
                CH1OI_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel 2 Output Initialization Value"]
            #[inline(always)]
            pub fn ch2oi(&self) -> CH2OI_R {
                CH2OI_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel 3 Output Initialization Value"]
            #[inline(always)]
            pub fn ch3oi(&self) -> CH3OI_R {
                CH3OI_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 4 Output Initialization Value"]
            #[inline(always)]
            pub fn ch4oi(&self) -> CH4OI_R {
                CH4OI_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 5 Output Initialization Value"]
            #[inline(always)]
            pub fn ch5oi(&self) -> CH5OI_R {
                CH5OI_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel 6 Output Initialization Value"]
            #[inline(always)]
            pub fn ch6oi(&self) -> CH6OI_R {
                CH6OI_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel 7 Output Initialization Value"]
            #[inline(always)]
            pub fn ch7oi(&self) -> CH7OI_R {
                CH7OI_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 0 Output Initialization Value"]
            #[inline(always)]
            pub fn ch0oi(&mut self) -> CH0OI_W {
                CH0OI_W { w: self }
            }
            #[doc = "Bit 1 - Channel 1 Output Initialization Value"]
            #[inline(always)]
            pub fn ch1oi(&mut self) -> CH1OI_W {
                CH1OI_W { w: self }
            }
            #[doc = "Bit 2 - Channel 2 Output Initialization Value"]
            #[inline(always)]
            pub fn ch2oi(&mut self) -> CH2OI_W {
                CH2OI_W { w: self }
            }
            #[doc = "Bit 3 - Channel 3 Output Initialization Value"]
            #[inline(always)]
            pub fn ch3oi(&mut self) -> CH3OI_W {
                CH3OI_W { w: self }
            }
            #[doc = "Bit 4 - Channel 4 Output Initialization Value"]
            #[inline(always)]
            pub fn ch4oi(&mut self) -> CH4OI_W {
                CH4OI_W { w: self }
            }
            #[doc = "Bit 5 - Channel 5 Output Initialization Value"]
            #[inline(always)]
            pub fn ch5oi(&mut self) -> CH5OI_W {
                CH5OI_W { w: self }
            }
            #[doc = "Bit 6 - Channel 6 Output Initialization Value"]
            #[inline(always)]
            pub fn ch6oi(&mut self) -> CH6OI_W {
                CH6OI_W { w: self }
            }
            #[doc = "Bit 7 - Channel 7 Output Initialization Value"]
            #[inline(always)]
            pub fn ch7oi(&mut self) -> CH7OI_W {
                CH7OI_W { w: self }
            }
        }
    }
    #[doc = "Output Mask\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [outmask](outmask) module"]
    pub type OUTMASK = crate::Reg<u32, _OUTMASK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OUTMASK;
    #[doc = "`read()` method returns [outmask::R](outmask::R) reader structure"]
    impl crate::Readable for OUTMASK {}
    #[doc = "`write(|w| ..)` method takes [outmask::W](outmask::W) writer structure"]
    impl crate::Writable for OUTMASK {}
    #[doc = "Output Mask"]
    pub mod outmask {
        #[doc = "Reader of register OUTMASK"]
        pub type R = crate::R<u32, super::OUTMASK>;
        #[doc = "Writer for register OUTMASK"]
        pub type W = crate::W<u32, super::OUTMASK>;
        #[doc = "Register OUTMASK `reset()`'s with value 0"]
        impl crate::ResetValue for super::OUTMASK {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Channel 0 Output Mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH0OM_A {
            #[doc = "0: Channel output is not masked. It continues to operate normally."]
            _0 = 0,
            #[doc = "1: Channel output is masked. It is forced to its inactive state."]
            _1 = 1,
        }
        impl From<CH0OM_A> for bool {
            #[inline(always)]
            fn from(variant: CH0OM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH0OM`"]
        pub type CH0OM_R = crate::R<bool, CH0OM_A>;
        impl CH0OM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH0OM_A {
                match self.bits {
                    false => CH0OM_A::_0,
                    true => CH0OM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH0OM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH0OM_A::_1
            }
        }
        #[doc = "Write proxy for field `CH0OM`"]
        pub struct CH0OM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0OM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH0OM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channel output is not masked. It continues to operate normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH0OM_A::_0)
            }
            #[doc = "Channel output is masked. It is forced to its inactive state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH0OM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Channel 1 Output Mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH1OM_A {
            #[doc = "0: Channel output is not masked. It continues to operate normally."]
            _0 = 0,
            #[doc = "1: Channel output is masked. It is forced to its inactive state."]
            _1 = 1,
        }
        impl From<CH1OM_A> for bool {
            #[inline(always)]
            fn from(variant: CH1OM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH1OM`"]
        pub type CH1OM_R = crate::R<bool, CH1OM_A>;
        impl CH1OM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH1OM_A {
                match self.bits {
                    false => CH1OM_A::_0,
                    true => CH1OM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH1OM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH1OM_A::_1
            }
        }
        #[doc = "Write proxy for field `CH1OM`"]
        pub struct CH1OM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1OM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH1OM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channel output is not masked. It continues to operate normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH1OM_A::_0)
            }
            #[doc = "Channel output is masked. It is forced to its inactive state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH1OM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Channel 2 Output Mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH2OM_A {
            #[doc = "0: Channel output is not masked. It continues to operate normally."]
            _0 = 0,
            #[doc = "1: Channel output is masked. It is forced to its inactive state."]
            _1 = 1,
        }
        impl From<CH2OM_A> for bool {
            #[inline(always)]
            fn from(variant: CH2OM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH2OM`"]
        pub type CH2OM_R = crate::R<bool, CH2OM_A>;
        impl CH2OM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH2OM_A {
                match self.bits {
                    false => CH2OM_A::_0,
                    true => CH2OM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH2OM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH2OM_A::_1
            }
        }
        #[doc = "Write proxy for field `CH2OM`"]
        pub struct CH2OM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2OM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH2OM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channel output is not masked. It continues to operate normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH2OM_A::_0)
            }
            #[doc = "Channel output is masked. It is forced to its inactive state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH2OM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel 3 Output Mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH3OM_A {
            #[doc = "0: Channel output is not masked. It continues to operate normally."]
            _0 = 0,
            #[doc = "1: Channel output is masked. It is forced to its inactive state."]
            _1 = 1,
        }
        impl From<CH3OM_A> for bool {
            #[inline(always)]
            fn from(variant: CH3OM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH3OM`"]
        pub type CH3OM_R = crate::R<bool, CH3OM_A>;
        impl CH3OM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH3OM_A {
                match self.bits {
                    false => CH3OM_A::_0,
                    true => CH3OM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH3OM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH3OM_A::_1
            }
        }
        #[doc = "Write proxy for field `CH3OM`"]
        pub struct CH3OM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3OM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH3OM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channel output is not masked. It continues to operate normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH3OM_A::_0)
            }
            #[doc = "Channel output is masked. It is forced to its inactive state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH3OM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Channel 4 Output Mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH4OM_A {
            #[doc = "0: Channel output is not masked. It continues to operate normally."]
            _0 = 0,
            #[doc = "1: Channel output is masked. It is forced to its inactive state."]
            _1 = 1,
        }
        impl From<CH4OM_A> for bool {
            #[inline(always)]
            fn from(variant: CH4OM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH4OM`"]
        pub type CH4OM_R = crate::R<bool, CH4OM_A>;
        impl CH4OM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH4OM_A {
                match self.bits {
                    false => CH4OM_A::_0,
                    true => CH4OM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH4OM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH4OM_A::_1
            }
        }
        #[doc = "Write proxy for field `CH4OM`"]
        pub struct CH4OM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH4OM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH4OM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channel output is not masked. It continues to operate normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH4OM_A::_0)
            }
            #[doc = "Channel output is masked. It is forced to its inactive state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH4OM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Channel 5 Output Mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH5OM_A {
            #[doc = "0: Channel output is not masked. It continues to operate normally."]
            _0 = 0,
            #[doc = "1: Channel output is masked. It is forced to its inactive state."]
            _1 = 1,
        }
        impl From<CH5OM_A> for bool {
            #[inline(always)]
            fn from(variant: CH5OM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH5OM`"]
        pub type CH5OM_R = crate::R<bool, CH5OM_A>;
        impl CH5OM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH5OM_A {
                match self.bits {
                    false => CH5OM_A::_0,
                    true => CH5OM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH5OM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH5OM_A::_1
            }
        }
        #[doc = "Write proxy for field `CH5OM`"]
        pub struct CH5OM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH5OM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH5OM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channel output is not masked. It continues to operate normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH5OM_A::_0)
            }
            #[doc = "Channel output is masked. It is forced to its inactive state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH5OM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Channel 6 Output Mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH6OM_A {
            #[doc = "0: Channel output is not masked. It continues to operate normally."]
            _0 = 0,
            #[doc = "1: Channel output is masked. It is forced to its inactive state."]
            _1 = 1,
        }
        impl From<CH6OM_A> for bool {
            #[inline(always)]
            fn from(variant: CH6OM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH6OM`"]
        pub type CH6OM_R = crate::R<bool, CH6OM_A>;
        impl CH6OM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH6OM_A {
                match self.bits {
                    false => CH6OM_A::_0,
                    true => CH6OM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH6OM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH6OM_A::_1
            }
        }
        #[doc = "Write proxy for field `CH6OM`"]
        pub struct CH6OM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH6OM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH6OM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channel output is not masked. It continues to operate normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH6OM_A::_0)
            }
            #[doc = "Channel output is masked. It is forced to its inactive state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH6OM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel 7 Output Mask\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH7OM_A {
            #[doc = "0: Channel output is not masked. It continues to operate normally."]
            _0 = 0,
            #[doc = "1: Channel output is masked. It is forced to its inactive state."]
            _1 = 1,
        }
        impl From<CH7OM_A> for bool {
            #[inline(always)]
            fn from(variant: CH7OM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH7OM`"]
        pub type CH7OM_R = crate::R<bool, CH7OM_A>;
        impl CH7OM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH7OM_A {
                match self.bits {
                    false => CH7OM_A::_0,
                    true => CH7OM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH7OM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH7OM_A::_1
            }
        }
        #[doc = "Write proxy for field `CH7OM`"]
        pub struct CH7OM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH7OM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH7OM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channel output is not masked. It continues to operate normally."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH7OM_A::_0)
            }
            #[doc = "Channel output is masked. It is forced to its inactive state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH7OM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel 0 Output Mask"]
            #[inline(always)]
            pub fn ch0om(&self) -> CH0OM_R {
                CH0OM_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 1 Output Mask"]
            #[inline(always)]
            pub fn ch1om(&self) -> CH1OM_R {
                CH1OM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel 2 Output Mask"]
            #[inline(always)]
            pub fn ch2om(&self) -> CH2OM_R {
                CH2OM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel 3 Output Mask"]
            #[inline(always)]
            pub fn ch3om(&self) -> CH3OM_R {
                CH3OM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 4 Output Mask"]
            #[inline(always)]
            pub fn ch4om(&self) -> CH4OM_R {
                CH4OM_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 5 Output Mask"]
            #[inline(always)]
            pub fn ch5om(&self) -> CH5OM_R {
                CH5OM_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel 6 Output Mask"]
            #[inline(always)]
            pub fn ch6om(&self) -> CH6OM_R {
                CH6OM_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel 7 Output Mask"]
            #[inline(always)]
            pub fn ch7om(&self) -> CH7OM_R {
                CH7OM_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 0 Output Mask"]
            #[inline(always)]
            pub fn ch0om(&mut self) -> CH0OM_W {
                CH0OM_W { w: self }
            }
            #[doc = "Bit 1 - Channel 1 Output Mask"]
            #[inline(always)]
            pub fn ch1om(&mut self) -> CH1OM_W {
                CH1OM_W { w: self }
            }
            #[doc = "Bit 2 - Channel 2 Output Mask"]
            #[inline(always)]
            pub fn ch2om(&mut self) -> CH2OM_W {
                CH2OM_W { w: self }
            }
            #[doc = "Bit 3 - Channel 3 Output Mask"]
            #[inline(always)]
            pub fn ch3om(&mut self) -> CH3OM_W {
                CH3OM_W { w: self }
            }
            #[doc = "Bit 4 - Channel 4 Output Mask"]
            #[inline(always)]
            pub fn ch4om(&mut self) -> CH4OM_W {
                CH4OM_W { w: self }
            }
            #[doc = "Bit 5 - Channel 5 Output Mask"]
            #[inline(always)]
            pub fn ch5om(&mut self) -> CH5OM_W {
                CH5OM_W { w: self }
            }
            #[doc = "Bit 6 - Channel 6 Output Mask"]
            #[inline(always)]
            pub fn ch6om(&mut self) -> CH6OM_W {
                CH6OM_W { w: self }
            }
            #[doc = "Bit 7 - Channel 7 Output Mask"]
            #[inline(always)]
            pub fn ch7om(&mut self) -> CH7OM_W {
                CH7OM_W { w: self }
            }
        }
    }
    #[doc = "Function For Linked Channels\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [combine](combine) module"]
    pub type COMBINE = crate::Reg<u32, _COMBINE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _COMBINE;
    #[doc = "`read()` method returns [combine::R](combine::R) reader structure"]
    impl crate::Readable for COMBINE {}
    #[doc = "`write(|w| ..)` method takes [combine::W](combine::W) writer structure"]
    impl crate::Writable for COMBINE {}
    #[doc = "Function For Linked Channels"]
    pub mod combine {
        #[doc = "Reader of register COMBINE"]
        pub type R = crate::R<u32, super::COMBINE>;
        #[doc = "Writer for register COMBINE"]
        pub type W = crate::W<u32, super::COMBINE>;
        #[doc = "Register COMBINE `reset()`'s with value 0"]
        impl crate::ResetValue for super::COMBINE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Combine Channels For n = 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMBINE0_A {
            #[doc = "0: Channels (n) and (n+1) are independent."]
            _0 = 0,
            #[doc = "1: Channels (n) and (n+1) are combined."]
            _1 = 1,
        }
        impl From<COMBINE0_A> for bool {
            #[inline(always)]
            fn from(variant: COMBINE0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMBINE0`"]
        pub type COMBINE0_R = crate::R<bool, COMBINE0_A>;
        impl COMBINE0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMBINE0_A {
                match self.bits {
                    false => COMBINE0_A::_0,
                    true => COMBINE0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COMBINE0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COMBINE0_A::_1
            }
        }
        #[doc = "Write proxy for field `COMBINE0`"]
        pub struct COMBINE0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMBINE0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMBINE0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channels (n) and (n+1) are independent."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(COMBINE0_A::_0)
            }
            #[doc = "Channels (n) and (n+1) are combined."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(COMBINE0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Complement Of Channel (n) For n = 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMP0_A {
            #[doc = "0: The channel (n+1) output is the same as the channel (n) output."]
            _0 = 0,
            #[doc = "1: The channel (n+1) output is the complement of the channel (n) output."]
            _1 = 1,
        }
        impl From<COMP0_A> for bool {
            #[inline(always)]
            fn from(variant: COMP0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMP0`"]
        pub type COMP0_R = crate::R<bool, COMP0_A>;
        impl COMP0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMP0_A {
                match self.bits {
                    false => COMP0_A::_0,
                    true => COMP0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COMP0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COMP0_A::_1
            }
        }
        #[doc = "Write proxy for field `COMP0`"]
        pub struct COMP0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMP0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMP0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel (n+1) output is the same as the channel (n) output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(COMP0_A::_0)
            }
            #[doc = "The channel (n+1) output is the complement of the channel (n) output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(COMP0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Dual Edge Capture Mode Enable For n = 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DECAPEN0_A {
            #[doc = "0: The Dual Edge Capture mode in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The Dual Edge Capture mode in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<DECAPEN0_A> for bool {
            #[inline(always)]
            fn from(variant: DECAPEN0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DECAPEN0`"]
        pub type DECAPEN0_R = crate::R<bool, DECAPEN0_A>;
        impl DECAPEN0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DECAPEN0_A {
                match self.bits {
                    false => DECAPEN0_A::_0,
                    true => DECAPEN0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DECAPEN0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DECAPEN0_A::_1
            }
        }
        #[doc = "Write proxy for field `DECAPEN0`"]
        pub struct DECAPEN0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DECAPEN0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DECAPEN0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The Dual Edge Capture mode in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DECAPEN0_A::_0)
            }
            #[doc = "The Dual Edge Capture mode in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DECAPEN0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Dual Edge Capture Mode Captures For n = 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DECAP0_A {
            #[doc = "0: The dual edge captures are inactive."]
            _0 = 0,
            #[doc = "1: The dual edge captures are active."]
            _1 = 1,
        }
        impl From<DECAP0_A> for bool {
            #[inline(always)]
            fn from(variant: DECAP0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DECAP0`"]
        pub type DECAP0_R = crate::R<bool, DECAP0_A>;
        impl DECAP0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DECAP0_A {
                match self.bits {
                    false => DECAP0_A::_0,
                    true => DECAP0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DECAP0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DECAP0_A::_1
            }
        }
        #[doc = "Write proxy for field `DECAP0`"]
        pub struct DECAP0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DECAP0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DECAP0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The dual edge captures are inactive."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DECAP0_A::_0)
            }
            #[doc = "The dual edge captures are active."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DECAP0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Deadtime Enable For n = 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DTEN0_A {
            #[doc = "0: The deadtime insertion in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The deadtime insertion in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<DTEN0_A> for bool {
            #[inline(always)]
            fn from(variant: DTEN0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DTEN0`"]
        pub type DTEN0_R = crate::R<bool, DTEN0_A>;
        impl DTEN0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DTEN0_A {
                match self.bits {
                    false => DTEN0_A::_0,
                    true => DTEN0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DTEN0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DTEN0_A::_1
            }
        }
        #[doc = "Write proxy for field `DTEN0`"]
        pub struct DTEN0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTEN0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DTEN0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The deadtime insertion in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DTEN0_A::_0)
            }
            #[doc = "The deadtime insertion in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DTEN0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Synchronization Enable For n = 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SYNCEN0_A {
            #[doc = "0: The PWM synchronization in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The PWM synchronization in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<SYNCEN0_A> for bool {
            #[inline(always)]
            fn from(variant: SYNCEN0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SYNCEN0`"]
        pub type SYNCEN0_R = crate::R<bool, SYNCEN0_A>;
        impl SYNCEN0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SYNCEN0_A {
                match self.bits {
                    false => SYNCEN0_A::_0,
                    true => SYNCEN0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SYNCEN0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SYNCEN0_A::_1
            }
        }
        #[doc = "Write proxy for field `SYNCEN0`"]
        pub struct SYNCEN0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNCEN0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SYNCEN0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The PWM synchronization in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SYNCEN0_A::_0)
            }
            #[doc = "The PWM synchronization in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SYNCEN0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Fault Control Enable For n = 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTEN0_A {
            #[doc = "0: The fault control in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The fault control in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<FAULTEN0_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTEN0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTEN0`"]
        pub type FAULTEN0_R = crate::R<bool, FAULTEN0_A>;
        impl FAULTEN0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTEN0_A {
                match self.bits {
                    false => FAULTEN0_A::_0,
                    true => FAULTEN0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTEN0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTEN0_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTEN0`"]
        pub struct FAULTEN0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTEN0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTEN0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The fault control in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTEN0_A::_0)
            }
            #[doc = "The fault control in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTEN0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Combine Channels For n = 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMBINE1_A {
            #[doc = "0: Channels (n) and (n+1) are independent."]
            _0 = 0,
            #[doc = "1: Channels (n) and (n+1) are combined."]
            _1 = 1,
        }
        impl From<COMBINE1_A> for bool {
            #[inline(always)]
            fn from(variant: COMBINE1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMBINE1`"]
        pub type COMBINE1_R = crate::R<bool, COMBINE1_A>;
        impl COMBINE1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMBINE1_A {
                match self.bits {
                    false => COMBINE1_A::_0,
                    true => COMBINE1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COMBINE1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COMBINE1_A::_1
            }
        }
        #[doc = "Write proxy for field `COMBINE1`"]
        pub struct COMBINE1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMBINE1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMBINE1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channels (n) and (n+1) are independent."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(COMBINE1_A::_0)
            }
            #[doc = "Channels (n) and (n+1) are combined."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(COMBINE1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Complement Of Channel (n) For n = 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMP1_A {
            #[doc = "0: The channel (n+1) output is the same as the channel (n) output."]
            _0 = 0,
            #[doc = "1: The channel (n+1) output is the complement of the channel (n) output."]
            _1 = 1,
        }
        impl From<COMP1_A> for bool {
            #[inline(always)]
            fn from(variant: COMP1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMP1`"]
        pub type COMP1_R = crate::R<bool, COMP1_A>;
        impl COMP1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMP1_A {
                match self.bits {
                    false => COMP1_A::_0,
                    true => COMP1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COMP1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COMP1_A::_1
            }
        }
        #[doc = "Write proxy for field `COMP1`"]
        pub struct COMP1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMP1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMP1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel (n+1) output is the same as the channel (n) output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(COMP1_A::_0)
            }
            #[doc = "The channel (n+1) output is the complement of the channel (n) output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(COMP1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Dual Edge Capture Mode Enable For n = 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DECAPEN1_A {
            #[doc = "0: The Dual Edge Capture mode in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The Dual Edge Capture mode in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<DECAPEN1_A> for bool {
            #[inline(always)]
            fn from(variant: DECAPEN1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DECAPEN1`"]
        pub type DECAPEN1_R = crate::R<bool, DECAPEN1_A>;
        impl DECAPEN1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DECAPEN1_A {
                match self.bits {
                    false => DECAPEN1_A::_0,
                    true => DECAPEN1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DECAPEN1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DECAPEN1_A::_1
            }
        }
        #[doc = "Write proxy for field `DECAPEN1`"]
        pub struct DECAPEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DECAPEN1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DECAPEN1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The Dual Edge Capture mode in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DECAPEN1_A::_0)
            }
            #[doc = "The Dual Edge Capture mode in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DECAPEN1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Dual Edge Capture Mode Captures For n = 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DECAP1_A {
            #[doc = "0: The dual edge captures are inactive."]
            _0 = 0,
            #[doc = "1: The dual edge captures are active."]
            _1 = 1,
        }
        impl From<DECAP1_A> for bool {
            #[inline(always)]
            fn from(variant: DECAP1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DECAP1`"]
        pub type DECAP1_R = crate::R<bool, DECAP1_A>;
        impl DECAP1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DECAP1_A {
                match self.bits {
                    false => DECAP1_A::_0,
                    true => DECAP1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DECAP1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DECAP1_A::_1
            }
        }
        #[doc = "Write proxy for field `DECAP1`"]
        pub struct DECAP1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DECAP1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DECAP1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The dual edge captures are inactive."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DECAP1_A::_0)
            }
            #[doc = "The dual edge captures are active."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DECAP1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Deadtime Enable For n = 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DTEN1_A {
            #[doc = "0: The deadtime insertion in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The deadtime insertion in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<DTEN1_A> for bool {
            #[inline(always)]
            fn from(variant: DTEN1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DTEN1`"]
        pub type DTEN1_R = crate::R<bool, DTEN1_A>;
        impl DTEN1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DTEN1_A {
                match self.bits {
                    false => DTEN1_A::_0,
                    true => DTEN1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DTEN1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DTEN1_A::_1
            }
        }
        #[doc = "Write proxy for field `DTEN1`"]
        pub struct DTEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTEN1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DTEN1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The deadtime insertion in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DTEN1_A::_0)
            }
            #[doc = "The deadtime insertion in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DTEN1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Synchronization Enable For n = 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SYNCEN1_A {
            #[doc = "0: The PWM synchronization in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The PWM synchronization in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<SYNCEN1_A> for bool {
            #[inline(always)]
            fn from(variant: SYNCEN1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SYNCEN1`"]
        pub type SYNCEN1_R = crate::R<bool, SYNCEN1_A>;
        impl SYNCEN1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SYNCEN1_A {
                match self.bits {
                    false => SYNCEN1_A::_0,
                    true => SYNCEN1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SYNCEN1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SYNCEN1_A::_1
            }
        }
        #[doc = "Write proxy for field `SYNCEN1`"]
        pub struct SYNCEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNCEN1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SYNCEN1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The PWM synchronization in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SYNCEN1_A::_0)
            }
            #[doc = "The PWM synchronization in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SYNCEN1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Fault Control Enable For n = 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTEN1_A {
            #[doc = "0: The fault control in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The fault control in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<FAULTEN1_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTEN1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTEN1`"]
        pub type FAULTEN1_R = crate::R<bool, FAULTEN1_A>;
        impl FAULTEN1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTEN1_A {
                match self.bits {
                    false => FAULTEN1_A::_0,
                    true => FAULTEN1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTEN1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTEN1_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTEN1`"]
        pub struct FAULTEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTEN1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTEN1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The fault control in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTEN1_A::_0)
            }
            #[doc = "The fault control in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTEN1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Combine Channels For n = 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMBINE2_A {
            #[doc = "0: Channels (n) and (n+1) are independent."]
            _0 = 0,
            #[doc = "1: Channels (n) and (n+1) are combined."]
            _1 = 1,
        }
        impl From<COMBINE2_A> for bool {
            #[inline(always)]
            fn from(variant: COMBINE2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMBINE2`"]
        pub type COMBINE2_R = crate::R<bool, COMBINE2_A>;
        impl COMBINE2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMBINE2_A {
                match self.bits {
                    false => COMBINE2_A::_0,
                    true => COMBINE2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COMBINE2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COMBINE2_A::_1
            }
        }
        #[doc = "Write proxy for field `COMBINE2`"]
        pub struct COMBINE2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMBINE2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMBINE2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channels (n) and (n+1) are independent."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(COMBINE2_A::_0)
            }
            #[doc = "Channels (n) and (n+1) are combined."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(COMBINE2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Complement Of Channel (n) For n = 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMP2_A {
            #[doc = "0: The channel (n+1) output is the same as the channel (n) output."]
            _0 = 0,
            #[doc = "1: The channel (n+1) output is the complement of the channel (n) output."]
            _1 = 1,
        }
        impl From<COMP2_A> for bool {
            #[inline(always)]
            fn from(variant: COMP2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMP2`"]
        pub type COMP2_R = crate::R<bool, COMP2_A>;
        impl COMP2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMP2_A {
                match self.bits {
                    false => COMP2_A::_0,
                    true => COMP2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COMP2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COMP2_A::_1
            }
        }
        #[doc = "Write proxy for field `COMP2`"]
        pub struct COMP2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMP2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMP2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel (n+1) output is the same as the channel (n) output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(COMP2_A::_0)
            }
            #[doc = "The channel (n+1) output is the complement of the channel (n) output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(COMP2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Dual Edge Capture Mode Enable For n = 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DECAPEN2_A {
            #[doc = "0: The Dual Edge Capture mode in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The Dual Edge Capture mode in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<DECAPEN2_A> for bool {
            #[inline(always)]
            fn from(variant: DECAPEN2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DECAPEN2`"]
        pub type DECAPEN2_R = crate::R<bool, DECAPEN2_A>;
        impl DECAPEN2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DECAPEN2_A {
                match self.bits {
                    false => DECAPEN2_A::_0,
                    true => DECAPEN2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DECAPEN2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DECAPEN2_A::_1
            }
        }
        #[doc = "Write proxy for field `DECAPEN2`"]
        pub struct DECAPEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DECAPEN2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DECAPEN2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The Dual Edge Capture mode in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DECAPEN2_A::_0)
            }
            #[doc = "The Dual Edge Capture mode in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DECAPEN2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Dual Edge Capture Mode Captures For n = 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DECAP2_A {
            #[doc = "0: The dual edge captures are inactive."]
            _0 = 0,
            #[doc = "1: The dual edge captures are active."]
            _1 = 1,
        }
        impl From<DECAP2_A> for bool {
            #[inline(always)]
            fn from(variant: DECAP2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DECAP2`"]
        pub type DECAP2_R = crate::R<bool, DECAP2_A>;
        impl DECAP2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DECAP2_A {
                match self.bits {
                    false => DECAP2_A::_0,
                    true => DECAP2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DECAP2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DECAP2_A::_1
            }
        }
        #[doc = "Write proxy for field `DECAP2`"]
        pub struct DECAP2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DECAP2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DECAP2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The dual edge captures are inactive."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DECAP2_A::_0)
            }
            #[doc = "The dual edge captures are active."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DECAP2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Deadtime Enable For n = 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DTEN2_A {
            #[doc = "0: The deadtime insertion in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The deadtime insertion in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<DTEN2_A> for bool {
            #[inline(always)]
            fn from(variant: DTEN2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DTEN2`"]
        pub type DTEN2_R = crate::R<bool, DTEN2_A>;
        impl DTEN2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DTEN2_A {
                match self.bits {
                    false => DTEN2_A::_0,
                    true => DTEN2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DTEN2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DTEN2_A::_1
            }
        }
        #[doc = "Write proxy for field `DTEN2`"]
        pub struct DTEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTEN2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DTEN2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The deadtime insertion in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DTEN2_A::_0)
            }
            #[doc = "The deadtime insertion in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DTEN2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Synchronization Enable For n = 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SYNCEN2_A {
            #[doc = "0: The PWM synchronization in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The PWM synchronization in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<SYNCEN2_A> for bool {
            #[inline(always)]
            fn from(variant: SYNCEN2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SYNCEN2`"]
        pub type SYNCEN2_R = crate::R<bool, SYNCEN2_A>;
        impl SYNCEN2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SYNCEN2_A {
                match self.bits {
                    false => SYNCEN2_A::_0,
                    true => SYNCEN2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SYNCEN2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SYNCEN2_A::_1
            }
        }
        #[doc = "Write proxy for field `SYNCEN2`"]
        pub struct SYNCEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNCEN2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SYNCEN2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The PWM synchronization in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SYNCEN2_A::_0)
            }
            #[doc = "The PWM synchronization in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SYNCEN2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Fault Control Enable For n = 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTEN2_A {
            #[doc = "0: The fault control in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The fault control in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<FAULTEN2_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTEN2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTEN2`"]
        pub type FAULTEN2_R = crate::R<bool, FAULTEN2_A>;
        impl FAULTEN2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTEN2_A {
                match self.bits {
                    false => FAULTEN2_A::_0,
                    true => FAULTEN2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTEN2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTEN2_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTEN2`"]
        pub struct FAULTEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTEN2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTEN2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The fault control in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTEN2_A::_0)
            }
            #[doc = "The fault control in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTEN2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Combine Channels For n = 6\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMBINE3_A {
            #[doc = "0: Channels (n) and (n+1) are independent."]
            _0 = 0,
            #[doc = "1: Channels (n) and (n+1) are combined."]
            _1 = 1,
        }
        impl From<COMBINE3_A> for bool {
            #[inline(always)]
            fn from(variant: COMBINE3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMBINE3`"]
        pub type COMBINE3_R = crate::R<bool, COMBINE3_A>;
        impl COMBINE3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMBINE3_A {
                match self.bits {
                    false => COMBINE3_A::_0,
                    true => COMBINE3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COMBINE3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COMBINE3_A::_1
            }
        }
        #[doc = "Write proxy for field `COMBINE3`"]
        pub struct COMBINE3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMBINE3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMBINE3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Channels (n) and (n+1) are independent."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(COMBINE3_A::_0)
            }
            #[doc = "Channels (n) and (n+1) are combined."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(COMBINE3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Complement Of Channel (n) for n = 6\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COMP3_A {
            #[doc = "0: The channel (n+1) output is the same as the channel (n) output."]
            _0 = 0,
            #[doc = "1: The channel (n+1) output is the complement of the channel (n) output."]
            _1 = 1,
        }
        impl From<COMP3_A> for bool {
            #[inline(always)]
            fn from(variant: COMP3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COMP3`"]
        pub type COMP3_R = crate::R<bool, COMP3_A>;
        impl COMP3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COMP3_A {
                match self.bits {
                    false => COMP3_A::_0,
                    true => COMP3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COMP3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COMP3_A::_1
            }
        }
        #[doc = "Write proxy for field `COMP3`"]
        pub struct COMP3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMP3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: COMP3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel (n+1) output is the same as the channel (n) output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(COMP3_A::_0)
            }
            #[doc = "The channel (n+1) output is the complement of the channel (n) output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(COMP3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Dual Edge Capture Mode Enable For n = 6\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DECAPEN3_A {
            #[doc = "0: The Dual Edge Capture mode in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The Dual Edge Capture mode in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<DECAPEN3_A> for bool {
            #[inline(always)]
            fn from(variant: DECAPEN3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DECAPEN3`"]
        pub type DECAPEN3_R = crate::R<bool, DECAPEN3_A>;
        impl DECAPEN3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DECAPEN3_A {
                match self.bits {
                    false => DECAPEN3_A::_0,
                    true => DECAPEN3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DECAPEN3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DECAPEN3_A::_1
            }
        }
        #[doc = "Write proxy for field `DECAPEN3`"]
        pub struct DECAPEN3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DECAPEN3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DECAPEN3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The Dual Edge Capture mode in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DECAPEN3_A::_0)
            }
            #[doc = "The Dual Edge Capture mode in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DECAPEN3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Dual Edge Capture Mode Captures For n = 6\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DECAP3_A {
            #[doc = "0: The dual edge captures are inactive."]
            _0 = 0,
            #[doc = "1: The dual edge captures are active."]
            _1 = 1,
        }
        impl From<DECAP3_A> for bool {
            #[inline(always)]
            fn from(variant: DECAP3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DECAP3`"]
        pub type DECAP3_R = crate::R<bool, DECAP3_A>;
        impl DECAP3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DECAP3_A {
                match self.bits {
                    false => DECAP3_A::_0,
                    true => DECAP3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DECAP3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DECAP3_A::_1
            }
        }
        #[doc = "Write proxy for field `DECAP3`"]
        pub struct DECAP3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DECAP3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DECAP3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The dual edge captures are inactive."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DECAP3_A::_0)
            }
            #[doc = "The dual edge captures are active."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DECAP3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Deadtime Enable For n = 6\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DTEN3_A {
            #[doc = "0: The deadtime insertion in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The deadtime insertion in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<DTEN3_A> for bool {
            #[inline(always)]
            fn from(variant: DTEN3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DTEN3`"]
        pub type DTEN3_R = crate::R<bool, DTEN3_A>;
        impl DTEN3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DTEN3_A {
                match self.bits {
                    false => DTEN3_A::_0,
                    true => DTEN3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DTEN3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DTEN3_A::_1
            }
        }
        #[doc = "Write proxy for field `DTEN3`"]
        pub struct DTEN3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTEN3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DTEN3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The deadtime insertion in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DTEN3_A::_0)
            }
            #[doc = "The deadtime insertion in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DTEN3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Synchronization Enable For n = 6\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SYNCEN3_A {
            #[doc = "0: The PWM synchronization in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The PWM synchronization in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<SYNCEN3_A> for bool {
            #[inline(always)]
            fn from(variant: SYNCEN3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SYNCEN3`"]
        pub type SYNCEN3_R = crate::R<bool, SYNCEN3_A>;
        impl SYNCEN3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SYNCEN3_A {
                match self.bits {
                    false => SYNCEN3_A::_0,
                    true => SYNCEN3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SYNCEN3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SYNCEN3_A::_1
            }
        }
        #[doc = "Write proxy for field `SYNCEN3`"]
        pub struct SYNCEN3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNCEN3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SYNCEN3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The PWM synchronization in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SYNCEN3_A::_0)
            }
            #[doc = "The PWM synchronization in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SYNCEN3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Fault Control Enable For n = 6\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTEN3_A {
            #[doc = "0: The fault control in this pair of channels is disabled."]
            _0 = 0,
            #[doc = "1: The fault control in this pair of channels is enabled."]
            _1 = 1,
        }
        impl From<FAULTEN3_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTEN3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTEN3`"]
        pub type FAULTEN3_R = crate::R<bool, FAULTEN3_A>;
        impl FAULTEN3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTEN3_A {
                match self.bits {
                    false => FAULTEN3_A::_0,
                    true => FAULTEN3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTEN3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTEN3_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTEN3`"]
        pub struct FAULTEN3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTEN3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTEN3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The fault control in this pair of channels is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTEN3_A::_0)
            }
            #[doc = "The fault control in this pair of channels is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTEN3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Combine Channels For n = 0"]
            #[inline(always)]
            pub fn combine0(&self) -> COMBINE0_R {
                COMBINE0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Complement Of Channel (n) For n = 0"]
            #[inline(always)]
            pub fn comp0(&self) -> COMP0_R {
                COMP0_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Dual Edge Capture Mode Enable For n = 0"]
            #[inline(always)]
            pub fn decapen0(&self) -> DECAPEN0_R {
                DECAPEN0_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Dual Edge Capture Mode Captures For n = 0"]
            #[inline(always)]
            pub fn decap0(&self) -> DECAP0_R {
                DECAP0_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Deadtime Enable For n = 0"]
            #[inline(always)]
            pub fn dten0(&self) -> DTEN0_R {
                DTEN0_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Synchronization Enable For n = 0"]
            #[inline(always)]
            pub fn syncen0(&self) -> SYNCEN0_R {
                SYNCEN0_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Fault Control Enable For n = 0"]
            #[inline(always)]
            pub fn faulten0(&self) -> FAULTEN0_R {
                FAULTEN0_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Combine Channels For n = 2"]
            #[inline(always)]
            pub fn combine1(&self) -> COMBINE1_R {
                COMBINE1_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Complement Of Channel (n) For n = 2"]
            #[inline(always)]
            pub fn comp1(&self) -> COMP1_R {
                COMP1_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Dual Edge Capture Mode Enable For n = 2"]
            #[inline(always)]
            pub fn decapen1(&self) -> DECAPEN1_R {
                DECAPEN1_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Dual Edge Capture Mode Captures For n = 2"]
            #[inline(always)]
            pub fn decap1(&self) -> DECAP1_R {
                DECAP1_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Deadtime Enable For n = 2"]
            #[inline(always)]
            pub fn dten1(&self) -> DTEN1_R {
                DTEN1_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Synchronization Enable For n = 2"]
            #[inline(always)]
            pub fn syncen1(&self) -> SYNCEN1_R {
                SYNCEN1_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Fault Control Enable For n = 2"]
            #[inline(always)]
            pub fn faulten1(&self) -> FAULTEN1_R {
                FAULTEN1_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Combine Channels For n = 4"]
            #[inline(always)]
            pub fn combine2(&self) -> COMBINE2_R {
                COMBINE2_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Complement Of Channel (n) For n = 4"]
            #[inline(always)]
            pub fn comp2(&self) -> COMP2_R {
                COMP2_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Dual Edge Capture Mode Enable For n = 4"]
            #[inline(always)]
            pub fn decapen2(&self) -> DECAPEN2_R {
                DECAPEN2_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Dual Edge Capture Mode Captures For n = 4"]
            #[inline(always)]
            pub fn decap2(&self) -> DECAP2_R {
                DECAP2_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Deadtime Enable For n = 4"]
            #[inline(always)]
            pub fn dten2(&self) -> DTEN2_R {
                DTEN2_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Synchronization Enable For n = 4"]
            #[inline(always)]
            pub fn syncen2(&self) -> SYNCEN2_R {
                SYNCEN2_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Fault Control Enable For n = 4"]
            #[inline(always)]
            pub fn faulten2(&self) -> FAULTEN2_R {
                FAULTEN2_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Combine Channels For n = 6"]
            #[inline(always)]
            pub fn combine3(&self) -> COMBINE3_R {
                COMBINE3_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Complement Of Channel (n) for n = 6"]
            #[inline(always)]
            pub fn comp3(&self) -> COMP3_R {
                COMP3_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Dual Edge Capture Mode Enable For n = 6"]
            #[inline(always)]
            pub fn decapen3(&self) -> DECAPEN3_R {
                DECAPEN3_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Dual Edge Capture Mode Captures For n = 6"]
            #[inline(always)]
            pub fn decap3(&self) -> DECAP3_R {
                DECAP3_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Deadtime Enable For n = 6"]
            #[inline(always)]
            pub fn dten3(&self) -> DTEN3_R {
                DTEN3_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Synchronization Enable For n = 6"]
            #[inline(always)]
            pub fn syncen3(&self) -> SYNCEN3_R {
                SYNCEN3_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Fault Control Enable For n = 6"]
            #[inline(always)]
            pub fn faulten3(&self) -> FAULTEN3_R {
                FAULTEN3_R::new(((self.bits >> 30) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Combine Channels For n = 0"]
            #[inline(always)]
            pub fn combine0(&mut self) -> COMBINE0_W {
                COMBINE0_W { w: self }
            }
            #[doc = "Bit 1 - Complement Of Channel (n) For n = 0"]
            #[inline(always)]
            pub fn comp0(&mut self) -> COMP0_W {
                COMP0_W { w: self }
            }
            #[doc = "Bit 2 - Dual Edge Capture Mode Enable For n = 0"]
            #[inline(always)]
            pub fn decapen0(&mut self) -> DECAPEN0_W {
                DECAPEN0_W { w: self }
            }
            #[doc = "Bit 3 - Dual Edge Capture Mode Captures For n = 0"]
            #[inline(always)]
            pub fn decap0(&mut self) -> DECAP0_W {
                DECAP0_W { w: self }
            }
            #[doc = "Bit 4 - Deadtime Enable For n = 0"]
            #[inline(always)]
            pub fn dten0(&mut self) -> DTEN0_W {
                DTEN0_W { w: self }
            }
            #[doc = "Bit 5 - Synchronization Enable For n = 0"]
            #[inline(always)]
            pub fn syncen0(&mut self) -> SYNCEN0_W {
                SYNCEN0_W { w: self }
            }
            #[doc = "Bit 6 - Fault Control Enable For n = 0"]
            #[inline(always)]
            pub fn faulten0(&mut self) -> FAULTEN0_W {
                FAULTEN0_W { w: self }
            }
            #[doc = "Bit 8 - Combine Channels For n = 2"]
            #[inline(always)]
            pub fn combine1(&mut self) -> COMBINE1_W {
                COMBINE1_W { w: self }
            }
            #[doc = "Bit 9 - Complement Of Channel (n) For n = 2"]
            #[inline(always)]
            pub fn comp1(&mut self) -> COMP1_W {
                COMP1_W { w: self }
            }
            #[doc = "Bit 10 - Dual Edge Capture Mode Enable For n = 2"]
            #[inline(always)]
            pub fn decapen1(&mut self) -> DECAPEN1_W {
                DECAPEN1_W { w: self }
            }
            #[doc = "Bit 11 - Dual Edge Capture Mode Captures For n = 2"]
            #[inline(always)]
            pub fn decap1(&mut self) -> DECAP1_W {
                DECAP1_W { w: self }
            }
            #[doc = "Bit 12 - Deadtime Enable For n = 2"]
            #[inline(always)]
            pub fn dten1(&mut self) -> DTEN1_W {
                DTEN1_W { w: self }
            }
            #[doc = "Bit 13 - Synchronization Enable For n = 2"]
            #[inline(always)]
            pub fn syncen1(&mut self) -> SYNCEN1_W {
                SYNCEN1_W { w: self }
            }
            #[doc = "Bit 14 - Fault Control Enable For n = 2"]
            #[inline(always)]
            pub fn faulten1(&mut self) -> FAULTEN1_W {
                FAULTEN1_W { w: self }
            }
            #[doc = "Bit 16 - Combine Channels For n = 4"]
            #[inline(always)]
            pub fn combine2(&mut self) -> COMBINE2_W {
                COMBINE2_W { w: self }
            }
            #[doc = "Bit 17 - Complement Of Channel (n) For n = 4"]
            #[inline(always)]
            pub fn comp2(&mut self) -> COMP2_W {
                COMP2_W { w: self }
            }
            #[doc = "Bit 18 - Dual Edge Capture Mode Enable For n = 4"]
            #[inline(always)]
            pub fn decapen2(&mut self) -> DECAPEN2_W {
                DECAPEN2_W { w: self }
            }
            #[doc = "Bit 19 - Dual Edge Capture Mode Captures For n = 4"]
            #[inline(always)]
            pub fn decap2(&mut self) -> DECAP2_W {
                DECAP2_W { w: self }
            }
            #[doc = "Bit 20 - Deadtime Enable For n = 4"]
            #[inline(always)]
            pub fn dten2(&mut self) -> DTEN2_W {
                DTEN2_W { w: self }
            }
            #[doc = "Bit 21 - Synchronization Enable For n = 4"]
            #[inline(always)]
            pub fn syncen2(&mut self) -> SYNCEN2_W {
                SYNCEN2_W { w: self }
            }
            #[doc = "Bit 22 - Fault Control Enable For n = 4"]
            #[inline(always)]
            pub fn faulten2(&mut self) -> FAULTEN2_W {
                FAULTEN2_W { w: self }
            }
            #[doc = "Bit 24 - Combine Channels For n = 6"]
            #[inline(always)]
            pub fn combine3(&mut self) -> COMBINE3_W {
                COMBINE3_W { w: self }
            }
            #[doc = "Bit 25 - Complement Of Channel (n) for n = 6"]
            #[inline(always)]
            pub fn comp3(&mut self) -> COMP3_W {
                COMP3_W { w: self }
            }
            #[doc = "Bit 26 - Dual Edge Capture Mode Enable For n = 6"]
            #[inline(always)]
            pub fn decapen3(&mut self) -> DECAPEN3_W {
                DECAPEN3_W { w: self }
            }
            #[doc = "Bit 27 - Dual Edge Capture Mode Captures For n = 6"]
            #[inline(always)]
            pub fn decap3(&mut self) -> DECAP3_W {
                DECAP3_W { w: self }
            }
            #[doc = "Bit 28 - Deadtime Enable For n = 6"]
            #[inline(always)]
            pub fn dten3(&mut self) -> DTEN3_W {
                DTEN3_W { w: self }
            }
            #[doc = "Bit 29 - Synchronization Enable For n = 6"]
            #[inline(always)]
            pub fn syncen3(&mut self) -> SYNCEN3_W {
                SYNCEN3_W { w: self }
            }
            #[doc = "Bit 30 - Fault Control Enable For n = 6"]
            #[inline(always)]
            pub fn faulten3(&mut self) -> FAULTEN3_W {
                FAULTEN3_W { w: self }
            }
        }
    }
    #[doc = "Deadtime Insertion Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [deadtime](deadtime) module"]
    pub type DEADTIME = crate::Reg<u32, _DEADTIME>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DEADTIME;
    #[doc = "`read()` method returns [deadtime::R](deadtime::R) reader structure"]
    impl crate::Readable for DEADTIME {}
    #[doc = "`write(|w| ..)` method takes [deadtime::W](deadtime::W) writer structure"]
    impl crate::Writable for DEADTIME {}
    #[doc = "Deadtime Insertion Control"]
    pub mod deadtime {
        #[doc = "Reader of register DEADTIME"]
        pub type R = crate::R<u32, super::DEADTIME>;
        #[doc = "Writer for register DEADTIME"]
        pub type W = crate::W<u32, super::DEADTIME>;
        #[doc = "Register DEADTIME `reset()`'s with value 0"]
        impl crate::ResetValue for super::DEADTIME {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DTVAL`"]
        pub type DTVAL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DTVAL`"]
        pub struct DTVAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTVAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        #[doc = "Deadtime Prescaler Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum DTPS_A {
            #[doc = "2: Divide the system clock by 4."]
            _10 = 2,
            #[doc = "3: Divide the system clock by 16."]
            _11 = 3,
        }
        impl From<DTPS_A> for u8 {
            #[inline(always)]
            fn from(variant: DTPS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `DTPS`"]
        pub type DTPS_R = crate::R<u8, DTPS_A>;
        impl DTPS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, DTPS_A> {
                use crate::Variant::*;
                match self.bits {
                    2 => Val(DTPS_A::_10),
                    3 => Val(DTPS_A::_11),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == DTPS_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == DTPS_A::_11
            }
        }
        #[doc = "Write proxy for field `DTPS`"]
        pub struct DTPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTPS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DTPS_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Divide the system clock by 4."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(DTPS_A::_10)
            }
            #[doc = "Divide the system clock by 16."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(DTPS_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - Deadtime Value"]
            #[inline(always)]
            pub fn dtval(&self) -> DTVAL_R {
                DTVAL_R::new((self.bits & 0x3f) as u8)
            }
            #[doc = "Bits 6:7 - Deadtime Prescaler Value"]
            #[inline(always)]
            pub fn dtps(&self) -> DTPS_R {
                DTPS_R::new(((self.bits >> 6) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - Deadtime Value"]
            #[inline(always)]
            pub fn dtval(&mut self) -> DTVAL_W {
                DTVAL_W { w: self }
            }
            #[doc = "Bits 6:7 - Deadtime Prescaler Value"]
            #[inline(always)]
            pub fn dtps(&mut self) -> DTPS_W {
                DTPS_W { w: self }
            }
        }
    }
    #[doc = "FTM External Trigger\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exttrig](exttrig) module"]
    pub type EXTTRIG = crate::Reg<u32, _EXTTRIG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EXTTRIG;
    #[doc = "`read()` method returns [exttrig::R](exttrig::R) reader structure"]
    impl crate::Readable for EXTTRIG {}
    #[doc = "`write(|w| ..)` method takes [exttrig::W](exttrig::W) writer structure"]
    impl crate::Writable for EXTTRIG {}
    #[doc = "FTM External Trigger"]
    pub mod exttrig {
        #[doc = "Reader of register EXTTRIG"]
        pub type R = crate::R<u32, super::EXTTRIG>;
        #[doc = "Writer for register EXTTRIG"]
        pub type W = crate::W<u32, super::EXTTRIG>;
        #[doc = "Register EXTTRIG `reset()`'s with value 0"]
        impl crate::ResetValue for super::EXTTRIG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Channel 2 Trigger Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH2TRIG_A {
            #[doc = "0: The generation of the channel trigger is disabled."]
            _0 = 0,
            #[doc = "1: The generation of the channel trigger is enabled."]
            _1 = 1,
        }
        impl From<CH2TRIG_A> for bool {
            #[inline(always)]
            fn from(variant: CH2TRIG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH2TRIG`"]
        pub type CH2TRIG_R = crate::R<bool, CH2TRIG_A>;
        impl CH2TRIG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH2TRIG_A {
                match self.bits {
                    false => CH2TRIG_A::_0,
                    true => CH2TRIG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH2TRIG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH2TRIG_A::_1
            }
        }
        #[doc = "Write proxy for field `CH2TRIG`"]
        pub struct CH2TRIG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2TRIG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH2TRIG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The generation of the channel trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH2TRIG_A::_0)
            }
            #[doc = "The generation of the channel trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH2TRIG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Channel 3 Trigger Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH3TRIG_A {
            #[doc = "0: The generation of the channel trigger is disabled."]
            _0 = 0,
            #[doc = "1: The generation of the channel trigger is enabled."]
            _1 = 1,
        }
        impl From<CH3TRIG_A> for bool {
            #[inline(always)]
            fn from(variant: CH3TRIG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH3TRIG`"]
        pub type CH3TRIG_R = crate::R<bool, CH3TRIG_A>;
        impl CH3TRIG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH3TRIG_A {
                match self.bits {
                    false => CH3TRIG_A::_0,
                    true => CH3TRIG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH3TRIG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH3TRIG_A::_1
            }
        }
        #[doc = "Write proxy for field `CH3TRIG`"]
        pub struct CH3TRIG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3TRIG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH3TRIG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The generation of the channel trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH3TRIG_A::_0)
            }
            #[doc = "The generation of the channel trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH3TRIG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Channel 4 Trigger Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH4TRIG_A {
            #[doc = "0: The generation of the channel trigger is disabled."]
            _0 = 0,
            #[doc = "1: The generation of the channel trigger is enabled."]
            _1 = 1,
        }
        impl From<CH4TRIG_A> for bool {
            #[inline(always)]
            fn from(variant: CH4TRIG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH4TRIG`"]
        pub type CH4TRIG_R = crate::R<bool, CH4TRIG_A>;
        impl CH4TRIG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH4TRIG_A {
                match self.bits {
                    false => CH4TRIG_A::_0,
                    true => CH4TRIG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH4TRIG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH4TRIG_A::_1
            }
        }
        #[doc = "Write proxy for field `CH4TRIG`"]
        pub struct CH4TRIG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH4TRIG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH4TRIG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The generation of the channel trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH4TRIG_A::_0)
            }
            #[doc = "The generation of the channel trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH4TRIG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel 5 Trigger Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH5TRIG_A {
            #[doc = "0: The generation of the channel trigger is disabled."]
            _0 = 0,
            #[doc = "1: The generation of the channel trigger is enabled."]
            _1 = 1,
        }
        impl From<CH5TRIG_A> for bool {
            #[inline(always)]
            fn from(variant: CH5TRIG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH5TRIG`"]
        pub type CH5TRIG_R = crate::R<bool, CH5TRIG_A>;
        impl CH5TRIG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH5TRIG_A {
                match self.bits {
                    false => CH5TRIG_A::_0,
                    true => CH5TRIG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH5TRIG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH5TRIG_A::_1
            }
        }
        #[doc = "Write proxy for field `CH5TRIG`"]
        pub struct CH5TRIG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH5TRIG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH5TRIG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The generation of the channel trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH5TRIG_A::_0)
            }
            #[doc = "The generation of the channel trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH5TRIG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Channel 0 Trigger Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH0TRIG_A {
            #[doc = "0: The generation of the channel trigger is disabled."]
            _0 = 0,
            #[doc = "1: The generation of the channel trigger is enabled."]
            _1 = 1,
        }
        impl From<CH0TRIG_A> for bool {
            #[inline(always)]
            fn from(variant: CH0TRIG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH0TRIG`"]
        pub type CH0TRIG_R = crate::R<bool, CH0TRIG_A>;
        impl CH0TRIG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH0TRIG_A {
                match self.bits {
                    false => CH0TRIG_A::_0,
                    true => CH0TRIG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH0TRIG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH0TRIG_A::_1
            }
        }
        #[doc = "Write proxy for field `CH0TRIG`"]
        pub struct CH0TRIG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0TRIG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH0TRIG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The generation of the channel trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH0TRIG_A::_0)
            }
            #[doc = "The generation of the channel trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH0TRIG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Channel 1 Trigger Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH1TRIG_A {
            #[doc = "0: The generation of the channel trigger is disabled."]
            _0 = 0,
            #[doc = "1: The generation of the channel trigger is enabled."]
            _1 = 1,
        }
        impl From<CH1TRIG_A> for bool {
            #[inline(always)]
            fn from(variant: CH1TRIG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH1TRIG`"]
        pub type CH1TRIG_R = crate::R<bool, CH1TRIG_A>;
        impl CH1TRIG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH1TRIG_A {
                match self.bits {
                    false => CH1TRIG_A::_0,
                    true => CH1TRIG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH1TRIG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH1TRIG_A::_1
            }
        }
        #[doc = "Write proxy for field `CH1TRIG`"]
        pub struct CH1TRIG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1TRIG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH1TRIG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The generation of the channel trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH1TRIG_A::_0)
            }
            #[doc = "The generation of the channel trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH1TRIG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Initialization Trigger Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum INITTRIGEN_A {
            #[doc = "0: The generation of initialization trigger is disabled."]
            _0 = 0,
            #[doc = "1: The generation of initialization trigger is enabled."]
            _1 = 1,
        }
        impl From<INITTRIGEN_A> for bool {
            #[inline(always)]
            fn from(variant: INITTRIGEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `INITTRIGEN`"]
        pub type INITTRIGEN_R = crate::R<bool, INITTRIGEN_A>;
        impl INITTRIGEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> INITTRIGEN_A {
                match self.bits {
                    false => INITTRIGEN_A::_0,
                    true => INITTRIGEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == INITTRIGEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == INITTRIGEN_A::_1
            }
        }
        #[doc = "Write proxy for field `INITTRIGEN`"]
        pub struct INITTRIGEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INITTRIGEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: INITTRIGEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The generation of initialization trigger is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(INITTRIGEN_A::_0)
            }
            #[doc = "The generation of initialization trigger is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(INITTRIGEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel Trigger Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TRIGF_A {
            #[doc = "0: No channel trigger was generated."]
            _0 = 0,
            #[doc = "1: A channel trigger was generated."]
            _1 = 1,
        }
        impl From<TRIGF_A> for bool {
            #[inline(always)]
            fn from(variant: TRIGF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TRIGF`"]
        pub type TRIGF_R = crate::R<bool, TRIGF_A>;
        impl TRIGF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TRIGF_A {
                match self.bits {
                    false => TRIGF_A::_0,
                    true => TRIGF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TRIGF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TRIGF_A::_1
            }
        }
        #[doc = "Write proxy for field `TRIGF`"]
        pub struct TRIGF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIGF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TRIGF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No channel trigger was generated."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TRIGF_A::_0)
            }
            #[doc = "A channel trigger was generated."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TRIGF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel 2 Trigger Enable"]
            #[inline(always)]
            pub fn ch2trig(&self) -> CH2TRIG_R {
                CH2TRIG_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 3 Trigger Enable"]
            #[inline(always)]
            pub fn ch3trig(&self) -> CH3TRIG_R {
                CH3TRIG_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel 4 Trigger Enable"]
            #[inline(always)]
            pub fn ch4trig(&self) -> CH4TRIG_R {
                CH4TRIG_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel 5 Trigger Enable"]
            #[inline(always)]
            pub fn ch5trig(&self) -> CH5TRIG_R {
                CH5TRIG_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 0 Trigger Enable"]
            #[inline(always)]
            pub fn ch0trig(&self) -> CH0TRIG_R {
                CH0TRIG_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 1 Trigger Enable"]
            #[inline(always)]
            pub fn ch1trig(&self) -> CH1TRIG_R {
                CH1TRIG_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Initialization Trigger Enable"]
            #[inline(always)]
            pub fn inittrigen(&self) -> INITTRIGEN_R {
                INITTRIGEN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel Trigger Flag"]
            #[inline(always)]
            pub fn trigf(&self) -> TRIGF_R {
                TRIGF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 2 Trigger Enable"]
            #[inline(always)]
            pub fn ch2trig(&mut self) -> CH2TRIG_W {
                CH2TRIG_W { w: self }
            }
            #[doc = "Bit 1 - Channel 3 Trigger Enable"]
            #[inline(always)]
            pub fn ch3trig(&mut self) -> CH3TRIG_W {
                CH3TRIG_W { w: self }
            }
            #[doc = "Bit 2 - Channel 4 Trigger Enable"]
            #[inline(always)]
            pub fn ch4trig(&mut self) -> CH4TRIG_W {
                CH4TRIG_W { w: self }
            }
            #[doc = "Bit 3 - Channel 5 Trigger Enable"]
            #[inline(always)]
            pub fn ch5trig(&mut self) -> CH5TRIG_W {
                CH5TRIG_W { w: self }
            }
            #[doc = "Bit 4 - Channel 0 Trigger Enable"]
            #[inline(always)]
            pub fn ch0trig(&mut self) -> CH0TRIG_W {
                CH0TRIG_W { w: self }
            }
            #[doc = "Bit 5 - Channel 1 Trigger Enable"]
            #[inline(always)]
            pub fn ch1trig(&mut self) -> CH1TRIG_W {
                CH1TRIG_W { w: self }
            }
            #[doc = "Bit 6 - Initialization Trigger Enable"]
            #[inline(always)]
            pub fn inittrigen(&mut self) -> INITTRIGEN_W {
                INITTRIGEN_W { w: self }
            }
            #[doc = "Bit 7 - Channel Trigger Flag"]
            #[inline(always)]
            pub fn trigf(&mut self) -> TRIGF_W {
                TRIGF_W { w: self }
            }
        }
    }
    #[doc = "Channels Polarity\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pol](pol) module"]
    pub type POL = crate::Reg<u32, _POL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _POL;
    #[doc = "`read()` method returns [pol::R](pol::R) reader structure"]
    impl crate::Readable for POL {}
    #[doc = "`write(|w| ..)` method takes [pol::W](pol::W) writer structure"]
    impl crate::Writable for POL {}
    #[doc = "Channels Polarity"]
    pub mod pol {
        #[doc = "Reader of register POL"]
        pub type R = crate::R<u32, super::POL>;
        #[doc = "Writer for register POL"]
        pub type W = crate::W<u32, super::POL>;
        #[doc = "Register POL `reset()`'s with value 0"]
        impl crate::ResetValue for super::POL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Channel 0 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POL0_A {
            #[doc = "0: The channel polarity is active high."]
            _0 = 0,
            #[doc = "1: The channel polarity is active low."]
            _1 = 1,
        }
        impl From<POL0_A> for bool {
            #[inline(always)]
            fn from(variant: POL0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POL0`"]
        pub type POL0_R = crate::R<bool, POL0_A>;
        impl POL0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POL0_A {
                match self.bits {
                    false => POL0_A::_0,
                    true => POL0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POL0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POL0_A::_1
            }
        }
        #[doc = "Write proxy for field `POL0`"]
        pub struct POL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POL0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel polarity is active high."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POL0_A::_0)
            }
            #[doc = "The channel polarity is active low."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POL0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Channel 1 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POL1_A {
            #[doc = "0: The channel polarity is active high."]
            _0 = 0,
            #[doc = "1: The channel polarity is active low."]
            _1 = 1,
        }
        impl From<POL1_A> for bool {
            #[inline(always)]
            fn from(variant: POL1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POL1`"]
        pub type POL1_R = crate::R<bool, POL1_A>;
        impl POL1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POL1_A {
                match self.bits {
                    false => POL1_A::_0,
                    true => POL1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POL1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POL1_A::_1
            }
        }
        #[doc = "Write proxy for field `POL1`"]
        pub struct POL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POL1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel polarity is active high."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POL1_A::_0)
            }
            #[doc = "The channel polarity is active low."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POL1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Channel 2 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POL2_A {
            #[doc = "0: The channel polarity is active high."]
            _0 = 0,
            #[doc = "1: The channel polarity is active low."]
            _1 = 1,
        }
        impl From<POL2_A> for bool {
            #[inline(always)]
            fn from(variant: POL2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POL2`"]
        pub type POL2_R = crate::R<bool, POL2_A>;
        impl POL2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POL2_A {
                match self.bits {
                    false => POL2_A::_0,
                    true => POL2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POL2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POL2_A::_1
            }
        }
        #[doc = "Write proxy for field `POL2`"]
        pub struct POL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POL2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel polarity is active high."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POL2_A::_0)
            }
            #[doc = "The channel polarity is active low."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POL2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel 3 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POL3_A {
            #[doc = "0: The channel polarity is active high."]
            _0 = 0,
            #[doc = "1: The channel polarity is active low."]
            _1 = 1,
        }
        impl From<POL3_A> for bool {
            #[inline(always)]
            fn from(variant: POL3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POL3`"]
        pub type POL3_R = crate::R<bool, POL3_A>;
        impl POL3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POL3_A {
                match self.bits {
                    false => POL3_A::_0,
                    true => POL3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POL3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POL3_A::_1
            }
        }
        #[doc = "Write proxy for field `POL3`"]
        pub struct POL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POL3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel polarity is active high."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POL3_A::_0)
            }
            #[doc = "The channel polarity is active low."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POL3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Channel 4 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POL4_A {
            #[doc = "0: The channel polarity is active high."]
            _0 = 0,
            #[doc = "1: The channel polarity is active low."]
            _1 = 1,
        }
        impl From<POL4_A> for bool {
            #[inline(always)]
            fn from(variant: POL4_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POL4`"]
        pub type POL4_R = crate::R<bool, POL4_A>;
        impl POL4_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POL4_A {
                match self.bits {
                    false => POL4_A::_0,
                    true => POL4_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POL4_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POL4_A::_1
            }
        }
        #[doc = "Write proxy for field `POL4`"]
        pub struct POL4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POL4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel polarity is active high."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POL4_A::_0)
            }
            #[doc = "The channel polarity is active low."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POL4_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Channel 5 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POL5_A {
            #[doc = "0: The channel polarity is active high."]
            _0 = 0,
            #[doc = "1: The channel polarity is active low."]
            _1 = 1,
        }
        impl From<POL5_A> for bool {
            #[inline(always)]
            fn from(variant: POL5_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POL5`"]
        pub type POL5_R = crate::R<bool, POL5_A>;
        impl POL5_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POL5_A {
                match self.bits {
                    false => POL5_A::_0,
                    true => POL5_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POL5_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POL5_A::_1
            }
        }
        #[doc = "Write proxy for field `POL5`"]
        pub struct POL5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POL5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel polarity is active high."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POL5_A::_0)
            }
            #[doc = "The channel polarity is active low."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POL5_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Channel 6 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POL6_A {
            #[doc = "0: The channel polarity is active high."]
            _0 = 0,
            #[doc = "1: The channel polarity is active low."]
            _1 = 1,
        }
        impl From<POL6_A> for bool {
            #[inline(always)]
            fn from(variant: POL6_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POL6`"]
        pub type POL6_R = crate::R<bool, POL6_A>;
        impl POL6_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POL6_A {
                match self.bits {
                    false => POL6_A::_0,
                    true => POL6_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POL6_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POL6_A::_1
            }
        }
        #[doc = "Write proxy for field `POL6`"]
        pub struct POL6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POL6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel polarity is active high."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POL6_A::_0)
            }
            #[doc = "The channel polarity is active low."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POL6_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel 7 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POL7_A {
            #[doc = "0: The channel polarity is active high."]
            _0 = 0,
            #[doc = "1: The channel polarity is active low."]
            _1 = 1,
        }
        impl From<POL7_A> for bool {
            #[inline(always)]
            fn from(variant: POL7_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POL7`"]
        pub type POL7_R = crate::R<bool, POL7_A>;
        impl POL7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POL7_A {
                match self.bits {
                    false => POL7_A::_0,
                    true => POL7_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POL7_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POL7_A::_1
            }
        }
        #[doc = "Write proxy for field `POL7`"]
        pub struct POL7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: POL7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel polarity is active high."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(POL7_A::_0)
            }
            #[doc = "The channel polarity is active low."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(POL7_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel 0 Polarity"]
            #[inline(always)]
            pub fn pol0(&self) -> POL0_R {
                POL0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 1 Polarity"]
            #[inline(always)]
            pub fn pol1(&self) -> POL1_R {
                POL1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel 2 Polarity"]
            #[inline(always)]
            pub fn pol2(&self) -> POL2_R {
                POL2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel 3 Polarity"]
            #[inline(always)]
            pub fn pol3(&self) -> POL3_R {
                POL3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 4 Polarity"]
            #[inline(always)]
            pub fn pol4(&self) -> POL4_R {
                POL4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 5 Polarity"]
            #[inline(always)]
            pub fn pol5(&self) -> POL5_R {
                POL5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel 6 Polarity"]
            #[inline(always)]
            pub fn pol6(&self) -> POL6_R {
                POL6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel 7 Polarity"]
            #[inline(always)]
            pub fn pol7(&self) -> POL7_R {
                POL7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 0 Polarity"]
            #[inline(always)]
            pub fn pol0(&mut self) -> POL0_W {
                POL0_W { w: self }
            }
            #[doc = "Bit 1 - Channel 1 Polarity"]
            #[inline(always)]
            pub fn pol1(&mut self) -> POL1_W {
                POL1_W { w: self }
            }
            #[doc = "Bit 2 - Channel 2 Polarity"]
            #[inline(always)]
            pub fn pol2(&mut self) -> POL2_W {
                POL2_W { w: self }
            }
            #[doc = "Bit 3 - Channel 3 Polarity"]
            #[inline(always)]
            pub fn pol3(&mut self) -> POL3_W {
                POL3_W { w: self }
            }
            #[doc = "Bit 4 - Channel 4 Polarity"]
            #[inline(always)]
            pub fn pol4(&mut self) -> POL4_W {
                POL4_W { w: self }
            }
            #[doc = "Bit 5 - Channel 5 Polarity"]
            #[inline(always)]
            pub fn pol5(&mut self) -> POL5_W {
                POL5_W { w: self }
            }
            #[doc = "Bit 6 - Channel 6 Polarity"]
            #[inline(always)]
            pub fn pol6(&mut self) -> POL6_W {
                POL6_W { w: self }
            }
            #[doc = "Bit 7 - Channel 7 Polarity"]
            #[inline(always)]
            pub fn pol7(&mut self) -> POL7_W {
                POL7_W { w: self }
            }
        }
    }
    #[doc = "Fault Mode Status\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fms](fms) module"]
    pub type FMS = crate::Reg<u32, _FMS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FMS;
    #[doc = "`read()` method returns [fms::R](fms::R) reader structure"]
    impl crate::Readable for FMS {}
    #[doc = "`write(|w| ..)` method takes [fms::W](fms::W) writer structure"]
    impl crate::Writable for FMS {}
    #[doc = "Fault Mode Status"]
    pub mod fms {
        #[doc = "Reader of register FMS"]
        pub type R = crate::R<u32, super::FMS>;
        #[doc = "Writer for register FMS"]
        pub type W = crate::W<u32, super::FMS>;
        #[doc = "Register FMS `reset()`'s with value 0"]
        impl crate::ResetValue for super::FMS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Fault Detection Flag 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTF0_A {
            #[doc = "0: No fault condition was detected at the fault input."]
            _0 = 0,
            #[doc = "1: A fault condition was detected at the fault input."]
            _1 = 1,
        }
        impl From<FAULTF0_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTF0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTF0`"]
        pub type FAULTF0_R = crate::R<bool, FAULTF0_A>;
        impl FAULTF0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTF0_A {
                match self.bits {
                    false => FAULTF0_A::_0,
                    true => FAULTF0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTF0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTF0_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTF0`"]
        pub struct FAULTF0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTF0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTF0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No fault condition was detected at the fault input."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTF0_A::_0)
            }
            #[doc = "A fault condition was detected at the fault input."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTF0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Fault Detection Flag 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTF1_A {
            #[doc = "0: No fault condition was detected at the fault input."]
            _0 = 0,
            #[doc = "1: A fault condition was detected at the fault input."]
            _1 = 1,
        }
        impl From<FAULTF1_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTF1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTF1`"]
        pub type FAULTF1_R = crate::R<bool, FAULTF1_A>;
        impl FAULTF1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTF1_A {
                match self.bits {
                    false => FAULTF1_A::_0,
                    true => FAULTF1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTF1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTF1_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTF1`"]
        pub struct FAULTF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTF1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTF1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No fault condition was detected at the fault input."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTF1_A::_0)
            }
            #[doc = "A fault condition was detected at the fault input."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTF1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Fault Detection Flag 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTF2_A {
            #[doc = "0: No fault condition was detected at the fault input."]
            _0 = 0,
            #[doc = "1: A fault condition was detected at the fault input."]
            _1 = 1,
        }
        impl From<FAULTF2_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTF2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTF2`"]
        pub type FAULTF2_R = crate::R<bool, FAULTF2_A>;
        impl FAULTF2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTF2_A {
                match self.bits {
                    false => FAULTF2_A::_0,
                    true => FAULTF2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTF2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTF2_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTF2`"]
        pub struct FAULTF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTF2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTF2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No fault condition was detected at the fault input."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTF2_A::_0)
            }
            #[doc = "A fault condition was detected at the fault input."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTF2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Fault Detection Flag 3\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTF3_A {
            #[doc = "0: No fault condition was detected at the fault input."]
            _0 = 0,
            #[doc = "1: A fault condition was detected at the fault input."]
            _1 = 1,
        }
        impl From<FAULTF3_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTF3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTF3`"]
        pub type FAULTF3_R = crate::R<bool, FAULTF3_A>;
        impl FAULTF3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTF3_A {
                match self.bits {
                    false => FAULTF3_A::_0,
                    true => FAULTF3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTF3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTF3_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTF3`"]
        pub struct FAULTF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTF3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTF3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No fault condition was detected at the fault input."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTF3_A::_0)
            }
            #[doc = "A fault condition was detected at the fault input."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTF3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Fault Inputs\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTIN_A {
            #[doc = "0: The logic OR of the enabled fault inputs is 0."]
            _0 = 0,
            #[doc = "1: The logic OR of the enabled fault inputs is 1."]
            _1 = 1,
        }
        impl From<FAULTIN_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTIN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTIN`"]
        pub type FAULTIN_R = crate::R<bool, FAULTIN_A>;
        impl FAULTIN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTIN_A {
                match self.bits {
                    false => FAULTIN_A::_0,
                    true => FAULTIN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTIN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTIN_A::_1
            }
        }
        #[doc = "Write Protection Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WPEN_A {
            #[doc = "0: Write protection is disabled. Write protected bits can be written."]
            _0 = 0,
            #[doc = "1: Write protection is enabled. Write protected bits cannot be written."]
            _1 = 1,
        }
        impl From<WPEN_A> for bool {
            #[inline(always)]
            fn from(variant: WPEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WPEN`"]
        pub type WPEN_R = crate::R<bool, WPEN_A>;
        impl WPEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WPEN_A {
                match self.bits {
                    false => WPEN_A::_0,
                    true => WPEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == WPEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == WPEN_A::_1
            }
        }
        #[doc = "Write proxy for field `WPEN`"]
        pub struct WPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WPEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WPEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Write protection is disabled. Write protected bits can be written."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(WPEN_A::_0)
            }
            #[doc = "Write protection is enabled. Write protected bits cannot be written."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(WPEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Fault Detection Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULTF_A {
            #[doc = "0: No fault condition was detected."]
            _0 = 0,
            #[doc = "1: A fault condition was detected."]
            _1 = 1,
        }
        impl From<FAULTF_A> for bool {
            #[inline(always)]
            fn from(variant: FAULTF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULTF`"]
        pub type FAULTF_R = crate::R<bool, FAULTF_A>;
        impl FAULTF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULTF_A {
                match self.bits {
                    false => FAULTF_A::_0,
                    true => FAULTF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULTF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULTF_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULTF`"]
        pub struct FAULTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULTF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULTF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No fault condition was detected."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULTF_A::_0)
            }
            #[doc = "A fault condition was detected."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULTF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Fault Detection Flag 0"]
            #[inline(always)]
            pub fn faultf0(&self) -> FAULTF0_R {
                FAULTF0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Fault Detection Flag 1"]
            #[inline(always)]
            pub fn faultf1(&self) -> FAULTF1_R {
                FAULTF1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Fault Detection Flag 2"]
            #[inline(always)]
            pub fn faultf2(&self) -> FAULTF2_R {
                FAULTF2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Fault Detection Flag 3"]
            #[inline(always)]
            pub fn faultf3(&self) -> FAULTF3_R {
                FAULTF3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Fault Inputs"]
            #[inline(always)]
            pub fn faultin(&self) -> FAULTIN_R {
                FAULTIN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Write Protection Enable"]
            #[inline(always)]
            pub fn wpen(&self) -> WPEN_R {
                WPEN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Fault Detection Flag"]
            #[inline(always)]
            pub fn faultf(&self) -> FAULTF_R {
                FAULTF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Fault Detection Flag 0"]
            #[inline(always)]
            pub fn faultf0(&mut self) -> FAULTF0_W {
                FAULTF0_W { w: self }
            }
            #[doc = "Bit 1 - Fault Detection Flag 1"]
            #[inline(always)]
            pub fn faultf1(&mut self) -> FAULTF1_W {
                FAULTF1_W { w: self }
            }
            #[doc = "Bit 2 - Fault Detection Flag 2"]
            #[inline(always)]
            pub fn faultf2(&mut self) -> FAULTF2_W {
                FAULTF2_W { w: self }
            }
            #[doc = "Bit 3 - Fault Detection Flag 3"]
            #[inline(always)]
            pub fn faultf3(&mut self) -> FAULTF3_W {
                FAULTF3_W { w: self }
            }
            #[doc = "Bit 6 - Write Protection Enable"]
            #[inline(always)]
            pub fn wpen(&mut self) -> WPEN_W {
                WPEN_W { w: self }
            }
            #[doc = "Bit 7 - Fault Detection Flag"]
            #[inline(always)]
            pub fn faultf(&mut self) -> FAULTF_W {
                FAULTF_W { w: self }
            }
        }
    }
    #[doc = "Input Capture Filter Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [filter](filter) module"]
    pub type FILTER = crate::Reg<u32, _FILTER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FILTER;
    #[doc = "`read()` method returns [filter::R](filter::R) reader structure"]
    impl crate::Readable for FILTER {}
    #[doc = "`write(|w| ..)` method takes [filter::W](filter::W) writer structure"]
    impl crate::Writable for FILTER {}
    #[doc = "Input Capture Filter Control"]
    pub mod filter {
        #[doc = "Reader of register FILTER"]
        pub type R = crate::R<u32, super::FILTER>;
        #[doc = "Writer for register FILTER"]
        pub type W = crate::W<u32, super::FILTER>;
        #[doc = "Register FILTER `reset()`'s with value 0"]
        impl crate::ResetValue for super::FILTER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CH0FVAL`"]
        pub type CH0FVAL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CH0FVAL`"]
        pub struct CH0FVAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0FVAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Reader of field `CH1FVAL`"]
        pub type CH1FVAL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CH1FVAL`"]
        pub struct CH1FVAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1FVAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CH2FVAL`"]
        pub type CH2FVAL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CH2FVAL`"]
        pub struct CH2FVAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2FVAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CH3FVAL`"]
        pub type CH3FVAL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CH3FVAL`"]
        pub struct CH3FVAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3FVAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Channel 0 Input Filter"]
            #[inline(always)]
            pub fn ch0fval(&self) -> CH0FVAL_R {
                CH0FVAL_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Channel 1 Input Filter"]
            #[inline(always)]
            pub fn ch1fval(&self) -> CH1FVAL_R {
                CH1FVAL_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Channel 2 Input Filter"]
            #[inline(always)]
            pub fn ch2fval(&self) -> CH2FVAL_R {
                CH2FVAL_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - Channel 3 Input Filter"]
            #[inline(always)]
            pub fn ch3fval(&self) -> CH3FVAL_R {
                CH3FVAL_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Channel 0 Input Filter"]
            #[inline(always)]
            pub fn ch0fval(&mut self) -> CH0FVAL_W {
                CH0FVAL_W { w: self }
            }
            #[doc = "Bits 4:7 - Channel 1 Input Filter"]
            #[inline(always)]
            pub fn ch1fval(&mut self) -> CH1FVAL_W {
                CH1FVAL_W { w: self }
            }
            #[doc = "Bits 8:11 - Channel 2 Input Filter"]
            #[inline(always)]
            pub fn ch2fval(&mut self) -> CH2FVAL_W {
                CH2FVAL_W { w: self }
            }
            #[doc = "Bits 12:15 - Channel 3 Input Filter"]
            #[inline(always)]
            pub fn ch3fval(&mut self) -> CH3FVAL_W {
                CH3FVAL_W { w: self }
            }
        }
    }
    #[doc = "Fault Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fltctrl](fltctrl) module"]
    pub type FLTCTRL = crate::Reg<u32, _FLTCTRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLTCTRL;
    #[doc = "`read()` method returns [fltctrl::R](fltctrl::R) reader structure"]
    impl crate::Readable for FLTCTRL {}
    #[doc = "`write(|w| ..)` method takes [fltctrl::W](fltctrl::W) writer structure"]
    impl crate::Writable for FLTCTRL {}
    #[doc = "Fault Control"]
    pub mod fltctrl {
        #[doc = "Reader of register FLTCTRL"]
        pub type R = crate::R<u32, super::FLTCTRL>;
        #[doc = "Writer for register FLTCTRL"]
        pub type W = crate::W<u32, super::FLTCTRL>;
        #[doc = "Register FLTCTRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::FLTCTRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Fault Input 0 Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULT0EN_A {
            #[doc = "0: Fault input is disabled."]
            _0 = 0,
            #[doc = "1: Fault input is enabled."]
            _1 = 1,
        }
        impl From<FAULT0EN_A> for bool {
            #[inline(always)]
            fn from(variant: FAULT0EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULT0EN`"]
        pub type FAULT0EN_R = crate::R<bool, FAULT0EN_A>;
        impl FAULT0EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULT0EN_A {
                match self.bits {
                    false => FAULT0EN_A::_0,
                    true => FAULT0EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULT0EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULT0EN_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULT0EN`"]
        pub struct FAULT0EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULT0EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULT0EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault input is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULT0EN_A::_0)
            }
            #[doc = "Fault input is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULT0EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Fault Input 1 Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULT1EN_A {
            #[doc = "0: Fault input is disabled."]
            _0 = 0,
            #[doc = "1: Fault input is enabled."]
            _1 = 1,
        }
        impl From<FAULT1EN_A> for bool {
            #[inline(always)]
            fn from(variant: FAULT1EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULT1EN`"]
        pub type FAULT1EN_R = crate::R<bool, FAULT1EN_A>;
        impl FAULT1EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULT1EN_A {
                match self.bits {
                    false => FAULT1EN_A::_0,
                    true => FAULT1EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULT1EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULT1EN_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULT1EN`"]
        pub struct FAULT1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULT1EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULT1EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault input is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULT1EN_A::_0)
            }
            #[doc = "Fault input is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULT1EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Fault Input 2 Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULT2EN_A {
            #[doc = "0: Fault input is disabled."]
            _0 = 0,
            #[doc = "1: Fault input is enabled."]
            _1 = 1,
        }
        impl From<FAULT2EN_A> for bool {
            #[inline(always)]
            fn from(variant: FAULT2EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULT2EN`"]
        pub type FAULT2EN_R = crate::R<bool, FAULT2EN_A>;
        impl FAULT2EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULT2EN_A {
                match self.bits {
                    false => FAULT2EN_A::_0,
                    true => FAULT2EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULT2EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULT2EN_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULT2EN`"]
        pub struct FAULT2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULT2EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULT2EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault input is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULT2EN_A::_0)
            }
            #[doc = "Fault input is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULT2EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Fault Input 3 Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FAULT3EN_A {
            #[doc = "0: Fault input is disabled."]
            _0 = 0,
            #[doc = "1: Fault input is enabled."]
            _1 = 1,
        }
        impl From<FAULT3EN_A> for bool {
            #[inline(always)]
            fn from(variant: FAULT3EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FAULT3EN`"]
        pub type FAULT3EN_R = crate::R<bool, FAULT3EN_A>;
        impl FAULT3EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FAULT3EN_A {
                match self.bits {
                    false => FAULT3EN_A::_0,
                    true => FAULT3EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FAULT3EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FAULT3EN_A::_1
            }
        }
        #[doc = "Write proxy for field `FAULT3EN`"]
        pub struct FAULT3EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAULT3EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FAULT3EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault input is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FAULT3EN_A::_0)
            }
            #[doc = "Fault input is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FAULT3EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Fault Input 0 Filter Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FFLTR0EN_A {
            #[doc = "0: Fault input filter is disabled."]
            _0 = 0,
            #[doc = "1: Fault input filter is enabled."]
            _1 = 1,
        }
        impl From<FFLTR0EN_A> for bool {
            #[inline(always)]
            fn from(variant: FFLTR0EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FFLTR0EN`"]
        pub type FFLTR0EN_R = crate::R<bool, FFLTR0EN_A>;
        impl FFLTR0EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FFLTR0EN_A {
                match self.bits {
                    false => FFLTR0EN_A::_0,
                    true => FFLTR0EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FFLTR0EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FFLTR0EN_A::_1
            }
        }
        #[doc = "Write proxy for field `FFLTR0EN`"]
        pub struct FFLTR0EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FFLTR0EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FFLTR0EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault input filter is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FFLTR0EN_A::_0)
            }
            #[doc = "Fault input filter is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FFLTR0EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Fault Input 1 Filter Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FFLTR1EN_A {
            #[doc = "0: Fault input filter is disabled."]
            _0 = 0,
            #[doc = "1: Fault input filter is enabled."]
            _1 = 1,
        }
        impl From<FFLTR1EN_A> for bool {
            #[inline(always)]
            fn from(variant: FFLTR1EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FFLTR1EN`"]
        pub type FFLTR1EN_R = crate::R<bool, FFLTR1EN_A>;
        impl FFLTR1EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FFLTR1EN_A {
                match self.bits {
                    false => FFLTR1EN_A::_0,
                    true => FFLTR1EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FFLTR1EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FFLTR1EN_A::_1
            }
        }
        #[doc = "Write proxy for field `FFLTR1EN`"]
        pub struct FFLTR1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FFLTR1EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FFLTR1EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault input filter is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FFLTR1EN_A::_0)
            }
            #[doc = "Fault input filter is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FFLTR1EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Fault Input 2 Filter Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FFLTR2EN_A {
            #[doc = "0: Fault input filter is disabled."]
            _0 = 0,
            #[doc = "1: Fault input filter is enabled."]
            _1 = 1,
        }
        impl From<FFLTR2EN_A> for bool {
            #[inline(always)]
            fn from(variant: FFLTR2EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FFLTR2EN`"]
        pub type FFLTR2EN_R = crate::R<bool, FFLTR2EN_A>;
        impl FFLTR2EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FFLTR2EN_A {
                match self.bits {
                    false => FFLTR2EN_A::_0,
                    true => FFLTR2EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FFLTR2EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FFLTR2EN_A::_1
            }
        }
        #[doc = "Write proxy for field `FFLTR2EN`"]
        pub struct FFLTR2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FFLTR2EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FFLTR2EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault input filter is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FFLTR2EN_A::_0)
            }
            #[doc = "Fault input filter is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FFLTR2EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Fault Input 3 Filter Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FFLTR3EN_A {
            #[doc = "0: Fault input filter is disabled."]
            _0 = 0,
            #[doc = "1: Fault input filter is enabled."]
            _1 = 1,
        }
        impl From<FFLTR3EN_A> for bool {
            #[inline(always)]
            fn from(variant: FFLTR3EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FFLTR3EN`"]
        pub type FFLTR3EN_R = crate::R<bool, FFLTR3EN_A>;
        impl FFLTR3EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FFLTR3EN_A {
                match self.bits {
                    false => FFLTR3EN_A::_0,
                    true => FFLTR3EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FFLTR3EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FFLTR3EN_A::_1
            }
        }
        #[doc = "Write proxy for field `FFLTR3EN`"]
        pub struct FFLTR3EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FFLTR3EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FFLTR3EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Fault input filter is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FFLTR3EN_A::_0)
            }
            #[doc = "Fault input filter is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FFLTR3EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `FFVAL`"]
        pub type FFVAL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `FFVAL`"]
        pub struct FFVAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FFVAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Fault Input 0 Enable"]
            #[inline(always)]
            pub fn fault0en(&self) -> FAULT0EN_R {
                FAULT0EN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Fault Input 1 Enable"]
            #[inline(always)]
            pub fn fault1en(&self) -> FAULT1EN_R {
                FAULT1EN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Fault Input 2 Enable"]
            #[inline(always)]
            pub fn fault2en(&self) -> FAULT2EN_R {
                FAULT2EN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Fault Input 3 Enable"]
            #[inline(always)]
            pub fn fault3en(&self) -> FAULT3EN_R {
                FAULT3EN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Fault Input 0 Filter Enable"]
            #[inline(always)]
            pub fn ffltr0en(&self) -> FFLTR0EN_R {
                FFLTR0EN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Fault Input 1 Filter Enable"]
            #[inline(always)]
            pub fn ffltr1en(&self) -> FFLTR1EN_R {
                FFLTR1EN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Fault Input 2 Filter Enable"]
            #[inline(always)]
            pub fn ffltr2en(&self) -> FFLTR2EN_R {
                FFLTR2EN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Fault Input 3 Filter Enable"]
            #[inline(always)]
            pub fn ffltr3en(&self) -> FFLTR3EN_R {
                FFLTR3EN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:11 - Fault Input Filter"]
            #[inline(always)]
            pub fn ffval(&self) -> FFVAL_R {
                FFVAL_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - Fault Input 0 Enable"]
            #[inline(always)]
            pub fn fault0en(&mut self) -> FAULT0EN_W {
                FAULT0EN_W { w: self }
            }
            #[doc = "Bit 1 - Fault Input 1 Enable"]
            #[inline(always)]
            pub fn fault1en(&mut self) -> FAULT1EN_W {
                FAULT1EN_W { w: self }
            }
            #[doc = "Bit 2 - Fault Input 2 Enable"]
            #[inline(always)]
            pub fn fault2en(&mut self) -> FAULT2EN_W {
                FAULT2EN_W { w: self }
            }
            #[doc = "Bit 3 - Fault Input 3 Enable"]
            #[inline(always)]
            pub fn fault3en(&mut self) -> FAULT3EN_W {
                FAULT3EN_W { w: self }
            }
            #[doc = "Bit 4 - Fault Input 0 Filter Enable"]
            #[inline(always)]
            pub fn ffltr0en(&mut self) -> FFLTR0EN_W {
                FFLTR0EN_W { w: self }
            }
            #[doc = "Bit 5 - Fault Input 1 Filter Enable"]
            #[inline(always)]
            pub fn ffltr1en(&mut self) -> FFLTR1EN_W {
                FFLTR1EN_W { w: self }
            }
            #[doc = "Bit 6 - Fault Input 2 Filter Enable"]
            #[inline(always)]
            pub fn ffltr2en(&mut self) -> FFLTR2EN_W {
                FFLTR2EN_W { w: self }
            }
            #[doc = "Bit 7 - Fault Input 3 Filter Enable"]
            #[inline(always)]
            pub fn ffltr3en(&mut self) -> FFLTR3EN_W {
                FFLTR3EN_W { w: self }
            }
            #[doc = "Bits 8:11 - Fault Input Filter"]
            #[inline(always)]
            pub fn ffval(&mut self) -> FFVAL_W {
                FFVAL_W { w: self }
            }
        }
    }
    #[doc = "Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [conf](conf) module"]
    pub type CONF = crate::Reg<u32, _CONF>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONF;
    #[doc = "`read()` method returns [conf::R](conf::R) reader structure"]
    impl crate::Readable for CONF {}
    #[doc = "`write(|w| ..)` method takes [conf::W](conf::W) writer structure"]
    impl crate::Writable for CONF {}
    #[doc = "Configuration"]
    pub mod conf {
        #[doc = "Reader of register CONF"]
        pub type R = crate::R<u32, super::CONF>;
        #[doc = "Writer for register CONF"]
        pub type W = crate::W<u32, super::CONF>;
        #[doc = "Register CONF `reset()`'s with value 0"]
        impl crate::ResetValue for super::CONF {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `NUMTOF`"]
        pub type NUMTOF_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `NUMTOF`"]
        pub struct NUMTOF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NUMTOF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        #[doc = "Reader of field `BDMMODE`"]
        pub type BDMMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BDMMODE`"]
        pub struct BDMMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BDMMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Global Time Base Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum GTBEEN_A {
            #[doc = "0: Use of an external global time base is disabled."]
            _0 = 0,
            #[doc = "1: Use of an external global time base is enabled."]
            _1 = 1,
        }
        impl From<GTBEEN_A> for bool {
            #[inline(always)]
            fn from(variant: GTBEEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `GTBEEN`"]
        pub type GTBEEN_R = crate::R<bool, GTBEEN_A>;
        impl GTBEEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> GTBEEN_A {
                match self.bits {
                    false => GTBEEN_A::_0,
                    true => GTBEEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == GTBEEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == GTBEEN_A::_1
            }
        }
        #[doc = "Write proxy for field `GTBEEN`"]
        pub struct GTBEEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GTBEEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GTBEEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Use of an external global time base is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(GTBEEN_A::_0)
            }
            #[doc = "Use of an external global time base is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(GTBEEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Global Time Base Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum GTBEOUT_A {
            #[doc = "0: A global time base signal generation is disabled."]
            _0 = 0,
            #[doc = "1: A global time base signal generation is enabled."]
            _1 = 1,
        }
        impl From<GTBEOUT_A> for bool {
            #[inline(always)]
            fn from(variant: GTBEOUT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `GTBEOUT`"]
        pub type GTBEOUT_R = crate::R<bool, GTBEOUT_A>;
        impl GTBEOUT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> GTBEOUT_A {
                match self.bits {
                    false => GTBEOUT_A::_0,
                    true => GTBEOUT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == GTBEOUT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == GTBEOUT_A::_1
            }
        }
        #[doc = "Write proxy for field `GTBEOUT`"]
        pub struct GTBEOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GTBEOUT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GTBEOUT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "A global time base signal generation is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(GTBEOUT_A::_0)
            }
            #[doc = "A global time base signal generation is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(GTBEOUT_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:4 - TOF Frequency"]
            #[inline(always)]
            pub fn numtof(&self) -> NUMTOF_R {
                NUMTOF_R::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bits 6:7 - Debug Mode"]
            #[inline(always)]
            pub fn bdmmode(&self) -> BDMMODE_R {
                BDMMODE_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bit 9 - Global Time Base Enable"]
            #[inline(always)]
            pub fn gtbeen(&self) -> GTBEEN_R {
                GTBEEN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Global Time Base Output"]
            #[inline(always)]
            pub fn gtbeout(&self) -> GTBEOUT_R {
                GTBEOUT_R::new(((self.bits >> 10) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - TOF Frequency"]
            #[inline(always)]
            pub fn numtof(&mut self) -> NUMTOF_W {
                NUMTOF_W { w: self }
            }
            #[doc = "Bits 6:7 - Debug Mode"]
            #[inline(always)]
            pub fn bdmmode(&mut self) -> BDMMODE_W {
                BDMMODE_W { w: self }
            }
            #[doc = "Bit 9 - Global Time Base Enable"]
            #[inline(always)]
            pub fn gtbeen(&mut self) -> GTBEEN_W {
                GTBEEN_W { w: self }
            }
            #[doc = "Bit 10 - Global Time Base Output"]
            #[inline(always)]
            pub fn gtbeout(&mut self) -> GTBEOUT_W {
                GTBEOUT_W { w: self }
            }
        }
    }
    #[doc = "FTM Fault Input Polarity\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fltpol](fltpol) module"]
    pub type FLTPOL = crate::Reg<u32, _FLTPOL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLTPOL;
    #[doc = "`read()` method returns [fltpol::R](fltpol::R) reader structure"]
    impl crate::Readable for FLTPOL {}
    #[doc = "`write(|w| ..)` method takes [fltpol::W](fltpol::W) writer structure"]
    impl crate::Writable for FLTPOL {}
    #[doc = "FTM Fault Input Polarity"]
    pub mod fltpol {
        #[doc = "Reader of register FLTPOL"]
        pub type R = crate::R<u32, super::FLTPOL>;
        #[doc = "Writer for register FLTPOL"]
        pub type W = crate::W<u32, super::FLTPOL>;
        #[doc = "Register FLTPOL `reset()`'s with value 0"]
        impl crate::ResetValue for super::FLTPOL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Fault Input 0 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FLT0POL_A {
            #[doc = "0: The fault input polarity is active high. A 1 at the fault input indicates a fault."]
            _0 = 0,
            #[doc = "1: The fault input polarity is active low. A 0 at the fault input indicates a fault."]
            _1 = 1,
        }
        impl From<FLT0POL_A> for bool {
            #[inline(always)]
            fn from(variant: FLT0POL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FLT0POL`"]
        pub type FLT0POL_R = crate::R<bool, FLT0POL_A>;
        impl FLT0POL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLT0POL_A {
                match self.bits {
                    false => FLT0POL_A::_0,
                    true => FLT0POL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FLT0POL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FLT0POL_A::_1
            }
        }
        #[doc = "Write proxy for field `FLT0POL`"]
        pub struct FLT0POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLT0POL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLT0POL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The fault input polarity is active high. A 1 at the fault input indicates a fault."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FLT0POL_A::_0)
            }
            #[doc = "The fault input polarity is active low. A 0 at the fault input indicates a fault."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FLT0POL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Fault Input 1 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FLT1POL_A {
            #[doc = "0: The fault input polarity is active high. A 1 at the fault input indicates a fault."]
            _0 = 0,
            #[doc = "1: The fault input polarity is active low. A 0 at the fault input indicates a fault."]
            _1 = 1,
        }
        impl From<FLT1POL_A> for bool {
            #[inline(always)]
            fn from(variant: FLT1POL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FLT1POL`"]
        pub type FLT1POL_R = crate::R<bool, FLT1POL_A>;
        impl FLT1POL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLT1POL_A {
                match self.bits {
                    false => FLT1POL_A::_0,
                    true => FLT1POL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FLT1POL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FLT1POL_A::_1
            }
        }
        #[doc = "Write proxy for field `FLT1POL`"]
        pub struct FLT1POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLT1POL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLT1POL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The fault input polarity is active high. A 1 at the fault input indicates a fault."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FLT1POL_A::_0)
            }
            #[doc = "The fault input polarity is active low. A 0 at the fault input indicates a fault."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FLT1POL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Fault Input 2 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FLT2POL_A {
            #[doc = "0: The fault input polarity is active high. A 1 at the fault input indicates a fault."]
            _0 = 0,
            #[doc = "1: The fault input polarity is active low. A 0 at the fault input indicates a fault."]
            _1 = 1,
        }
        impl From<FLT2POL_A> for bool {
            #[inline(always)]
            fn from(variant: FLT2POL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FLT2POL`"]
        pub type FLT2POL_R = crate::R<bool, FLT2POL_A>;
        impl FLT2POL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLT2POL_A {
                match self.bits {
                    false => FLT2POL_A::_0,
                    true => FLT2POL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FLT2POL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FLT2POL_A::_1
            }
        }
        #[doc = "Write proxy for field `FLT2POL`"]
        pub struct FLT2POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLT2POL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLT2POL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The fault input polarity is active high. A 1 at the fault input indicates a fault."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FLT2POL_A::_0)
            }
            #[doc = "The fault input polarity is active low. A 0 at the fault input indicates a fault."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FLT2POL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Fault Input 3 Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FLT3POL_A {
            #[doc = "0: The fault input polarity is active high. A 1 at the fault input indicates a fault."]
            _0 = 0,
            #[doc = "1: The fault input polarity is active low. A 0 at the fault input indicates a fault."]
            _1 = 1,
        }
        impl From<FLT3POL_A> for bool {
            #[inline(always)]
            fn from(variant: FLT3POL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FLT3POL`"]
        pub type FLT3POL_R = crate::R<bool, FLT3POL_A>;
        impl FLT3POL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLT3POL_A {
                match self.bits {
                    false => FLT3POL_A::_0,
                    true => FLT3POL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FLT3POL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FLT3POL_A::_1
            }
        }
        #[doc = "Write proxy for field `FLT3POL`"]
        pub struct FLT3POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLT3POL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLT3POL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The fault input polarity is active high. A 1 at the fault input indicates a fault."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FLT3POL_A::_0)
            }
            #[doc = "The fault input polarity is active low. A 0 at the fault input indicates a fault."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FLT3POL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Fault Input 0 Polarity"]
            #[inline(always)]
            pub fn flt0pol(&self) -> FLT0POL_R {
                FLT0POL_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Fault Input 1 Polarity"]
            #[inline(always)]
            pub fn flt1pol(&self) -> FLT1POL_R {
                FLT1POL_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Fault Input 2 Polarity"]
            #[inline(always)]
            pub fn flt2pol(&self) -> FLT2POL_R {
                FLT2POL_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Fault Input 3 Polarity"]
            #[inline(always)]
            pub fn flt3pol(&self) -> FLT3POL_R {
                FLT3POL_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Fault Input 0 Polarity"]
            #[inline(always)]
            pub fn flt0pol(&mut self) -> FLT0POL_W {
                FLT0POL_W { w: self }
            }
            #[doc = "Bit 1 - Fault Input 1 Polarity"]
            #[inline(always)]
            pub fn flt1pol(&mut self) -> FLT1POL_W {
                FLT1POL_W { w: self }
            }
            #[doc = "Bit 2 - Fault Input 2 Polarity"]
            #[inline(always)]
            pub fn flt2pol(&mut self) -> FLT2POL_W {
                FLT2POL_W { w: self }
            }
            #[doc = "Bit 3 - Fault Input 3 Polarity"]
            #[inline(always)]
            pub fn flt3pol(&mut self) -> FLT3POL_W {
                FLT3POL_W { w: self }
            }
        }
    }
    #[doc = "Synchronization Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [synconf](synconf) module"]
    pub type SYNCONF = crate::Reg<u32, _SYNCONF>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SYNCONF;
    #[doc = "`read()` method returns [synconf::R](synconf::R) reader structure"]
    impl crate::Readable for SYNCONF {}
    #[doc = "`write(|w| ..)` method takes [synconf::W](synconf::W) writer structure"]
    impl crate::Writable for SYNCONF {}
    #[doc = "Synchronization Configuration"]
    pub mod synconf {
        #[doc = "Reader of register SYNCONF"]
        pub type R = crate::R<u32, super::SYNCONF>;
        #[doc = "Writer for register SYNCONF"]
        pub type W = crate::W<u32, super::SYNCONF>;
        #[doc = "Register SYNCONF `reset()`'s with value 0"]
        impl crate::ResetValue for super::SYNCONF {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Hardware Trigger Mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HWTRIGMODE_A {
            #[doc = "0: FTM clears the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."]
            _0 = 0,
            #[doc = "1: FTM does not clear the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."]
            _1 = 1,
        }
        impl From<HWTRIGMODE_A> for bool {
            #[inline(always)]
            fn from(variant: HWTRIGMODE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HWTRIGMODE`"]
        pub type HWTRIGMODE_R = crate::R<bool, HWTRIGMODE_A>;
        impl HWTRIGMODE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HWTRIGMODE_A {
                match self.bits {
                    false => HWTRIGMODE_A::_0,
                    true => HWTRIGMODE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HWTRIGMODE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HWTRIGMODE_A::_1
            }
        }
        #[doc = "Write proxy for field `HWTRIGMODE`"]
        pub struct HWTRIGMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HWTRIGMODE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HWTRIGMODE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FTM clears the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HWTRIGMODE_A::_0)
            }
            #[doc = "FTM does not clear the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HWTRIGMODE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "CNTIN Register Synchronization\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CNTINC_A {
            #[doc = "0: CNTIN register is updated with its buffer value at all rising edges of system clock."]
            _0 = 0,
            #[doc = "1: CNTIN register is updated with its buffer value by the PWM synchronization."]
            _1 = 1,
        }
        impl From<CNTINC_A> for bool {
            #[inline(always)]
            fn from(variant: CNTINC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CNTINC`"]
        pub type CNTINC_R = crate::R<bool, CNTINC_A>;
        impl CNTINC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CNTINC_A {
                match self.bits {
                    false => CNTINC_A::_0,
                    true => CNTINC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CNTINC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CNTINC_A::_1
            }
        }
        #[doc = "Write proxy for field `CNTINC`"]
        pub struct CNTINC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNTINC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CNTINC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "CNTIN register is updated with its buffer value at all rising edges of system clock."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CNTINC_A::_0)
            }
            #[doc = "CNTIN register is updated with its buffer value by the PWM synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CNTINC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "INVCTRL Register Synchronization\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum INVC_A {
            #[doc = "0: INVCTRL register is updated with its buffer value at all rising edges of system clock."]
            _0 = 0,
            #[doc = "1: INVCTRL register is updated with its buffer value by the PWM synchronization."]
            _1 = 1,
        }
        impl From<INVC_A> for bool {
            #[inline(always)]
            fn from(variant: INVC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `INVC`"]
        pub type INVC_R = crate::R<bool, INVC_A>;
        impl INVC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> INVC_A {
                match self.bits {
                    false => INVC_A::_0,
                    true => INVC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == INVC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == INVC_A::_1
            }
        }
        #[doc = "Write proxy for field `INVC`"]
        pub struct INVC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INVC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: INVC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "INVCTRL register is updated with its buffer value at all rising edges of system clock."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(INVC_A::_0)
            }
            #[doc = "INVCTRL register is updated with its buffer value by the PWM synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(INVC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "SWOCTRL Register Synchronization\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWOC_A {
            #[doc = "0: SWOCTRL register is updated with its buffer value at all rising edges of system clock."]
            _0 = 0,
            #[doc = "1: SWOCTRL register is updated with its buffer value by the PWM synchronization."]
            _1 = 1,
        }
        impl From<SWOC_A> for bool {
            #[inline(always)]
            fn from(variant: SWOC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWOC`"]
        pub type SWOC_R = crate::R<bool, SWOC_A>;
        impl SWOC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWOC_A {
                match self.bits {
                    false => SWOC_A::_0,
                    true => SWOC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SWOC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SWOC_A::_1
            }
        }
        #[doc = "Write proxy for field `SWOC`"]
        pub struct SWOC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWOC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWOC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SWOCTRL register is updated with its buffer value at all rising edges of system clock."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SWOC_A::_0)
            }
            #[doc = "SWOCTRL register is updated with its buffer value by the PWM synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SWOC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Synchronization Mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SYNCMODE_A {
            #[doc = "0: Legacy PWM synchronization is selected."]
            _0 = 0,
            #[doc = "1: Enhanced PWM synchronization is selected."]
            _1 = 1,
        }
        impl From<SYNCMODE_A> for bool {
            #[inline(always)]
            fn from(variant: SYNCMODE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SYNCMODE`"]
        pub type SYNCMODE_R = crate::R<bool, SYNCMODE_A>;
        impl SYNCMODE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SYNCMODE_A {
                match self.bits {
                    false => SYNCMODE_A::_0,
                    true => SYNCMODE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SYNCMODE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SYNCMODE_A::_1
            }
        }
        #[doc = "Write proxy for field `SYNCMODE`"]
        pub struct SYNCMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNCMODE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SYNCMODE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Legacy PWM synchronization is selected."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SYNCMODE_A::_0)
            }
            #[doc = "Enhanced PWM synchronization is selected."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SYNCMODE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "FTM counter synchronization is activated by the software trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWRSTCNT_A {
            #[doc = "0: The software trigger does not activate the FTM counter synchronization."]
            _0 = 0,
            #[doc = "1: The software trigger activates the FTM counter synchronization."]
            _1 = 1,
        }
        impl From<SWRSTCNT_A> for bool {
            #[inline(always)]
            fn from(variant: SWRSTCNT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWRSTCNT`"]
        pub type SWRSTCNT_R = crate::R<bool, SWRSTCNT_A>;
        impl SWRSTCNT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWRSTCNT_A {
                match self.bits {
                    false => SWRSTCNT_A::_0,
                    true => SWRSTCNT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SWRSTCNT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SWRSTCNT_A::_1
            }
        }
        #[doc = "Write proxy for field `SWRSTCNT`"]
        pub struct SWRSTCNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWRSTCNT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWRSTCNT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software trigger does not activate the FTM counter synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SWRSTCNT_A::_0)
            }
            #[doc = "The software trigger activates the FTM counter synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SWRSTCNT_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "MOD, CNTIN, and CV registers synchronization is activated by the software trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWWRBUF_A {
            #[doc = "0: The software trigger does not activate MOD, CNTIN, and CV registers synchronization."]
            _0 = 0,
            #[doc = "1: The software trigger activates MOD, CNTIN, and CV registers synchronization."]
            _1 = 1,
        }
        impl From<SWWRBUF_A> for bool {
            #[inline(always)]
            fn from(variant: SWWRBUF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWWRBUF`"]
        pub type SWWRBUF_R = crate::R<bool, SWWRBUF_A>;
        impl SWWRBUF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWWRBUF_A {
                match self.bits {
                    false => SWWRBUF_A::_0,
                    true => SWWRBUF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SWWRBUF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SWWRBUF_A::_1
            }
        }
        #[doc = "Write proxy for field `SWWRBUF`"]
        pub struct SWWRBUF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWWRBUF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWWRBUF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software trigger does not activate MOD, CNTIN, and CV registers synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SWWRBUF_A::_0)
            }
            #[doc = "The software trigger activates MOD, CNTIN, and CV registers synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SWWRBUF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Output mask synchronization is activated by the software trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWOM_A {
            #[doc = "0: The software trigger does not activate the OUTMASK register synchronization."]
            _0 = 0,
            #[doc = "1: The software trigger activates the OUTMASK register synchronization."]
            _1 = 1,
        }
        impl From<SWOM_A> for bool {
            #[inline(always)]
            fn from(variant: SWOM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWOM`"]
        pub type SWOM_R = crate::R<bool, SWOM_A>;
        impl SWOM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWOM_A {
                match self.bits {
                    false => SWOM_A::_0,
                    true => SWOM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SWOM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SWOM_A::_1
            }
        }
        #[doc = "Write proxy for field `SWOM`"]
        pub struct SWOM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWOM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWOM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software trigger does not activate the OUTMASK register synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SWOM_A::_0)
            }
            #[doc = "The software trigger activates the OUTMASK register synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SWOM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Inverting control synchronization is activated by the software trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWINVC_A {
            #[doc = "0: The software trigger does not activate the INVCTRL register synchronization."]
            _0 = 0,
            #[doc = "1: The software trigger activates the INVCTRL register synchronization."]
            _1 = 1,
        }
        impl From<SWINVC_A> for bool {
            #[inline(always)]
            fn from(variant: SWINVC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWINVC`"]
        pub type SWINVC_R = crate::R<bool, SWINVC_A>;
        impl SWINVC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWINVC_A {
                match self.bits {
                    false => SWINVC_A::_0,
                    true => SWINVC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SWINVC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SWINVC_A::_1
            }
        }
        #[doc = "Write proxy for field `SWINVC`"]
        pub struct SWINVC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWINVC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWINVC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software trigger does not activate the INVCTRL register synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SWINVC_A::_0)
            }
            #[doc = "The software trigger activates the INVCTRL register synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SWINVC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Software output control synchronization is activated by the software trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWSOC_A {
            #[doc = "0: The software trigger does not activate the SWOCTRL register synchronization."]
            _0 = 0,
            #[doc = "1: The software trigger activates the SWOCTRL register synchronization."]
            _1 = 1,
        }
        impl From<SWSOC_A> for bool {
            #[inline(always)]
            fn from(variant: SWSOC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWSOC`"]
        pub type SWSOC_R = crate::R<bool, SWSOC_A>;
        impl SWSOC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWSOC_A {
                match self.bits {
                    false => SWSOC_A::_0,
                    true => SWSOC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SWSOC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SWSOC_A::_1
            }
        }
        #[doc = "Write proxy for field `SWSOC`"]
        pub struct SWSOC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWSOC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWSOC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software trigger does not activate the SWOCTRL register synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SWSOC_A::_0)
            }
            #[doc = "The software trigger activates the SWOCTRL register synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SWSOC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "FTM counter synchronization is activated by a hardware trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HWRSTCNT_A {
            #[doc = "0: A hardware trigger does not activate the FTM counter synchronization."]
            _0 = 0,
            #[doc = "1: A hardware trigger activates the FTM counter synchronization."]
            _1 = 1,
        }
        impl From<HWRSTCNT_A> for bool {
            #[inline(always)]
            fn from(variant: HWRSTCNT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HWRSTCNT`"]
        pub type HWRSTCNT_R = crate::R<bool, HWRSTCNT_A>;
        impl HWRSTCNT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HWRSTCNT_A {
                match self.bits {
                    false => HWRSTCNT_A::_0,
                    true => HWRSTCNT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HWRSTCNT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HWRSTCNT_A::_1
            }
        }
        #[doc = "Write proxy for field `HWRSTCNT`"]
        pub struct HWRSTCNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HWRSTCNT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HWRSTCNT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "A hardware trigger does not activate the FTM counter synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HWRSTCNT_A::_0)
            }
            #[doc = "A hardware trigger activates the FTM counter synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HWRSTCNT_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "MOD, CNTIN, and CV registers synchronization is activated by a hardware trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HWWRBUF_A {
            #[doc = "0: A hardware trigger does not activate MOD, CNTIN, and CV registers synchronization."]
            _0 = 0,
            #[doc = "1: A hardware trigger activates MOD, CNTIN, and CV registers synchronization."]
            _1 = 1,
        }
        impl From<HWWRBUF_A> for bool {
            #[inline(always)]
            fn from(variant: HWWRBUF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HWWRBUF`"]
        pub type HWWRBUF_R = crate::R<bool, HWWRBUF_A>;
        impl HWWRBUF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HWWRBUF_A {
                match self.bits {
                    false => HWWRBUF_A::_0,
                    true => HWWRBUF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HWWRBUF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HWWRBUF_A::_1
            }
        }
        #[doc = "Write proxy for field `HWWRBUF`"]
        pub struct HWWRBUF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HWWRBUF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HWWRBUF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "A hardware trigger does not activate MOD, CNTIN, and CV registers synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HWWRBUF_A::_0)
            }
            #[doc = "A hardware trigger activates MOD, CNTIN, and CV registers synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HWWRBUF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Output mask synchronization is activated by a hardware trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HWOM_A {
            #[doc = "0: A hardware trigger does not activate the OUTMASK register synchronization."]
            _0 = 0,
            #[doc = "1: A hardware trigger activates the OUTMASK register synchronization."]
            _1 = 1,
        }
        impl From<HWOM_A> for bool {
            #[inline(always)]
            fn from(variant: HWOM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HWOM`"]
        pub type HWOM_R = crate::R<bool, HWOM_A>;
        impl HWOM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HWOM_A {
                match self.bits {
                    false => HWOM_A::_0,
                    true => HWOM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HWOM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HWOM_A::_1
            }
        }
        #[doc = "Write proxy for field `HWOM`"]
        pub struct HWOM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HWOM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HWOM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "A hardware trigger does not activate the OUTMASK register synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HWOM_A::_0)
            }
            #[doc = "A hardware trigger activates the OUTMASK register synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HWOM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Inverting control synchronization is activated by a hardware trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HWINVC_A {
            #[doc = "0: A hardware trigger does not activate the INVCTRL register synchronization."]
            _0 = 0,
            #[doc = "1: A hardware trigger activates the INVCTRL register synchronization."]
            _1 = 1,
        }
        impl From<HWINVC_A> for bool {
            #[inline(always)]
            fn from(variant: HWINVC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HWINVC`"]
        pub type HWINVC_R = crate::R<bool, HWINVC_A>;
        impl HWINVC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HWINVC_A {
                match self.bits {
                    false => HWINVC_A::_0,
                    true => HWINVC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HWINVC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HWINVC_A::_1
            }
        }
        #[doc = "Write proxy for field `HWINVC`"]
        pub struct HWINVC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HWINVC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HWINVC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "A hardware trigger does not activate the INVCTRL register synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HWINVC_A::_0)
            }
            #[doc = "A hardware trigger activates the INVCTRL register synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HWINVC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Software output control synchronization is activated by a hardware trigger.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HWSOC_A {
            #[doc = "0: A hardware trigger does not activate the SWOCTRL register synchronization."]
            _0 = 0,
            #[doc = "1: A hardware trigger activates the SWOCTRL register synchronization."]
            _1 = 1,
        }
        impl From<HWSOC_A> for bool {
            #[inline(always)]
            fn from(variant: HWSOC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HWSOC`"]
        pub type HWSOC_R = crate::R<bool, HWSOC_A>;
        impl HWSOC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HWSOC_A {
                match self.bits {
                    false => HWSOC_A::_0,
                    true => HWSOC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HWSOC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HWSOC_A::_1
            }
        }
        #[doc = "Write proxy for field `HWSOC`"]
        pub struct HWSOC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HWSOC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HWSOC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "A hardware trigger does not activate the SWOCTRL register synchronization."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HWSOC_A::_0)
            }
            #[doc = "A hardware trigger activates the SWOCTRL register synchronization."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HWSOC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Hardware Trigger Mode"]
            #[inline(always)]
            pub fn hwtrigmode(&self) -> HWTRIGMODE_R {
                HWTRIGMODE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 2 - CNTIN Register Synchronization"]
            #[inline(always)]
            pub fn cntinc(&self) -> CNTINC_R {
                CNTINC_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 4 - INVCTRL Register Synchronization"]
            #[inline(always)]
            pub fn invc(&self) -> INVC_R {
                INVC_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - SWOCTRL Register Synchronization"]
            #[inline(always)]
            pub fn swoc(&self) -> SWOC_R {
                SWOC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Synchronization Mode"]
            #[inline(always)]
            pub fn syncmode(&self) -> SYNCMODE_R {
                SYNCMODE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - FTM counter synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swrstcnt(&self) -> SWRSTCNT_R {
                SWRSTCNT_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - MOD, CNTIN, and CV registers synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swwrbuf(&self) -> SWWRBUF_R {
                SWWRBUF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Output mask synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swom(&self) -> SWOM_R {
                SWOM_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Inverting control synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swinvc(&self) -> SWINVC_R {
                SWINVC_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Software output control synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swsoc(&self) -> SWSOC_R {
                SWSOC_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 16 - FTM counter synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwrstcnt(&self) -> HWRSTCNT_R {
                HWRSTCNT_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - MOD, CNTIN, and CV registers synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwwrbuf(&self) -> HWWRBUF_R {
                HWWRBUF_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Output mask synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwom(&self) -> HWOM_R {
                HWOM_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Inverting control synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwinvc(&self) -> HWINVC_R {
                HWINVC_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Software output control synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwsoc(&self) -> HWSOC_R {
                HWSOC_R::new(((self.bits >> 20) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Hardware Trigger Mode"]
            #[inline(always)]
            pub fn hwtrigmode(&mut self) -> HWTRIGMODE_W {
                HWTRIGMODE_W { w: self }
            }
            #[doc = "Bit 2 - CNTIN Register Synchronization"]
            #[inline(always)]
            pub fn cntinc(&mut self) -> CNTINC_W {
                CNTINC_W { w: self }
            }
            #[doc = "Bit 4 - INVCTRL Register Synchronization"]
            #[inline(always)]
            pub fn invc(&mut self) -> INVC_W {
                INVC_W { w: self }
            }
            #[doc = "Bit 5 - SWOCTRL Register Synchronization"]
            #[inline(always)]
            pub fn swoc(&mut self) -> SWOC_W {
                SWOC_W { w: self }
            }
            #[doc = "Bit 7 - Synchronization Mode"]
            #[inline(always)]
            pub fn syncmode(&mut self) -> SYNCMODE_W {
                SYNCMODE_W { w: self }
            }
            #[doc = "Bit 8 - FTM counter synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swrstcnt(&mut self) -> SWRSTCNT_W {
                SWRSTCNT_W { w: self }
            }
            #[doc = "Bit 9 - MOD, CNTIN, and CV registers synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swwrbuf(&mut self) -> SWWRBUF_W {
                SWWRBUF_W { w: self }
            }
            #[doc = "Bit 10 - Output mask synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swom(&mut self) -> SWOM_W {
                SWOM_W { w: self }
            }
            #[doc = "Bit 11 - Inverting control synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swinvc(&mut self) -> SWINVC_W {
                SWINVC_W { w: self }
            }
            #[doc = "Bit 12 - Software output control synchronization is activated by the software trigger."]
            #[inline(always)]
            pub fn swsoc(&mut self) -> SWSOC_W {
                SWSOC_W { w: self }
            }
            #[doc = "Bit 16 - FTM counter synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwrstcnt(&mut self) -> HWRSTCNT_W {
                HWRSTCNT_W { w: self }
            }
            #[doc = "Bit 17 - MOD, CNTIN, and CV registers synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwwrbuf(&mut self) -> HWWRBUF_W {
                HWWRBUF_W { w: self }
            }
            #[doc = "Bit 18 - Output mask synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwom(&mut self) -> HWOM_W {
                HWOM_W { w: self }
            }
            #[doc = "Bit 19 - Inverting control synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwinvc(&mut self) -> HWINVC_W {
                HWINVC_W { w: self }
            }
            #[doc = "Bit 20 - Software output control synchronization is activated by a hardware trigger."]
            #[inline(always)]
            pub fn hwsoc(&mut self) -> HWSOC_W {
                HWSOC_W { w: self }
            }
        }
    }
    #[doc = "FTM Inverting Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [invctrl](invctrl) module"]
    pub type INVCTRL = crate::Reg<u32, _INVCTRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _INVCTRL;
    #[doc = "`read()` method returns [invctrl::R](invctrl::R) reader structure"]
    impl crate::Readable for INVCTRL {}
    #[doc = "`write(|w| ..)` method takes [invctrl::W](invctrl::W) writer structure"]
    impl crate::Writable for INVCTRL {}
    #[doc = "FTM Inverting Control"]
    pub mod invctrl {
        #[doc = "Reader of register INVCTRL"]
        pub type R = crate::R<u32, super::INVCTRL>;
        #[doc = "Writer for register INVCTRL"]
        pub type W = crate::W<u32, super::INVCTRL>;
        #[doc = "Register INVCTRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::INVCTRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Pair Channels 0 Inverting Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum INV0EN_A {
            #[doc = "0: Inverting is disabled."]
            _0 = 0,
            #[doc = "1: Inverting is enabled."]
            _1 = 1,
        }
        impl From<INV0EN_A> for bool {
            #[inline(always)]
            fn from(variant: INV0EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `INV0EN`"]
        pub type INV0EN_R = crate::R<bool, INV0EN_A>;
        impl INV0EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> INV0EN_A {
                match self.bits {
                    false => INV0EN_A::_0,
                    true => INV0EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == INV0EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == INV0EN_A::_1
            }
        }
        #[doc = "Write proxy for field `INV0EN`"]
        pub struct INV0EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INV0EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: INV0EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Inverting is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(INV0EN_A::_0)
            }
            #[doc = "Inverting is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(INV0EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Pair Channels 1 Inverting Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum INV1EN_A {
            #[doc = "0: Inverting is disabled."]
            _0 = 0,
            #[doc = "1: Inverting is enabled."]
            _1 = 1,
        }
        impl From<INV1EN_A> for bool {
            #[inline(always)]
            fn from(variant: INV1EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `INV1EN`"]
        pub type INV1EN_R = crate::R<bool, INV1EN_A>;
        impl INV1EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> INV1EN_A {
                match self.bits {
                    false => INV1EN_A::_0,
                    true => INV1EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == INV1EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == INV1EN_A::_1
            }
        }
        #[doc = "Write proxy for field `INV1EN`"]
        pub struct INV1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INV1EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: INV1EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Inverting is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(INV1EN_A::_0)
            }
            #[doc = "Inverting is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(INV1EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Pair Channels 2 Inverting Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum INV2EN_A {
            #[doc = "0: Inverting is disabled."]
            _0 = 0,
            #[doc = "1: Inverting is enabled."]
            _1 = 1,
        }
        impl From<INV2EN_A> for bool {
            #[inline(always)]
            fn from(variant: INV2EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `INV2EN`"]
        pub type INV2EN_R = crate::R<bool, INV2EN_A>;
        impl INV2EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> INV2EN_A {
                match self.bits {
                    false => INV2EN_A::_0,
                    true => INV2EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == INV2EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == INV2EN_A::_1
            }
        }
        #[doc = "Write proxy for field `INV2EN`"]
        pub struct INV2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INV2EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: INV2EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Inverting is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(INV2EN_A::_0)
            }
            #[doc = "Inverting is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(INV2EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Pair Channels 3 Inverting Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum INV3EN_A {
            #[doc = "0: Inverting is disabled."]
            _0 = 0,
            #[doc = "1: Inverting is enabled."]
            _1 = 1,
        }
        impl From<INV3EN_A> for bool {
            #[inline(always)]
            fn from(variant: INV3EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `INV3EN`"]
        pub type INV3EN_R = crate::R<bool, INV3EN_A>;
        impl INV3EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> INV3EN_A {
                match self.bits {
                    false => INV3EN_A::_0,
                    true => INV3EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == INV3EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == INV3EN_A::_1
            }
        }
        #[doc = "Write proxy for field `INV3EN`"]
        pub struct INV3EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INV3EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: INV3EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Inverting is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(INV3EN_A::_0)
            }
            #[doc = "Inverting is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(INV3EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Pair Channels 0 Inverting Enable"]
            #[inline(always)]
            pub fn inv0en(&self) -> INV0EN_R {
                INV0EN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Pair Channels 1 Inverting Enable"]
            #[inline(always)]
            pub fn inv1en(&self) -> INV1EN_R {
                INV1EN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Pair Channels 2 Inverting Enable"]
            #[inline(always)]
            pub fn inv2en(&self) -> INV2EN_R {
                INV2EN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Pair Channels 3 Inverting Enable"]
            #[inline(always)]
            pub fn inv3en(&self) -> INV3EN_R {
                INV3EN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Pair Channels 0 Inverting Enable"]
            #[inline(always)]
            pub fn inv0en(&mut self) -> INV0EN_W {
                INV0EN_W { w: self }
            }
            #[doc = "Bit 1 - Pair Channels 1 Inverting Enable"]
            #[inline(always)]
            pub fn inv1en(&mut self) -> INV1EN_W {
                INV1EN_W { w: self }
            }
            #[doc = "Bit 2 - Pair Channels 2 Inverting Enable"]
            #[inline(always)]
            pub fn inv2en(&mut self) -> INV2EN_W {
                INV2EN_W { w: self }
            }
            #[doc = "Bit 3 - Pair Channels 3 Inverting Enable"]
            #[inline(always)]
            pub fn inv3en(&mut self) -> INV3EN_W {
                INV3EN_W { w: self }
            }
        }
    }
    #[doc = "FTM Software Output Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [swoctrl](swoctrl) module"]
    pub type SWOCTRL = crate::Reg<u32, _SWOCTRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SWOCTRL;
    #[doc = "`read()` method returns [swoctrl::R](swoctrl::R) reader structure"]
    impl crate::Readable for SWOCTRL {}
    #[doc = "`write(|w| ..)` method takes [swoctrl::W](swoctrl::W) writer structure"]
    impl crate::Writable for SWOCTRL {}
    #[doc = "FTM Software Output Control"]
    pub mod swoctrl {
        #[doc = "Reader of register SWOCTRL"]
        pub type R = crate::R<u32, super::SWOCTRL>;
        #[doc = "Writer for register SWOCTRL"]
        pub type W = crate::W<u32, super::SWOCTRL>;
        #[doc = "Register SWOCTRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::SWOCTRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Channel 0 Software Output Control Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH0OC_A {
            #[doc = "0: The channel output is not affected by software output control."]
            _0 = 0,
            #[doc = "1: The channel output is affected by software output control."]
            _1 = 1,
        }
        impl From<CH0OC_A> for bool {
            #[inline(always)]
            fn from(variant: CH0OC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH0OC`"]
        pub type CH0OC_R = crate::R<bool, CH0OC_A>;
        impl CH0OC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH0OC_A {
                match self.bits {
                    false => CH0OC_A::_0,
                    true => CH0OC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH0OC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH0OC_A::_1
            }
        }
        #[doc = "Write proxy for field `CH0OC`"]
        pub struct CH0OC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0OC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH0OC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel output is not affected by software output control."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH0OC_A::_0)
            }
            #[doc = "The channel output is affected by software output control."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH0OC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Channel 1 Software Output Control Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH1OC_A {
            #[doc = "0: The channel output is not affected by software output control."]
            _0 = 0,
            #[doc = "1: The channel output is affected by software output control."]
            _1 = 1,
        }
        impl From<CH1OC_A> for bool {
            #[inline(always)]
            fn from(variant: CH1OC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH1OC`"]
        pub type CH1OC_R = crate::R<bool, CH1OC_A>;
        impl CH1OC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH1OC_A {
                match self.bits {
                    false => CH1OC_A::_0,
                    true => CH1OC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH1OC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH1OC_A::_1
            }
        }
        #[doc = "Write proxy for field `CH1OC`"]
        pub struct CH1OC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1OC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH1OC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel output is not affected by software output control."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH1OC_A::_0)
            }
            #[doc = "The channel output is affected by software output control."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH1OC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Channel 2 Software Output Control Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH2OC_A {
            #[doc = "0: The channel output is not affected by software output control."]
            _0 = 0,
            #[doc = "1: The channel output is affected by software output control."]
            _1 = 1,
        }
        impl From<CH2OC_A> for bool {
            #[inline(always)]
            fn from(variant: CH2OC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH2OC`"]
        pub type CH2OC_R = crate::R<bool, CH2OC_A>;
        impl CH2OC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH2OC_A {
                match self.bits {
                    false => CH2OC_A::_0,
                    true => CH2OC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH2OC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH2OC_A::_1
            }
        }
        #[doc = "Write proxy for field `CH2OC`"]
        pub struct CH2OC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2OC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH2OC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel output is not affected by software output control."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH2OC_A::_0)
            }
            #[doc = "The channel output is affected by software output control."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH2OC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel 3 Software Output Control Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH3OC_A {
            #[doc = "0: The channel output is not affected by software output control."]
            _0 = 0,
            #[doc = "1: The channel output is affected by software output control."]
            _1 = 1,
        }
        impl From<CH3OC_A> for bool {
            #[inline(always)]
            fn from(variant: CH3OC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH3OC`"]
        pub type CH3OC_R = crate::R<bool, CH3OC_A>;
        impl CH3OC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH3OC_A {
                match self.bits {
                    false => CH3OC_A::_0,
                    true => CH3OC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH3OC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH3OC_A::_1
            }
        }
        #[doc = "Write proxy for field `CH3OC`"]
        pub struct CH3OC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3OC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH3OC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel output is not affected by software output control."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH3OC_A::_0)
            }
            #[doc = "The channel output is affected by software output control."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH3OC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Channel 4 Software Output Control Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH4OC_A {
            #[doc = "0: The channel output is not affected by software output control."]
            _0 = 0,
            #[doc = "1: The channel output is affected by software output control."]
            _1 = 1,
        }
        impl From<CH4OC_A> for bool {
            #[inline(always)]
            fn from(variant: CH4OC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH4OC`"]
        pub type CH4OC_R = crate::R<bool, CH4OC_A>;
        impl CH4OC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH4OC_A {
                match self.bits {
                    false => CH4OC_A::_0,
                    true => CH4OC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH4OC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH4OC_A::_1
            }
        }
        #[doc = "Write proxy for field `CH4OC`"]
        pub struct CH4OC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH4OC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH4OC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel output is not affected by software output control."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH4OC_A::_0)
            }
            #[doc = "The channel output is affected by software output control."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH4OC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Channel 5 Software Output Control Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH5OC_A {
            #[doc = "0: The channel output is not affected by software output control."]
            _0 = 0,
            #[doc = "1: The channel output is affected by software output control."]
            _1 = 1,
        }
        impl From<CH5OC_A> for bool {
            #[inline(always)]
            fn from(variant: CH5OC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH5OC`"]
        pub type CH5OC_R = crate::R<bool, CH5OC_A>;
        impl CH5OC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH5OC_A {
                match self.bits {
                    false => CH5OC_A::_0,
                    true => CH5OC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH5OC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH5OC_A::_1
            }
        }
        #[doc = "Write proxy for field `CH5OC`"]
        pub struct CH5OC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH5OC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH5OC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel output is not affected by software output control."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH5OC_A::_0)
            }
            #[doc = "The channel output is affected by software output control."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH5OC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Channel 6 Software Output Control Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH6OC_A {
            #[doc = "0: The channel output is not affected by software output control."]
            _0 = 0,
            #[doc = "1: The channel output is affected by software output control."]
            _1 = 1,
        }
        impl From<CH6OC_A> for bool {
            #[inline(always)]
            fn from(variant: CH6OC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH6OC`"]
        pub type CH6OC_R = crate::R<bool, CH6OC_A>;
        impl CH6OC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH6OC_A {
                match self.bits {
                    false => CH6OC_A::_0,
                    true => CH6OC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH6OC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH6OC_A::_1
            }
        }
        #[doc = "Write proxy for field `CH6OC`"]
        pub struct CH6OC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH6OC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH6OC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel output is not affected by software output control."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH6OC_A::_0)
            }
            #[doc = "The channel output is affected by software output control."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH6OC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel 7 Software Output Control Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH7OC_A {
            #[doc = "0: The channel output is not affected by software output control."]
            _0 = 0,
            #[doc = "1: The channel output is affected by software output control."]
            _1 = 1,
        }
        impl From<CH7OC_A> for bool {
            #[inline(always)]
            fn from(variant: CH7OC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH7OC`"]
        pub type CH7OC_R = crate::R<bool, CH7OC_A>;
        impl CH7OC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH7OC_A {
                match self.bits {
                    false => CH7OC_A::_0,
                    true => CH7OC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH7OC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH7OC_A::_1
            }
        }
        #[doc = "Write proxy for field `CH7OC`"]
        pub struct CH7OC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH7OC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH7OC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The channel output is not affected by software output control."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH7OC_A::_0)
            }
            #[doc = "The channel output is affected by software output control."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH7OC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Channel 0 Software Output Control Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH0OCV_A {
            #[doc = "0: The software output control forces 0 to the channel output."]
            _0 = 0,
            #[doc = "1: The software output control forces 1 to the channel output."]
            _1 = 1,
        }
        impl From<CH0OCV_A> for bool {
            #[inline(always)]
            fn from(variant: CH0OCV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH0OCV`"]
        pub type CH0OCV_R = crate::R<bool, CH0OCV_A>;
        impl CH0OCV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH0OCV_A {
                match self.bits {
                    false => CH0OCV_A::_0,
                    true => CH0OCV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH0OCV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH0OCV_A::_1
            }
        }
        #[doc = "Write proxy for field `CH0OCV`"]
        pub struct CH0OCV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0OCV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH0OCV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software output control forces 0 to the channel output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH0OCV_A::_0)
            }
            #[doc = "The software output control forces 1 to the channel output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH0OCV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Channel 1 Software Output Control Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH1OCV_A {
            #[doc = "0: The software output control forces 0 to the channel output."]
            _0 = 0,
            #[doc = "1: The software output control forces 1 to the channel output."]
            _1 = 1,
        }
        impl From<CH1OCV_A> for bool {
            #[inline(always)]
            fn from(variant: CH1OCV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH1OCV`"]
        pub type CH1OCV_R = crate::R<bool, CH1OCV_A>;
        impl CH1OCV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH1OCV_A {
                match self.bits {
                    false => CH1OCV_A::_0,
                    true => CH1OCV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH1OCV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH1OCV_A::_1
            }
        }
        #[doc = "Write proxy for field `CH1OCV`"]
        pub struct CH1OCV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1OCV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH1OCV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software output control forces 0 to the channel output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH1OCV_A::_0)
            }
            #[doc = "The software output control forces 1 to the channel output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH1OCV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Channel 2 Software Output Control Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH2OCV_A {
            #[doc = "0: The software output control forces 0 to the channel output."]
            _0 = 0,
            #[doc = "1: The software output control forces 1 to the channel output."]
            _1 = 1,
        }
        impl From<CH2OCV_A> for bool {
            #[inline(always)]
            fn from(variant: CH2OCV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH2OCV`"]
        pub type CH2OCV_R = crate::R<bool, CH2OCV_A>;
        impl CH2OCV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH2OCV_A {
                match self.bits {
                    false => CH2OCV_A::_0,
                    true => CH2OCV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH2OCV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH2OCV_A::_1
            }
        }
        #[doc = "Write proxy for field `CH2OCV`"]
        pub struct CH2OCV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2OCV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH2OCV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software output control forces 0 to the channel output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH2OCV_A::_0)
            }
            #[doc = "The software output control forces 1 to the channel output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH2OCV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Channel 3 Software Output Control Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH3OCV_A {
            #[doc = "0: The software output control forces 0 to the channel output."]
            _0 = 0,
            #[doc = "1: The software output control forces 1 to the channel output."]
            _1 = 1,
        }
        impl From<CH3OCV_A> for bool {
            #[inline(always)]
            fn from(variant: CH3OCV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH3OCV`"]
        pub type CH3OCV_R = crate::R<bool, CH3OCV_A>;
        impl CH3OCV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH3OCV_A {
                match self.bits {
                    false => CH3OCV_A::_0,
                    true => CH3OCV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH3OCV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH3OCV_A::_1
            }
        }
        #[doc = "Write proxy for field `CH3OCV`"]
        pub struct CH3OCV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3OCV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH3OCV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software output control forces 0 to the channel output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH3OCV_A::_0)
            }
            #[doc = "The software output control forces 1 to the channel output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH3OCV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Channel 4 Software Output Control Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH4OCV_A {
            #[doc = "0: The software output control forces 0 to the channel output."]
            _0 = 0,
            #[doc = "1: The software output control forces 1 to the channel output."]
            _1 = 1,
        }
        impl From<CH4OCV_A> for bool {
            #[inline(always)]
            fn from(variant: CH4OCV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH4OCV`"]
        pub type CH4OCV_R = crate::R<bool, CH4OCV_A>;
        impl CH4OCV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH4OCV_A {
                match self.bits {
                    false => CH4OCV_A::_0,
                    true => CH4OCV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH4OCV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH4OCV_A::_1
            }
        }
        #[doc = "Write proxy for field `CH4OCV`"]
        pub struct CH4OCV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH4OCV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH4OCV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software output control forces 0 to the channel output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH4OCV_A::_0)
            }
            #[doc = "The software output control forces 1 to the channel output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH4OCV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Channel 5 Software Output Control Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH5OCV_A {
            #[doc = "0: The software output control forces 0 to the channel output."]
            _0 = 0,
            #[doc = "1: The software output control forces 1 to the channel output."]
            _1 = 1,
        }
        impl From<CH5OCV_A> for bool {
            #[inline(always)]
            fn from(variant: CH5OCV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH5OCV`"]
        pub type CH5OCV_R = crate::R<bool, CH5OCV_A>;
        impl CH5OCV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH5OCV_A {
                match self.bits {
                    false => CH5OCV_A::_0,
                    true => CH5OCV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH5OCV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH5OCV_A::_1
            }
        }
        #[doc = "Write proxy for field `CH5OCV`"]
        pub struct CH5OCV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH5OCV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH5OCV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software output control forces 0 to the channel output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH5OCV_A::_0)
            }
            #[doc = "The software output control forces 1 to the channel output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH5OCV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Channel 6 Software Output Control Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH6OCV_A {
            #[doc = "0: The software output control forces 0 to the channel output."]
            _0 = 0,
            #[doc = "1: The software output control forces 1 to the channel output."]
            _1 = 1,
        }
        impl From<CH6OCV_A> for bool {
            #[inline(always)]
            fn from(variant: CH6OCV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH6OCV`"]
        pub type CH6OCV_R = crate::R<bool, CH6OCV_A>;
        impl CH6OCV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH6OCV_A {
                match self.bits {
                    false => CH6OCV_A::_0,
                    true => CH6OCV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH6OCV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH6OCV_A::_1
            }
        }
        #[doc = "Write proxy for field `CH6OCV`"]
        pub struct CH6OCV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH6OCV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH6OCV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software output control forces 0 to the channel output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH6OCV_A::_0)
            }
            #[doc = "The software output control forces 1 to the channel output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH6OCV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Channel 7 Software Output Control Value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH7OCV_A {
            #[doc = "0: The software output control forces 0 to the channel output."]
            _0 = 0,
            #[doc = "1: The software output control forces 1 to the channel output."]
            _1 = 1,
        }
        impl From<CH7OCV_A> for bool {
            #[inline(always)]
            fn from(variant: CH7OCV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH7OCV`"]
        pub type CH7OCV_R = crate::R<bool, CH7OCV_A>;
        impl CH7OCV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH7OCV_A {
                match self.bits {
                    false => CH7OCV_A::_0,
                    true => CH7OCV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH7OCV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH7OCV_A::_1
            }
        }
        #[doc = "Write proxy for field `CH7OCV`"]
        pub struct CH7OCV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH7OCV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH7OCV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The software output control forces 0 to the channel output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH7OCV_A::_0)
            }
            #[doc = "The software output control forces 1 to the channel output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH7OCV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel 0 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch0oc(&self) -> CH0OC_R {
                CH0OC_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 1 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch1oc(&self) -> CH1OC_R {
                CH1OC_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel 2 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch2oc(&self) -> CH2OC_R {
                CH2OC_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel 3 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch3oc(&self) -> CH3OC_R {
                CH3OC_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 4 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch4oc(&self) -> CH4OC_R {
                CH4OC_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 5 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch5oc(&self) -> CH5OC_R {
                CH5OC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel 6 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch6oc(&self) -> CH6OC_R {
                CH6OC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel 7 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch7oc(&self) -> CH7OC_R {
                CH7OC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Channel 0 Software Output Control Value"]
            #[inline(always)]
            pub fn ch0ocv(&self) -> CH0OCV_R {
                CH0OCV_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Channel 1 Software Output Control Value"]
            #[inline(always)]
            pub fn ch1ocv(&self) -> CH1OCV_R {
                CH1OCV_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Channel 2 Software Output Control Value"]
            #[inline(always)]
            pub fn ch2ocv(&self) -> CH2OCV_R {
                CH2OCV_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Channel 3 Software Output Control Value"]
            #[inline(always)]
            pub fn ch3ocv(&self) -> CH3OCV_R {
                CH3OCV_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Channel 4 Software Output Control Value"]
            #[inline(always)]
            pub fn ch4ocv(&self) -> CH4OCV_R {
                CH4OCV_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Channel 5 Software Output Control Value"]
            #[inline(always)]
            pub fn ch5ocv(&self) -> CH5OCV_R {
                CH5OCV_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Channel 6 Software Output Control Value"]
            #[inline(always)]
            pub fn ch6ocv(&self) -> CH6OCV_R {
                CH6OCV_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Channel 7 Software Output Control Value"]
            #[inline(always)]
            pub fn ch7ocv(&self) -> CH7OCV_R {
                CH7OCV_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 0 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch0oc(&mut self) -> CH0OC_W {
                CH0OC_W { w: self }
            }
            #[doc = "Bit 1 - Channel 1 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch1oc(&mut self) -> CH1OC_W {
                CH1OC_W { w: self }
            }
            #[doc = "Bit 2 - Channel 2 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch2oc(&mut self) -> CH2OC_W {
                CH2OC_W { w: self }
            }
            #[doc = "Bit 3 - Channel 3 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch3oc(&mut self) -> CH3OC_W {
                CH3OC_W { w: self }
            }
            #[doc = "Bit 4 - Channel 4 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch4oc(&mut self) -> CH4OC_W {
                CH4OC_W { w: self }
            }
            #[doc = "Bit 5 - Channel 5 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch5oc(&mut self) -> CH5OC_W {
                CH5OC_W { w: self }
            }
            #[doc = "Bit 6 - Channel 6 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch6oc(&mut self) -> CH6OC_W {
                CH6OC_W { w: self }
            }
            #[doc = "Bit 7 - Channel 7 Software Output Control Enable"]
            #[inline(always)]
            pub fn ch7oc(&mut self) -> CH7OC_W {
                CH7OC_W { w: self }
            }
            #[doc = "Bit 8 - Channel 0 Software Output Control Value"]
            #[inline(always)]
            pub fn ch0ocv(&mut self) -> CH0OCV_W {
                CH0OCV_W { w: self }
            }
            #[doc = "Bit 9 - Channel 1 Software Output Control Value"]
            #[inline(always)]
            pub fn ch1ocv(&mut self) -> CH1OCV_W {
                CH1OCV_W { w: self }
            }
            #[doc = "Bit 10 - Channel 2 Software Output Control Value"]
            #[inline(always)]
            pub fn ch2ocv(&mut self) -> CH2OCV_W {
                CH2OCV_W { w: self }
            }
            #[doc = "Bit 11 - Channel 3 Software Output Control Value"]
            #[inline(always)]
            pub fn ch3ocv(&mut self) -> CH3OCV_W {
                CH3OCV_W { w: self }
            }
            #[doc = "Bit 12 - Channel 4 Software Output Control Value"]
            #[inline(always)]
            pub fn ch4ocv(&mut self) -> CH4OCV_W {
                CH4OCV_W { w: self }
            }
            #[doc = "Bit 13 - Channel 5 Software Output Control Value"]
            #[inline(always)]
            pub fn ch5ocv(&mut self) -> CH5OCV_W {
                CH5OCV_W { w: self }
            }
            #[doc = "Bit 14 - Channel 6 Software Output Control Value"]
            #[inline(always)]
            pub fn ch6ocv(&mut self) -> CH6OCV_W {
                CH6OCV_W { w: self }
            }
            #[doc = "Bit 15 - Channel 7 Software Output Control Value"]
            #[inline(always)]
            pub fn ch7ocv(&mut self) -> CH7OCV_W {
                CH7OCV_W { w: self }
            }
        }
    }
    #[doc = "FTM PWM Load\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwmload](pwmload) module"]
    pub type PWMLOAD = crate::Reg<u32, _PWMLOAD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PWMLOAD;
    #[doc = "`read()` method returns [pwmload::R](pwmload::R) reader structure"]
    impl crate::Readable for PWMLOAD {}
    #[doc = "`write(|w| ..)` method takes [pwmload::W](pwmload::W) writer structure"]
    impl crate::Writable for PWMLOAD {}
    #[doc = "FTM PWM Load"]
    pub mod pwmload {
        #[doc = "Reader of register PWMLOAD"]
        pub type R = crate::R<u32, super::PWMLOAD>;
        #[doc = "Writer for register PWMLOAD"]
        pub type W = crate::W<u32, super::PWMLOAD>;
        #[doc = "Register PWMLOAD `reset()`'s with value 0"]
        impl crate::ResetValue for super::PWMLOAD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Channel 0 Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH0SEL_A {
            #[doc = "0: Do not include the channel in the matching process."]
            _0 = 0,
            #[doc = "1: Include the channel in the matching process."]
            _1 = 1,
        }
        impl From<CH0SEL_A> for bool {
            #[inline(always)]
            fn from(variant: CH0SEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH0SEL`"]
        pub type CH0SEL_R = crate::R<bool, CH0SEL_A>;
        impl CH0SEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH0SEL_A {
                match self.bits {
                    false => CH0SEL_A::_0,
                    true => CH0SEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH0SEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH0SEL_A::_1
            }
        }
        #[doc = "Write proxy for field `CH0SEL`"]
        pub struct CH0SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0SEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH0SEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Do not include the channel in the matching process."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH0SEL_A::_0)
            }
            #[doc = "Include the channel in the matching process."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH0SEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Channel 1 Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH1SEL_A {
            #[doc = "0: Do not include the channel in the matching process."]
            _0 = 0,
            #[doc = "1: Include the channel in the matching process."]
            _1 = 1,
        }
        impl From<CH1SEL_A> for bool {
            #[inline(always)]
            fn from(variant: CH1SEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH1SEL`"]
        pub type CH1SEL_R = crate::R<bool, CH1SEL_A>;
        impl CH1SEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH1SEL_A {
                match self.bits {
                    false => CH1SEL_A::_0,
                    true => CH1SEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH1SEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH1SEL_A::_1
            }
        }
        #[doc = "Write proxy for field `CH1SEL`"]
        pub struct CH1SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1SEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH1SEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Do not include the channel in the matching process."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH1SEL_A::_0)
            }
            #[doc = "Include the channel in the matching process."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH1SEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Channel 2 Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH2SEL_A {
            #[doc = "0: Do not include the channel in the matching process."]
            _0 = 0,
            #[doc = "1: Include the channel in the matching process."]
            _1 = 1,
        }
        impl From<CH2SEL_A> for bool {
            #[inline(always)]
            fn from(variant: CH2SEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH2SEL`"]
        pub type CH2SEL_R = crate::R<bool, CH2SEL_A>;
        impl CH2SEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH2SEL_A {
                match self.bits {
                    false => CH2SEL_A::_0,
                    true => CH2SEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH2SEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH2SEL_A::_1
            }
        }
        #[doc = "Write proxy for field `CH2SEL`"]
        pub struct CH2SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2SEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH2SEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Do not include the channel in the matching process."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH2SEL_A::_0)
            }
            #[doc = "Include the channel in the matching process."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH2SEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Channel 3 Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH3SEL_A {
            #[doc = "0: Do not include the channel in the matching process."]
            _0 = 0,
            #[doc = "1: Include the channel in the matching process."]
            _1 = 1,
        }
        impl From<CH3SEL_A> for bool {
            #[inline(always)]
            fn from(variant: CH3SEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH3SEL`"]
        pub type CH3SEL_R = crate::R<bool, CH3SEL_A>;
        impl CH3SEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH3SEL_A {
                match self.bits {
                    false => CH3SEL_A::_0,
                    true => CH3SEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH3SEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH3SEL_A::_1
            }
        }
        #[doc = "Write proxy for field `CH3SEL`"]
        pub struct CH3SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH3SEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH3SEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Do not include the channel in the matching process."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH3SEL_A::_0)
            }
            #[doc = "Include the channel in the matching process."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH3SEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Channel 4 Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH4SEL_A {
            #[doc = "0: Do not include the channel in the matching process."]
            _0 = 0,
            #[doc = "1: Include the channel in the matching process."]
            _1 = 1,
        }
        impl From<CH4SEL_A> for bool {
            #[inline(always)]
            fn from(variant: CH4SEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH4SEL`"]
        pub type CH4SEL_R = crate::R<bool, CH4SEL_A>;
        impl CH4SEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH4SEL_A {
                match self.bits {
                    false => CH4SEL_A::_0,
                    true => CH4SEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH4SEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH4SEL_A::_1
            }
        }
        #[doc = "Write proxy for field `CH4SEL`"]
        pub struct CH4SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH4SEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH4SEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Do not include the channel in the matching process."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH4SEL_A::_0)
            }
            #[doc = "Include the channel in the matching process."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH4SEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Channel 5 Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH5SEL_A {
            #[doc = "0: Do not include the channel in the matching process."]
            _0 = 0,
            #[doc = "1: Include the channel in the matching process."]
            _1 = 1,
        }
        impl From<CH5SEL_A> for bool {
            #[inline(always)]
            fn from(variant: CH5SEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH5SEL`"]
        pub type CH5SEL_R = crate::R<bool, CH5SEL_A>;
        impl CH5SEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH5SEL_A {
                match self.bits {
                    false => CH5SEL_A::_0,
                    true => CH5SEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH5SEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH5SEL_A::_1
            }
        }
        #[doc = "Write proxy for field `CH5SEL`"]
        pub struct CH5SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH5SEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH5SEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Do not include the channel in the matching process."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH5SEL_A::_0)
            }
            #[doc = "Include the channel in the matching process."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH5SEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Channel 6 Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH6SEL_A {
            #[doc = "0: Do not include the channel in the matching process."]
            _0 = 0,
            #[doc = "1: Include the channel in the matching process."]
            _1 = 1,
        }
        impl From<CH6SEL_A> for bool {
            #[inline(always)]
            fn from(variant: CH6SEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH6SEL`"]
        pub type CH6SEL_R = crate::R<bool, CH6SEL_A>;
        impl CH6SEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH6SEL_A {
                match self.bits {
                    false => CH6SEL_A::_0,
                    true => CH6SEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH6SEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH6SEL_A::_1
            }
        }
        #[doc = "Write proxy for field `CH6SEL`"]
        pub struct CH6SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH6SEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH6SEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Do not include the channel in the matching process."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH6SEL_A::_0)
            }
            #[doc = "Include the channel in the matching process."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH6SEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Channel 7 Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CH7SEL_A {
            #[doc = "0: Do not include the channel in the matching process."]
            _0 = 0,
            #[doc = "1: Include the channel in the matching process."]
            _1 = 1,
        }
        impl From<CH7SEL_A> for bool {
            #[inline(always)]
            fn from(variant: CH7SEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CH7SEL`"]
        pub type CH7SEL_R = crate::R<bool, CH7SEL_A>;
        impl CH7SEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CH7SEL_A {
                match self.bits {
                    false => CH7SEL_A::_0,
                    true => CH7SEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CH7SEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CH7SEL_A::_1
            }
        }
        #[doc = "Write proxy for field `CH7SEL`"]
        pub struct CH7SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH7SEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CH7SEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Do not include the channel in the matching process."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CH7SEL_A::_0)
            }
            #[doc = "Include the channel in the matching process."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CH7SEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Load Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LDOK_A {
            #[doc = "0: Loading updated values is disabled."]
            _0 = 0,
            #[doc = "1: Loading updated values is enabled."]
            _1 = 1,
        }
        impl From<LDOK_A> for bool {
            #[inline(always)]
            fn from(variant: LDOK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LDOK`"]
        pub type LDOK_R = crate::R<bool, LDOK_A>;
        impl LDOK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LDOK_A {
                match self.bits {
                    false => LDOK_A::_0,
                    true => LDOK_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LDOK_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LDOK_A::_1
            }
        }
        #[doc = "Write proxy for field `LDOK`"]
        pub struct LDOK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LDOK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LDOK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Loading updated values is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(LDOK_A::_0)
            }
            #[doc = "Loading updated values is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(LDOK_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel 0 Select"]
            #[inline(always)]
            pub fn ch0sel(&self) -> CH0SEL_R {
                CH0SEL_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 1 Select"]
            #[inline(always)]
            pub fn ch1sel(&self) -> CH1SEL_R {
                CH1SEL_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel 2 Select"]
            #[inline(always)]
            pub fn ch2sel(&self) -> CH2SEL_R {
                CH2SEL_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel 3 Select"]
            #[inline(always)]
            pub fn ch3sel(&self) -> CH3SEL_R {
                CH3SEL_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 4 Select"]
            #[inline(always)]
            pub fn ch4sel(&self) -> CH4SEL_R {
                CH4SEL_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 5 Select"]
            #[inline(always)]
            pub fn ch5sel(&self) -> CH5SEL_R {
                CH5SEL_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel 6 Select"]
            #[inline(always)]
            pub fn ch6sel(&self) -> CH6SEL_R {
                CH6SEL_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel 7 Select"]
            #[inline(always)]
            pub fn ch7sel(&self) -> CH7SEL_R {
                CH7SEL_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Load Enable"]
            #[inline(always)]
            pub fn ldok(&self) -> LDOK_R {
                LDOK_R::new(((self.bits >> 9) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 0 Select"]
            #[inline(always)]
            pub fn ch0sel(&mut self) -> CH0SEL_W {
                CH0SEL_W { w: self }
            }
            #[doc = "Bit 1 - Channel 1 Select"]
            #[inline(always)]
            pub fn ch1sel(&mut self) -> CH1SEL_W {
                CH1SEL_W { w: self }
            }
            #[doc = "Bit 2 - Channel 2 Select"]
            #[inline(always)]
            pub fn ch2sel(&mut self) -> CH2SEL_W {
                CH2SEL_W { w: self }
            }
            #[doc = "Bit 3 - Channel 3 Select"]
            #[inline(always)]
            pub fn ch3sel(&mut self) -> CH3SEL_W {
                CH3SEL_W { w: self }
            }
            #[doc = "Bit 4 - Channel 4 Select"]
            #[inline(always)]
            pub fn ch4sel(&mut self) -> CH4SEL_W {
                CH4SEL_W { w: self }
            }
            #[doc = "Bit 5 - Channel 5 Select"]
            #[inline(always)]
            pub fn ch5sel(&mut self) -> CH5SEL_W {
                CH5SEL_W { w: self }
            }
            #[doc = "Bit 6 - Channel 6 Select"]
            #[inline(always)]
            pub fn ch6sel(&mut self) -> CH6SEL_W {
                CH6SEL_W { w: self }
            }
            #[doc = "Bit 7 - Channel 7 Select"]
            #[inline(always)]
            pub fn ch7sel(&mut self) -> CH7SEL_W {
                CH7SEL_W { w: self }
            }
            #[doc = "Bit 9 - Load Enable"]
            #[inline(always)]
            pub fn ldok(&mut self) -> LDOK_W {
                LDOK_W { w: self }
            }
        }
    }
}
#[doc = "Analog-to-digital converter"]
pub struct ADC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC {}
impl ADC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc::RegisterBlock {
        0x4003_b000 as *const _
    }
}
impl Deref for ADC {
    type Target = adc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*ADC::ptr() }
    }
}
#[doc = "Analog-to-digital converter"]
pub mod adc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Status and Control Register 1"]
        pub sc1: SC1,
        #[doc = "0x04 - Status and Control Register 2"]
        pub sc2: SC2,
        #[doc = "0x08 - Status and Control Register 3"]
        pub sc3: SC3,
        #[doc = "0x0c - Status and Control Register 4"]
        pub sc4: SC4,
        #[doc = "0x10 - Conversion Result Register"]
        pub r: R,
        #[doc = "0x14 - Compare Value Register"]
        pub cv: CV,
        #[doc = "0x18 - Pin Control 1 Register"]
        pub apctl1: APCTL1,
        #[doc = "0x1c - Status and Control Register 5"]
        pub sc5: SC5,
    }
    #[doc = "Status and Control Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sc1](sc1) module"]
    pub type SC1 = crate::Reg<u32, _SC1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SC1;
    #[doc = "`read()` method returns [sc1::R](sc1::R) reader structure"]
    impl crate::Readable for SC1 {}
    #[doc = "`write(|w| ..)` method takes [sc1::W](sc1::W) writer structure"]
    impl crate::Writable for SC1 {}
    #[doc = "Status and Control Register 1"]
    pub mod sc1 {
        #[doc = "Reader of register SC1"]
        pub type R = crate::R<u32, super::SC1>;
        #[doc = "Writer for register SC1"]
        pub type W = crate::W<u32, super::SC1>;
        #[doc = "Register SC1 `reset()`'s with value 0x1f"]
        impl crate::ResetValue for super::SC1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x1f
            }
        }
        #[doc = "Input Channel Select\n\nValue on reset: 31"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ADCH_A {
            #[doc = "22: Temperature Sensor"]
            _10110 = 22,
            #[doc = "23: Bandgap"]
            _10111 = 23,
            #[doc = "29: VREFH"]
            _11101 = 29,
            #[doc = "30: VREFL"]
            _11110 = 30,
            #[doc = "31: Module disabled Reset FIFO in FIFO mode."]
            _11111 = 31,
        }
        impl From<ADCH_A> for u8 {
            #[inline(always)]
            fn from(variant: ADCH_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ADCH`"]
        pub type ADCH_R = crate::R<u8, ADCH_A>;
        impl ADCH_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, ADCH_A> {
                use crate::Variant::*;
                match self.bits {
                    22 => Val(ADCH_A::_10110),
                    23 => Val(ADCH_A::_10111),
                    29 => Val(ADCH_A::_11101),
                    30 => Val(ADCH_A::_11110),
                    31 => Val(ADCH_A::_11111),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_10110`"]
            #[inline(always)]
            pub fn is_10110(&self) -> bool {
                *self == ADCH_A::_10110
            }
            #[doc = "Checks if the value of the field is `_10111`"]
            #[inline(always)]
            pub fn is_10111(&self) -> bool {
                *self == ADCH_A::_10111
            }
            #[doc = "Checks if the value of the field is `_11101`"]
            #[inline(always)]
            pub fn is_11101(&self) -> bool {
                *self == ADCH_A::_11101
            }
            #[doc = "Checks if the value of the field is `_11110`"]
            #[inline(always)]
            pub fn is_11110(&self) -> bool {
                *self == ADCH_A::_11110
            }
            #[doc = "Checks if the value of the field is `_11111`"]
            #[inline(always)]
            pub fn is_11111(&self) -> bool {
                *self == ADCH_A::_11111
            }
        }
        #[doc = "Write proxy for field `ADCH`"]
        pub struct ADCH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCH_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADCH_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Temperature Sensor"]
            #[inline(always)]
            pub fn _10110(self) -> &'a mut W {
                self.variant(ADCH_A::_10110)
            }
            #[doc = "Bandgap"]
            #[inline(always)]
            pub fn _10111(self) -> &'a mut W {
                self.variant(ADCH_A::_10111)
            }
            #[doc = "VREFH"]
            #[inline(always)]
            pub fn _11101(self) -> &'a mut W {
                self.variant(ADCH_A::_11101)
            }
            #[doc = "VREFL"]
            #[inline(always)]
            pub fn _11110(self) -> &'a mut W {
                self.variant(ADCH_A::_11110)
            }
            #[doc = "Module disabled Reset FIFO in FIFO mode."]
            #[inline(always)]
            pub fn _11111(self) -> &'a mut W {
                self.variant(ADCH_A::_11111)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        #[doc = "Continuous Conversion Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADCO_A {
            #[doc = "0: One conversion following a write to the ADC_SC1 when software triggered operation is selected, or one conversion following assertion of ADHWT when hardware triggered operation is selected. When the FIFO function is enabled (AFDEP > 0), a set of conversion are triggered when ADC_SC2\\[ADTRG\\]=0 or both ADC_SC2\\[ADTRG\\]=1 and ADC_SC4\\[HTRGME\\]=1."]
            _0 = 0,
            #[doc = "1: Continuous conversions are initiated following a write to ADC_SC1 when software triggered operation is selected. Continuous conversions are initiated by an ADHWT event when hardware triggered operation is selected. When the FIFO function is enabled (AFDEP > 0), a set of conversions are loop triggered."]
            _1 = 1,
        }
        impl From<ADCO_A> for bool {
            #[inline(always)]
            fn from(variant: ADCO_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADCO`"]
        pub type ADCO_R = crate::R<bool, ADCO_A>;
        impl ADCO_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADCO_A {
                match self.bits {
                    false => ADCO_A::_0,
                    true => ADCO_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ADCO_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ADCO_A::_1
            }
        }
        #[doc = "Write proxy for field `ADCO`"]
        pub struct ADCO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCO_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADCO_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "One conversion following a write to the ADC_SC1 when software triggered operation is selected, or one conversion following assertion of ADHWT when hardware triggered operation is selected. When the FIFO function is enabled (AFDEP > 0), a set of conversion are triggered when ADC_SC2\\[ADTRG\\]=0 or both ADC_SC2\\[ADTRG\\]=1 and ADC_SC4\\[HTRGME\\]=1."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ADCO_A::_0)
            }
            #[doc = "Continuous conversions are initiated following a write to ADC_SC1 when software triggered operation is selected. Continuous conversions are initiated by an ADHWT event when hardware triggered operation is selected. When the FIFO function is enabled (AFDEP > 0), a set of conversions are loop triggered."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ADCO_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum AIEN_A {
            #[doc = "0: Conversion complete interrupt disabled."]
            _0 = 0,
            #[doc = "1: Conversion complete interrupt enabled."]
            _1 = 1,
        }
        impl From<AIEN_A> for bool {
            #[inline(always)]
            fn from(variant: AIEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `AIEN`"]
        pub type AIEN_R = crate::R<bool, AIEN_A>;
        impl AIEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AIEN_A {
                match self.bits {
                    false => AIEN_A::_0,
                    true => AIEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == AIEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == AIEN_A::_1
            }
        }
        #[doc = "Write proxy for field `AIEN`"]
        pub struct AIEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AIEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AIEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Conversion complete interrupt disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(AIEN_A::_0)
            }
            #[doc = "Conversion complete interrupt enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(AIEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Conversion Complete Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum COCO_A {
            #[doc = "0: Conversion not completed."]
            _0 = 0,
            #[doc = "1: Conversion completed."]
            _1 = 1,
        }
        impl From<COCO_A> for bool {
            #[inline(always)]
            fn from(variant: COCO_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `COCO`"]
        pub type COCO_R = crate::R<bool, COCO_A>;
        impl COCO_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> COCO_A {
                match self.bits {
                    false => COCO_A::_0,
                    true => COCO_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == COCO_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == COCO_A::_1
            }
        }
        impl R {
            #[doc = "Bits 0:4 - Input Channel Select"]
            #[inline(always)]
            pub fn adch(&self) -> ADCH_R {
                ADCH_R::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bit 5 - Continuous Conversion Enable"]
            #[inline(always)]
            pub fn adco(&self) -> ADCO_R {
                ADCO_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Interrupt Enable"]
            #[inline(always)]
            pub fn aien(&self) -> AIEN_R {
                AIEN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Conversion Complete Flag"]
            #[inline(always)]
            pub fn coco(&self) -> COCO_R {
                COCO_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - Input Channel Select"]
            #[inline(always)]
            pub fn adch(&mut self) -> ADCH_W {
                ADCH_W { w: self }
            }
            #[doc = "Bit 5 - Continuous Conversion Enable"]
            #[inline(always)]
            pub fn adco(&mut self) -> ADCO_W {
                ADCO_W { w: self }
            }
            #[doc = "Bit 6 - Interrupt Enable"]
            #[inline(always)]
            pub fn aien(&mut self) -> AIEN_W {
                AIEN_W { w: self }
            }
        }
    }
    #[doc = "Status and Control Register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sc2](sc2) module"]
    pub type SC2 = crate::Reg<u32, _SC2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SC2;
    #[doc = "`read()` method returns [sc2::R](sc2::R) reader structure"]
    impl crate::Readable for SC2 {}
    #[doc = "`write(|w| ..)` method takes [sc2::W](sc2::W) writer structure"]
    impl crate::Writable for SC2 {}
    #[doc = "Status and Control Register 2"]
    pub mod sc2 {
        #[doc = "Reader of register SC2"]
        pub type R = crate::R<u32, super::SC2>;
        #[doc = "Writer for register SC2"]
        pub type W = crate::W<u32, super::SC2>;
        #[doc = "Register SC2 `reset()`'s with value 0x08"]
        impl crate::ResetValue for super::SC2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x08
            }
        }
        #[doc = "Voltage Reference Selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum REFSEL_A {
            #[doc = "0: Default voltage reference pin pair (VREFH/VREFL)."]
            _00 = 0,
            #[doc = "1: Analog supply pin pair (VDDA/VSSA)."]
            _01 = 1,
            #[doc = "3: Reserved - Selects default voltage reference (VREFH/VREFL) pin pair."]
            _11 = 3,
        }
        impl From<REFSEL_A> for u8 {
            #[inline(always)]
            fn from(variant: REFSEL_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `REFSEL`"]
        pub type REFSEL_R = crate::R<u8, REFSEL_A>;
        impl REFSEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, REFSEL_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(REFSEL_A::_00),
                    1 => Val(REFSEL_A::_01),
                    3 => Val(REFSEL_A::_11),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == REFSEL_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == REFSEL_A::_01
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == REFSEL_A::_11
            }
        }
        #[doc = "Write proxy for field `REFSEL`"]
        pub struct REFSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REFSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: REFSEL_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Default voltage reference pin pair (VREFH/VREFL)."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(REFSEL_A::_00)
            }
            #[doc = "Analog supply pin pair (VDDA/VSSA)."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(REFSEL_A::_01)
            }
            #[doc = "Reserved - Selects default voltage reference (VREFH/VREFL) pin pair."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(REFSEL_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Result FIFO full\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FFULL_A {
            #[doc = "0: Indicates that ADC result FIFO is not full and next conversion data still can be stored into FIFO."]
            _0 = 0,
            #[doc = "1: Indicates that ADC result FIFO is full and next conversion will override old data in case of no read action."]
            _1 = 1,
        }
        impl From<FFULL_A> for bool {
            #[inline(always)]
            fn from(variant: FFULL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FFULL`"]
        pub type FFULL_R = crate::R<bool, FFULL_A>;
        impl FFULL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FFULL_A {
                match self.bits {
                    false => FFULL_A::_0,
                    true => FFULL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FFULL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FFULL_A::_1
            }
        }
        #[doc = "Result FIFO empty\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FEMPTY_A {
            #[doc = "0: Indicates that ADC result FIFO have at least one valid new data."]
            _0 = 0,
            #[doc = "1: Indicates that ADC result FIFO have no valid new data."]
            _1 = 1,
        }
        impl From<FEMPTY_A> for bool {
            #[inline(always)]
            fn from(variant: FEMPTY_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FEMPTY`"]
        pub type FEMPTY_R = crate::R<bool, FEMPTY_A>;
        impl FEMPTY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FEMPTY_A {
                match self.bits {
                    false => FEMPTY_A::_0,
                    true => FEMPTY_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FEMPTY_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FEMPTY_A::_1
            }
        }
        #[doc = "Compare Function Greater Than Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ACFGT_A {
            #[doc = "0: Compare triggers when input is less than compare level."]
            _0 = 0,
            #[doc = "1: Compare triggers when input is greater than or equal to compare level."]
            _1 = 1,
        }
        impl From<ACFGT_A> for bool {
            #[inline(always)]
            fn from(variant: ACFGT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ACFGT`"]
        pub type ACFGT_R = crate::R<bool, ACFGT_A>;
        impl ACFGT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACFGT_A {
                match self.bits {
                    false => ACFGT_A::_0,
                    true => ACFGT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ACFGT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ACFGT_A::_1
            }
        }
        #[doc = "Write proxy for field `ACFGT`"]
        pub struct ACFGT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACFGT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACFGT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Compare triggers when input is less than compare level."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ACFGT_A::_0)
            }
            #[doc = "Compare triggers when input is greater than or equal to compare level."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ACFGT_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Compare Function Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ACFE_A {
            #[doc = "0: Compare function disabled."]
            _0 = 0,
            #[doc = "1: Compare function enabled."]
            _1 = 1,
        }
        impl From<ACFE_A> for bool {
            #[inline(always)]
            fn from(variant: ACFE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ACFE`"]
        pub type ACFE_R = crate::R<bool, ACFE_A>;
        impl ACFE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACFE_A {
                match self.bits {
                    false => ACFE_A::_0,
                    true => ACFE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ACFE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ACFE_A::_1
            }
        }
        #[doc = "Write proxy for field `ACFE`"]
        pub struct ACFE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACFE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACFE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Compare function disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ACFE_A::_0)
            }
            #[doc = "Compare function enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ACFE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Conversion Trigger Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADTRG_A {
            #[doc = "0: Software trigger selected."]
            _0 = 0,
            #[doc = "1: Hardware trigger selected."]
            _1 = 1,
        }
        impl From<ADTRG_A> for bool {
            #[inline(always)]
            fn from(variant: ADTRG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADTRG`"]
        pub type ADTRG_R = crate::R<bool, ADTRG_A>;
        impl ADTRG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADTRG_A {
                match self.bits {
                    false => ADTRG_A::_0,
                    true => ADTRG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ADTRG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ADTRG_A::_1
            }
        }
        #[doc = "Write proxy for field `ADTRG`"]
        pub struct ADTRG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADTRG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADTRG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Software trigger selected."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ADTRG_A::_0)
            }
            #[doc = "Hardware trigger selected."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ADTRG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Conversion Active\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADACT_A {
            #[doc = "0: Conversion not in progress."]
            _0 = 0,
            #[doc = "1: Conversion in progress."]
            _1 = 1,
        }
        impl From<ADACT_A> for bool {
            #[inline(always)]
            fn from(variant: ADACT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADACT`"]
        pub type ADACT_R = crate::R<bool, ADACT_A>;
        impl ADACT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADACT_A {
                match self.bits {
                    false => ADACT_A::_0,
                    true => ADACT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ADACT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ADACT_A::_1
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Voltage Reference Selection"]
            #[inline(always)]
            pub fn refsel(&self) -> REFSEL_R {
                REFSEL_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 2 - Result FIFO full"]
            #[inline(always)]
            pub fn ffull(&self) -> FFULL_R {
                FFULL_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Result FIFO empty"]
            #[inline(always)]
            pub fn fempty(&self) -> FEMPTY_R {
                FEMPTY_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Compare Function Greater Than Enable"]
            #[inline(always)]
            pub fn acfgt(&self) -> ACFGT_R {
                ACFGT_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Compare Function Enable"]
            #[inline(always)]
            pub fn acfe(&self) -> ACFE_R {
                ACFE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Conversion Trigger Select"]
            #[inline(always)]
            pub fn adtrg(&self) -> ADTRG_R {
                ADTRG_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Conversion Active"]
            #[inline(always)]
            pub fn adact(&self) -> ADACT_R {
                ADACT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Voltage Reference Selection"]
            #[inline(always)]
            pub fn refsel(&mut self) -> REFSEL_W {
                REFSEL_W { w: self }
            }
            #[doc = "Bit 4 - Compare Function Greater Than Enable"]
            #[inline(always)]
            pub fn acfgt(&mut self) -> ACFGT_W {
                ACFGT_W { w: self }
            }
            #[doc = "Bit 5 - Compare Function Enable"]
            #[inline(always)]
            pub fn acfe(&mut self) -> ACFE_W {
                ACFE_W { w: self }
            }
            #[doc = "Bit 6 - Conversion Trigger Select"]
            #[inline(always)]
            pub fn adtrg(&mut self) -> ADTRG_W {
                ADTRG_W { w: self }
            }
        }
    }
    #[doc = "Status and Control Register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sc3](sc3) module"]
    pub type SC3 = crate::Reg<u32, _SC3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SC3;
    #[doc = "`read()` method returns [sc3::R](sc3::R) reader structure"]
    impl crate::Readable for SC3 {}
    #[doc = "`write(|w| ..)` method takes [sc3::W](sc3::W) writer structure"]
    impl crate::Writable for SC3 {}
    #[doc = "Status and Control Register 3"]
    pub mod sc3 {
        #[doc = "Reader of register SC3"]
        pub type R = crate::R<u32, super::SC3>;
        #[doc = "Writer for register SC3"]
        pub type W = crate::W<u32, super::SC3>;
        #[doc = "Register SC3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::SC3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Input Clock Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ADICLK_A {
            #[doc = "0: Bus clock"]
            _00 = 0,
            #[doc = "1: Bus clock divided by 2"]
            _01 = 1,
            #[doc = "2: Alternate clock (ALTCLK)"]
            _10 = 2,
            #[doc = "3: Asynchronous clock (ADACK)"]
            _11 = 3,
        }
        impl From<ADICLK_A> for u8 {
            #[inline(always)]
            fn from(variant: ADICLK_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ADICLK`"]
        pub type ADICLK_R = crate::R<u8, ADICLK_A>;
        impl ADICLK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADICLK_A {
                match self.bits {
                    0 => ADICLK_A::_00,
                    1 => ADICLK_A::_01,
                    2 => ADICLK_A::_10,
                    3 => ADICLK_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == ADICLK_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == ADICLK_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == ADICLK_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == ADICLK_A::_11
            }
        }
        #[doc = "Write proxy for field `ADICLK`"]
        pub struct ADICLK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADICLK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADICLK_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bus clock"]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(ADICLK_A::_00)
            }
            #[doc = "Bus clock divided by 2"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(ADICLK_A::_01)
            }
            #[doc = "Alternate clock (ALTCLK)"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(ADICLK_A::_10)
            }
            #[doc = "Asynchronous clock (ADACK)"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(ADICLK_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Conversion Mode Selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MODE_A {
            #[doc = "0: 8-bit conversion (N = 8)"]
            _00 = 0,
            #[doc = "1: 10-bit conversion (N = 10)"]
            _01 = 1,
            #[doc = "2: 12-bit conversion (N = 12)"]
            _10 = 2,
        }
        impl From<MODE_A> for u8 {
            #[inline(always)]
            fn from(variant: MODE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MODE`"]
        pub type MODE_R = crate::R<u8, MODE_A>;
        impl MODE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, MODE_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(MODE_A::_00),
                    1 => Val(MODE_A::_01),
                    2 => Val(MODE_A::_10),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == MODE_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == MODE_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == MODE_A::_10
            }
        }
        #[doc = "Write proxy for field `MODE`"]
        pub struct MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODE_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "8-bit conversion (N = 8)"]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(MODE_A::_00)
            }
            #[doc = "10-bit conversion (N = 10)"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(MODE_A::_01)
            }
            #[doc = "12-bit conversion (N = 12)"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(MODE_A::_10)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Long Sample Time Configuration\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADLSMP_A {
            #[doc = "0: Short sample time."]
            _0 = 0,
            #[doc = "1: Long sample time."]
            _1 = 1,
        }
        impl From<ADLSMP_A> for bool {
            #[inline(always)]
            fn from(variant: ADLSMP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADLSMP`"]
        pub type ADLSMP_R = crate::R<bool, ADLSMP_A>;
        impl ADLSMP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADLSMP_A {
                match self.bits {
                    false => ADLSMP_A::_0,
                    true => ADLSMP_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ADLSMP_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ADLSMP_A::_1
            }
        }
        #[doc = "Write proxy for field `ADLSMP`"]
        pub struct ADLSMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADLSMP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADLSMP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Short sample time."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ADLSMP_A::_0)
            }
            #[doc = "Long sample time."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ADLSMP_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Clock Divide Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ADIV_A {
            #[doc = "0: Divide ration = 1, and clock rate = Input clock."]
            _00 = 0,
            #[doc = "1: Divide ration = 2, and clock rate = Input clock * 2."]
            _01 = 1,
            #[doc = "2: Divide ration = 3, and clock rate = Input clock * 4."]
            _10 = 2,
            #[doc = "3: Divide ration = 4, and clock rate = Input clock * 8."]
            _11 = 3,
        }
        impl From<ADIV_A> for u8 {
            #[inline(always)]
            fn from(variant: ADIV_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ADIV`"]
        pub type ADIV_R = crate::R<u8, ADIV_A>;
        impl ADIV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADIV_A {
                match self.bits {
                    0 => ADIV_A::_00,
                    1 => ADIV_A::_01,
                    2 => ADIV_A::_10,
                    3 => ADIV_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == ADIV_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == ADIV_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == ADIV_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == ADIV_A::_11
            }
        }
        #[doc = "Write proxy for field `ADIV`"]
        pub struct ADIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADIV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADIV_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Divide ration = 1, and clock rate = Input clock."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(ADIV_A::_00)
            }
            #[doc = "Divide ration = 2, and clock rate = Input clock * 2."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(ADIV_A::_01)
            }
            #[doc = "Divide ration = 3, and clock rate = Input clock * 4."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(ADIV_A::_10)
            }
            #[doc = "Divide ration = 4, and clock rate = Input clock * 8."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(ADIV_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 5)) | (((value as u32) & 0x03) << 5);
                self.w
            }
        }
        #[doc = "Low-Power Configuration\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADLPC_A {
            #[doc = "0: High speed configuration."]
            _0 = 0,
            #[doc = "1: Low power configuration:The power is reduced at the expense of maximum clock speed."]
            _1 = 1,
        }
        impl From<ADLPC_A> for bool {
            #[inline(always)]
            fn from(variant: ADLPC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADLPC`"]
        pub type ADLPC_R = crate::R<bool, ADLPC_A>;
        impl ADLPC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADLPC_A {
                match self.bits {
                    false => ADLPC_A::_0,
                    true => ADLPC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ADLPC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ADLPC_A::_1
            }
        }
        #[doc = "Write proxy for field `ADLPC`"]
        pub struct ADLPC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADLPC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADLPC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "High speed configuration."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ADLPC_A::_0)
            }
            #[doc = "Low power configuration:The power is reduced at the expense of maximum clock speed."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ADLPC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Input Clock Select"]
            #[inline(always)]
            pub fn adiclk(&self) -> ADICLK_R {
                ADICLK_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Conversion Mode Selection"]
            #[inline(always)]
            pub fn mode(&self) -> MODE_R {
                MODE_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bit 4 - Long Sample Time Configuration"]
            #[inline(always)]
            pub fn adlsmp(&self) -> ADLSMP_R {
                ADLSMP_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 5:6 - Clock Divide Select"]
            #[inline(always)]
            pub fn adiv(&self) -> ADIV_R {
                ADIV_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Low-Power Configuration"]
            #[inline(always)]
            pub fn adlpc(&self) -> ADLPC_R {
                ADLPC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Input Clock Select"]
            #[inline(always)]
            pub fn adiclk(&mut self) -> ADICLK_W {
                ADICLK_W { w: self }
            }
            #[doc = "Bits 2:3 - Conversion Mode Selection"]
            #[inline(always)]
            pub fn mode(&mut self) -> MODE_W {
                MODE_W { w: self }
            }
            #[doc = "Bit 4 - Long Sample Time Configuration"]
            #[inline(always)]
            pub fn adlsmp(&mut self) -> ADLSMP_W {
                ADLSMP_W { w: self }
            }
            #[doc = "Bits 5:6 - Clock Divide Select"]
            #[inline(always)]
            pub fn adiv(&mut self) -> ADIV_W {
                ADIV_W { w: self }
            }
            #[doc = "Bit 7 - Low-Power Configuration"]
            #[inline(always)]
            pub fn adlpc(&mut self) -> ADLPC_W {
                ADLPC_W { w: self }
            }
        }
    }
    #[doc = "Status and Control Register 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sc4](sc4) module"]
    pub type SC4 = crate::Reg<u32, _SC4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SC4;
    #[doc = "`read()` method returns [sc4::R](sc4::R) reader structure"]
    impl crate::Readable for SC4 {}
    #[doc = "`write(|w| ..)` method takes [sc4::W](sc4::W) writer structure"]
    impl crate::Writable for SC4 {}
    #[doc = "Status and Control Register 4"]
    pub mod sc4 {
        #[doc = "Reader of register SC4"]
        pub type R = crate::R<u32, super::SC4>;
        #[doc = "Writer for register SC4"]
        pub type W = crate::W<u32, super::SC4>;
        #[doc = "Register SC4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::SC4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "FIFO Depth\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum AFDEP_A {
            #[doc = "0: FIFO is disabled."]
            _000 = 0,
            #[doc = "1: 2-level FIFO is enabled."]
            _001 = 1,
            #[doc = "2: 3-level FIFO is enabled.."]
            _010 = 2,
            #[doc = "3: 4-level FIFO is enabled."]
            _011 = 3,
            #[doc = "4: 5-level FIFO is enabled."]
            _100 = 4,
            #[doc = "5: 6-level FIFO is enabled."]
            _101 = 5,
            #[doc = "6: 7-level FIFO is enabled."]
            _110 = 6,
            #[doc = "7: 8-level FIFO is enabled."]
            _111 = 7,
        }
        impl From<AFDEP_A> for u8 {
            #[inline(always)]
            fn from(variant: AFDEP_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `AFDEP`"]
        pub type AFDEP_R = crate::R<u8, AFDEP_A>;
        impl AFDEP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> AFDEP_A {
                match self.bits {
                    0 => AFDEP_A::_000,
                    1 => AFDEP_A::_001,
                    2 => AFDEP_A::_010,
                    3 => AFDEP_A::_011,
                    4 => AFDEP_A::_100,
                    5 => AFDEP_A::_101,
                    6 => AFDEP_A::_110,
                    7 => AFDEP_A::_111,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_000`"]
            #[inline(always)]
            pub fn is_000(&self) -> bool {
                *self == AFDEP_A::_000
            }
            #[doc = "Checks if the value of the field is `_001`"]
            #[inline(always)]
            pub fn is_001(&self) -> bool {
                *self == AFDEP_A::_001
            }
            #[doc = "Checks if the value of the field is `_010`"]
            #[inline(always)]
            pub fn is_010(&self) -> bool {
                *self == AFDEP_A::_010
            }
            #[doc = "Checks if the value of the field is `_011`"]
            #[inline(always)]
            pub fn is_011(&self) -> bool {
                *self == AFDEP_A::_011
            }
            #[doc = "Checks if the value of the field is `_100`"]
            #[inline(always)]
            pub fn is_100(&self) -> bool {
                *self == AFDEP_A::_100
            }
            #[doc = "Checks if the value of the field is `_101`"]
            #[inline(always)]
            pub fn is_101(&self) -> bool {
                *self == AFDEP_A::_101
            }
            #[doc = "Checks if the value of the field is `_110`"]
            #[inline(always)]
            pub fn is_110(&self) -> bool {
                *self == AFDEP_A::_110
            }
            #[doc = "Checks if the value of the field is `_111`"]
            #[inline(always)]
            pub fn is_111(&self) -> bool {
                *self == AFDEP_A::_111
            }
        }
        #[doc = "Write proxy for field `AFDEP`"]
        pub struct AFDEP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFDEP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: AFDEP_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "FIFO is disabled."]
            #[inline(always)]
            pub fn _000(self) -> &'a mut W {
                self.variant(AFDEP_A::_000)
            }
            #[doc = "2-level FIFO is enabled."]
            #[inline(always)]
            pub fn _001(self) -> &'a mut W {
                self.variant(AFDEP_A::_001)
            }
            #[doc = "3-level FIFO is enabled.."]
            #[inline(always)]
            pub fn _010(self) -> &'a mut W {
                self.variant(AFDEP_A::_010)
            }
            #[doc = "4-level FIFO is enabled."]
            #[inline(always)]
            pub fn _011(self) -> &'a mut W {
                self.variant(AFDEP_A::_011)
            }
            #[doc = "5-level FIFO is enabled."]
            #[inline(always)]
            pub fn _100(self) -> &'a mut W {
                self.variant(AFDEP_A::_100)
            }
            #[doc = "6-level FIFO is enabled."]
            #[inline(always)]
            pub fn _101(self) -> &'a mut W {
                self.variant(AFDEP_A::_101)
            }
            #[doc = "7-level FIFO is enabled."]
            #[inline(always)]
            pub fn _110(self) -> &'a mut W {
                self.variant(AFDEP_A::_110)
            }
            #[doc = "8-level FIFO is enabled."]
            #[inline(always)]
            pub fn _111(self) -> &'a mut W {
                self.variant(AFDEP_A::_111)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        #[doc = "Compare Function Selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ACFSEL_A {
            #[doc = "0: OR all of compare trigger."]
            _0 = 0,
            #[doc = "1: AND all of compare trigger."]
            _1 = 1,
        }
        impl From<ACFSEL_A> for bool {
            #[inline(always)]
            fn from(variant: ACFSEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ACFSEL`"]
        pub type ACFSEL_R = crate::R<bool, ACFSEL_A>;
        impl ACFSEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACFSEL_A {
                match self.bits {
                    false => ACFSEL_A::_0,
                    true => ACFSEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ACFSEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ACFSEL_A::_1
            }
        }
        #[doc = "Write proxy for field `ACFSEL`"]
        pub struct ACFSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACFSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACFSEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "OR all of compare trigger."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ACFSEL_A::_0)
            }
            #[doc = "AND all of compare trigger."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ACFSEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "FIFO Scan Mode Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ASCANE_A {
            #[doc = "0: FIFO scan mode disabled."]
            _0 = 0,
            #[doc = "1: FIFO scan mode enabled."]
            _1 = 1,
        }
        impl From<ASCANE_A> for bool {
            #[inline(always)]
            fn from(variant: ASCANE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ASCANE`"]
        pub type ASCANE_R = crate::R<bool, ASCANE_A>;
        impl ASCANE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ASCANE_A {
                match self.bits {
                    false => ASCANE_A::_0,
                    true => ASCANE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ASCANE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ASCANE_A::_1
            }
        }
        #[doc = "Write proxy for field `ASCANE`"]
        pub struct ASCANE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ASCANE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ASCANE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FIFO scan mode disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ASCANE_A::_0)
            }
            #[doc = "FIFO scan mode enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ASCANE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Hardware Trigger Multiple Conversion Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HTRGME_A {
            #[doc = "0: One hardware trigger pulse triggers one conversion."]
            _0 = 0,
            #[doc = "1: One hardware trigger pulse triggers multiple conversions in fifo mode."]
            _1 = 1,
        }
        impl From<HTRGME_A> for bool {
            #[inline(always)]
            fn from(variant: HTRGME_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HTRGME`"]
        pub type HTRGME_R = crate::R<bool, HTRGME_A>;
        impl HTRGME_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HTRGME_A {
                match self.bits {
                    false => HTRGME_A::_0,
                    true => HTRGME_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HTRGME_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HTRGME_A::_1
            }
        }
        #[doc = "Write proxy for field `HTRGME`"]
        pub struct HTRGME_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTRGME_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HTRGME_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "One hardware trigger pulse triggers one conversion."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HTRGME_A::_0)
            }
            #[doc = "One hardware trigger pulse triggers multiple conversions in fifo mode."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HTRGME_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - FIFO Depth"]
            #[inline(always)]
            pub fn afdep(&self) -> AFDEP_R {
                AFDEP_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bit 5 - Compare Function Selection"]
            #[inline(always)]
            pub fn acfsel(&self) -> ACFSEL_R {
                ACFSEL_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - FIFO Scan Mode Enable"]
            #[inline(always)]
            pub fn ascane(&self) -> ASCANE_R {
                ASCANE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Hardware Trigger Multiple Conversion Enable"]
            #[inline(always)]
            pub fn htrgme(&self) -> HTRGME_R {
                HTRGME_R::new(((self.bits >> 8) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - FIFO Depth"]
            #[inline(always)]
            pub fn afdep(&mut self) -> AFDEP_W {
                AFDEP_W { w: self }
            }
            #[doc = "Bit 5 - Compare Function Selection"]
            #[inline(always)]
            pub fn acfsel(&mut self) -> ACFSEL_W {
                ACFSEL_W { w: self }
            }
            #[doc = "Bit 6 - FIFO Scan Mode Enable"]
            #[inline(always)]
            pub fn ascane(&mut self) -> ASCANE_W {
                ASCANE_W { w: self }
            }
            #[doc = "Bit 8 - Hardware Trigger Multiple Conversion Enable"]
            #[inline(always)]
            pub fn htrgme(&mut self) -> HTRGME_W {
                HTRGME_W { w: self }
            }
        }
    }
    #[doc = "Conversion Result Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [r](r) module"]
    pub type R = crate::Reg<u32, _R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _R;
    #[doc = "`read()` method returns [r::R](r::R) reader structure"]
    impl crate::Readable for R {}
    #[doc = "Conversion Result Register"]
    pub mod r {
        #[doc = "Reader of register R"]
        pub type R = crate::R<u32, super::R>;
        #[doc = "Reader of field `ADR`"]
        pub type ADR_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:11 - Conversion Result"]
            #[inline(always)]
            pub fn adr(&self) -> ADR_R {
                ADR_R::new((self.bits & 0x0fff) as u16)
            }
        }
    }
    #[doc = "Compare Value Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cv](cv) module"]
    pub type CV = crate::Reg<u32, _CV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CV;
    #[doc = "`read()` method returns [cv::R](cv::R) reader structure"]
    impl crate::Readable for CV {}
    #[doc = "`write(|w| ..)` method takes [cv::W](cv::W) writer structure"]
    impl crate::Writable for CV {}
    #[doc = "Compare Value Register"]
    pub mod cv {
        #[doc = "Reader of register CV"]
        pub type R = crate::R<u32, super::CV>;
        #[doc = "Writer for register CV"]
        pub type W = crate::W<u32, super::CV>;
        #[doc = "Register CV `reset()`'s with value 0"]
        impl crate::ResetValue for super::CV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CV`"]
        pub type CV_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CV`"]
        pub struct CV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Conversion Result\\[11:0\\]"]
            #[inline(always)]
            pub fn cv(&self) -> CV_R {
                CV_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Conversion Result\\[11:0\\]"]
            #[inline(always)]
            pub fn cv(&mut self) -> CV_W {
                CV_W { w: self }
            }
        }
    }
    #[doc = "Pin Control 1 Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apctl1](apctl1) module"]
    pub type APCTL1 = crate::Reg<u32, _APCTL1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APCTL1;
    #[doc = "`read()` method returns [apctl1::R](apctl1::R) reader structure"]
    impl crate::Readable for APCTL1 {}
    #[doc = "`write(|w| ..)` method takes [apctl1::W](apctl1::W) writer structure"]
    impl crate::Writable for APCTL1 {}
    #[doc = "Pin Control 1 Register"]
    pub mod apctl1 {
        #[doc = "Reader of register APCTL1"]
        pub type R = crate::R<u32, super::APCTL1>;
        #[doc = "Writer for register APCTL1"]
        pub type W = crate::W<u32, super::APCTL1>;
        #[doc = "Register APCTL1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::APCTL1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "ADC Pin Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u16)]
        pub enum ADPC_A {
            #[doc = "0: ADx pin I/O control enabled."]
            _0 = 0,
            #[doc = "1: ADx pin I/O control disabled."]
            _1 = 1,
        }
        impl From<ADPC_A> for u16 {
            #[inline(always)]
            fn from(variant: ADPC_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ADPC`"]
        pub type ADPC_R = crate::R<u16, ADPC_A>;
        impl ADPC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u16, ADPC_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(ADPC_A::_0),
                    1 => Val(ADPC_A::_1),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ADPC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ADPC_A::_1
            }
        }
        #[doc = "Write proxy for field `ADPC`"]
        pub struct ADPC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADPC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADPC_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "ADx pin I/O control enabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ADPC_A::_0)
            }
            #[doc = "ADx pin I/O control disabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ADPC_A::_1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - ADC Pin Control"]
            #[inline(always)]
            pub fn adpc(&self) -> ADPC_R {
                ADPC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - ADC Pin Control"]
            #[inline(always)]
            pub fn adpc(&mut self) -> ADPC_W {
                ADPC_W { w: self }
            }
        }
    }
    #[doc = "Status and Control Register 5\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sc5](sc5) module"]
    pub type SC5 = crate::Reg<u32, _SC5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SC5;
    #[doc = "`read()` method returns [sc5::R](sc5::R) reader structure"]
    impl crate::Readable for SC5 {}
    #[doc = "`write(|w| ..)` method takes [sc5::W](sc5::W) writer structure"]
    impl crate::Writable for SC5 {}
    #[doc = "Status and Control Register 5"]
    pub mod sc5 {
        #[doc = "Reader of register SC5"]
        pub type R = crate::R<u32, super::SC5>;
        #[doc = "Writer for register SC5"]
        pub type W = crate::W<u32, super::SC5>;
        #[doc = "Register SC5 `reset()`'s with value 0"]
        impl crate::ResetValue for super::SC5 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Hardware Trigger Mask Mode Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HTRGMASKSEL_A {
            #[doc = "0: Hardware trigger mask with HTRGMASKE."]
            _0 = 0,
            #[doc = "1: Hardware trigger mask automatically when data fifo is not empty."]
            _1 = 1,
        }
        impl From<HTRGMASKSEL_A> for bool {
            #[inline(always)]
            fn from(variant: HTRGMASKSEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HTRGMASKSEL`"]
        pub type HTRGMASKSEL_R = crate::R<bool, HTRGMASKSEL_A>;
        impl HTRGMASKSEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HTRGMASKSEL_A {
                match self.bits {
                    false => HTRGMASKSEL_A::_0,
                    true => HTRGMASKSEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HTRGMASKSEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HTRGMASKSEL_A::_1
            }
        }
        #[doc = "Write proxy for field `HTRGMASKSEL`"]
        pub struct HTRGMASKSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTRGMASKSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HTRGMASKSEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Hardware trigger mask with HTRGMASKE."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HTRGMASKSEL_A::_0)
            }
            #[doc = "Hardware trigger mask automatically when data fifo is not empty."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HTRGMASKSEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Hardware Trigger Mask Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HTRGMASKE_A {
            #[doc = "0: Hardware trigger mask disable."]
            _0 = 0,
            #[doc = "1: Hardware trigger mask enable and hardware trigger cannot trigger ADC conversion.."]
            _1 = 1,
        }
        impl From<HTRGMASKE_A> for bool {
            #[inline(always)]
            fn from(variant: HTRGMASKE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HTRGMASKE`"]
        pub type HTRGMASKE_R = crate::R<bool, HTRGMASKE_A>;
        impl HTRGMASKE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HTRGMASKE_A {
                match self.bits {
                    false => HTRGMASKE_A::_0,
                    true => HTRGMASKE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HTRGMASKE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HTRGMASKE_A::_1
            }
        }
        #[doc = "Write proxy for field `HTRGMASKE`"]
        pub struct HTRGMASKE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HTRGMASKE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HTRGMASKE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Hardware trigger mask disable."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HTRGMASKE_A::_0)
            }
            #[doc = "Hardware trigger mask enable and hardware trigger cannot trigger ADC conversion.."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HTRGMASKE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Hardware Trigger Mask Mode Select"]
            #[inline(always)]
            pub fn htrgmasksel(&self) -> HTRGMASKSEL_R {
                HTRGMASKSEL_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Hardware Trigger Mask Enable"]
            #[inline(always)]
            pub fn htrgmaske(&self) -> HTRGMASKE_R {
                HTRGMASKE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Hardware Trigger Mask Mode Select"]
            #[inline(always)]
            pub fn htrgmasksel(&mut self) -> HTRGMASKSEL_W {
                HTRGMASKSEL_W { w: self }
            }
            #[doc = "Bit 1 - Hardware Trigger Mask Enable"]
            #[inline(always)]
            pub fn htrgmaske(&mut self) -> HTRGMASKE_W {
                HTRGMASKE_W { w: self }
            }
        }
    }
}
#[doc = "Real-time counter"]
pub struct RTC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RTC {}
impl RTC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rtc::RegisterBlock {
        0x4003_d000 as *const _
    }
}
impl Deref for RTC {
    type Target = rtc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*RTC::ptr() }
    }
}
#[doc = "Real-time counter"]
pub mod rtc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - RTC Status and Control Register"]
        pub sc: SC,
        #[doc = "0x04 - RTC Modulo Register"]
        pub mod_: MOD,
        #[doc = "0x08 - RTC Counter Register"]
        pub cnt: CNT,
    }
    #[doc = "RTC Status and Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sc](sc) module"]
    pub type SC = crate::Reg<u32, _SC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SC;
    #[doc = "`read()` method returns [sc::R](sc::R) reader structure"]
    impl crate::Readable for SC {}
    #[doc = "`write(|w| ..)` method takes [sc::W](sc::W) writer structure"]
    impl crate::Writable for SC {}
    #[doc = "RTC Status and Control Register"]
    pub mod sc {
        #[doc = "Reader of register SC"]
        pub type R = crate::R<u32, super::SC>;
        #[doc = "Writer for register SC"]
        pub type W = crate::W<u32, super::SC>;
        #[doc = "Register SC `reset()`'s with value 0"]
        impl crate::ResetValue for super::SC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Real-Time Counter Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RTCO_A {
            #[doc = "0: Real-time counter output disabled."]
            _0 = 0,
            #[doc = "1: Real-time counter output enabled."]
            _1 = 1,
        }
        impl From<RTCO_A> for bool {
            #[inline(always)]
            fn from(variant: RTCO_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RTCO`"]
        pub type RTCO_R = crate::R<bool, RTCO_A>;
        impl RTCO_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RTCO_A {
                match self.bits {
                    false => RTCO_A::_0,
                    true => RTCO_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RTCO_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RTCO_A::_1
            }
        }
        #[doc = "Write proxy for field `RTCO`"]
        pub struct RTCO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCO_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RTCO_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Real-time counter output disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RTCO_A::_0)
            }
            #[doc = "Real-time counter output enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RTCO_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Real-Time Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RTIE_A {
            #[doc = "0: Real-time interrupt requests are disabled. Use software polling."]
            _0 = 0,
            #[doc = "1: Real-time interrupt requests are enabled."]
            _1 = 1,
        }
        impl From<RTIE_A> for bool {
            #[inline(always)]
            fn from(variant: RTIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RTIE`"]
        pub type RTIE_R = crate::R<bool, RTIE_A>;
        impl RTIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RTIE_A {
                match self.bits {
                    false => RTIE_A::_0,
                    true => RTIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RTIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RTIE_A::_1
            }
        }
        #[doc = "Write proxy for field `RTIE`"]
        pub struct RTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RTIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Real-time interrupt requests are disabled. Use software polling."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RTIE_A::_0)
            }
            #[doc = "Real-time interrupt requests are enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RTIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Real-Time Interrupt Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RTIF_A {
            #[doc = "0: RTC counter has not reached the value in the RTC modulo register."]
            _0 = 0,
            #[doc = "1: RTC counter has reached the value in the RTC modulo register."]
            _1 = 1,
        }
        impl From<RTIF_A> for bool {
            #[inline(always)]
            fn from(variant: RTIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RTIF`"]
        pub type RTIF_R = crate::R<bool, RTIF_A>;
        impl RTIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RTIF_A {
                match self.bits {
                    false => RTIF_A::_0,
                    true => RTIF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RTIF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RTIF_A::_1
            }
        }
        #[doc = "Write proxy for field `RTIF`"]
        pub struct RTIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RTIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "RTC counter has not reached the value in the RTC modulo register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RTIF_A::_0)
            }
            #[doc = "RTC counter has reached the value in the RTC modulo register."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RTIF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Real-Time Clock Prescaler Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum RTCPS_A {
            #[doc = "0: Off"]
            _000 = 0,
            #[doc = "1: If RTCLKS = x0, it is 1; if RTCLKS = x1, it is 128."]
            _001 = 1,
            #[doc = "2: If RTCLKS = x0, it is 2; if RTCLKS = x1, it is 256."]
            _010 = 2,
            #[doc = "3: If RTCLKS = x0, it is 4; if RTCLKS = x1, it is 512."]
            _011 = 3,
            #[doc = "4: If RTCLKS = x0, it is 8; if RTCLKS = x1, it is 1024."]
            _100 = 4,
            #[doc = "5: If RTCLKS = x0, it is 16; if RTCLKS = x1, it is 2048."]
            _101 = 5,
            #[doc = "6: If RTCLKS = x0, it is 32; if RTCLKS = x1, it is 100."]
            _110 = 6,
            #[doc = "7: If RTCLKS = x0, it is 64; if RTCLKS = x1, it is 1000."]
            _111 = 7,
        }
        impl From<RTCPS_A> for u8 {
            #[inline(always)]
            fn from(variant: RTCPS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `RTCPS`"]
        pub type RTCPS_R = crate::R<u8, RTCPS_A>;
        impl RTCPS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RTCPS_A {
                match self.bits {
                    0 => RTCPS_A::_000,
                    1 => RTCPS_A::_001,
                    2 => RTCPS_A::_010,
                    3 => RTCPS_A::_011,
                    4 => RTCPS_A::_100,
                    5 => RTCPS_A::_101,
                    6 => RTCPS_A::_110,
                    7 => RTCPS_A::_111,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_000`"]
            #[inline(always)]
            pub fn is_000(&self) -> bool {
                *self == RTCPS_A::_000
            }
            #[doc = "Checks if the value of the field is `_001`"]
            #[inline(always)]
            pub fn is_001(&self) -> bool {
                *self == RTCPS_A::_001
            }
            #[doc = "Checks if the value of the field is `_010`"]
            #[inline(always)]
            pub fn is_010(&self) -> bool {
                *self == RTCPS_A::_010
            }
            #[doc = "Checks if the value of the field is `_011`"]
            #[inline(always)]
            pub fn is_011(&self) -> bool {
                *self == RTCPS_A::_011
            }
            #[doc = "Checks if the value of the field is `_100`"]
            #[inline(always)]
            pub fn is_100(&self) -> bool {
                *self == RTCPS_A::_100
            }
            #[doc = "Checks if the value of the field is `_101`"]
            #[inline(always)]
            pub fn is_101(&self) -> bool {
                *self == RTCPS_A::_101
            }
            #[doc = "Checks if the value of the field is `_110`"]
            #[inline(always)]
            pub fn is_110(&self) -> bool {
                *self == RTCPS_A::_110
            }
            #[doc = "Checks if the value of the field is `_111`"]
            #[inline(always)]
            pub fn is_111(&self) -> bool {
                *self == RTCPS_A::_111
            }
        }
        #[doc = "Write proxy for field `RTCPS`"]
        pub struct RTCPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCPS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RTCPS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Off"]
            #[inline(always)]
            pub fn _000(self) -> &'a mut W {
                self.variant(RTCPS_A::_000)
            }
            #[doc = "If RTCLKS = x0, it is 1; if RTCLKS = x1, it is 128."]
            #[inline(always)]
            pub fn _001(self) -> &'a mut W {
                self.variant(RTCPS_A::_001)
            }
            #[doc = "If RTCLKS = x0, it is 2; if RTCLKS = x1, it is 256."]
            #[inline(always)]
            pub fn _010(self) -> &'a mut W {
                self.variant(RTCPS_A::_010)
            }
            #[doc = "If RTCLKS = x0, it is 4; if RTCLKS = x1, it is 512."]
            #[inline(always)]
            pub fn _011(self) -> &'a mut W {
                self.variant(RTCPS_A::_011)
            }
            #[doc = "If RTCLKS = x0, it is 8; if RTCLKS = x1, it is 1024."]
            #[inline(always)]
            pub fn _100(self) -> &'a mut W {
                self.variant(RTCPS_A::_100)
            }
            #[doc = "If RTCLKS = x0, it is 16; if RTCLKS = x1, it is 2048."]
            #[inline(always)]
            pub fn _101(self) -> &'a mut W {
                self.variant(RTCPS_A::_101)
            }
            #[doc = "If RTCLKS = x0, it is 32; if RTCLKS = x1, it is 100."]
            #[inline(always)]
            pub fn _110(self) -> &'a mut W {
                self.variant(RTCPS_A::_110)
            }
            #[doc = "If RTCLKS = x0, it is 64; if RTCLKS = x1, it is 1000."]
            #[inline(always)]
            pub fn _111(self) -> &'a mut W {
                self.variant(RTCPS_A::_111)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 8)) | (((value as u32) & 0x07) << 8);
                self.w
            }
        }
        #[doc = "Real-Time Clock Source Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum RTCLKS_A {
            #[doc = "0: External clock source."]
            _00 = 0,
            #[doc = "1: Real-time clock source is 1 kHz (LPOCLK)."]
            _01 = 1,
            #[doc = "2: Internal reference clock (ICSIRCLK)."]
            _10 = 2,
            #[doc = "3: Bus clock."]
            _11 = 3,
        }
        impl From<RTCLKS_A> for u8 {
            #[inline(always)]
            fn from(variant: RTCLKS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `RTCLKS`"]
        pub type RTCLKS_R = crate::R<u8, RTCLKS_A>;
        impl RTCLKS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RTCLKS_A {
                match self.bits {
                    0 => RTCLKS_A::_00,
                    1 => RTCLKS_A::_01,
                    2 => RTCLKS_A::_10,
                    3 => RTCLKS_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == RTCLKS_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == RTCLKS_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == RTCLKS_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == RTCLKS_A::_11
            }
        }
        #[doc = "Write proxy for field `RTCLKS`"]
        pub struct RTCLKS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCLKS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RTCLKS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "External clock source."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(RTCLKS_A::_00)
            }
            #[doc = "Real-time clock source is 1 kHz (LPOCLK)."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(RTCLKS_A::_01)
            }
            #[doc = "Internal reference clock (ICSIRCLK)."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(RTCLKS_A::_10)
            }
            #[doc = "Bus clock."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(RTCLKS_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 4 - Real-Time Counter Output"]
            #[inline(always)]
            pub fn rtco(&self) -> RTCO_R {
                RTCO_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Real-Time Interrupt Enable"]
            #[inline(always)]
            pub fn rtie(&self) -> RTIE_R {
                RTIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Real-Time Interrupt Flag"]
            #[inline(always)]
            pub fn rtif(&self) -> RTIF_R {
                RTIF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:10 - Real-Time Clock Prescaler Select"]
            #[inline(always)]
            pub fn rtcps(&self) -> RTCPS_R {
                RTCPS_R::new(((self.bits >> 8) & 0x07) as u8)
            }
            #[doc = "Bits 14:15 - Real-Time Clock Source Select"]
            #[inline(always)]
            pub fn rtclks(&self) -> RTCLKS_R {
                RTCLKS_R::new(((self.bits >> 14) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 4 - Real-Time Counter Output"]
            #[inline(always)]
            pub fn rtco(&mut self) -> RTCO_W {
                RTCO_W { w: self }
            }
            #[doc = "Bit 6 - Real-Time Interrupt Enable"]
            #[inline(always)]
            pub fn rtie(&mut self) -> RTIE_W {
                RTIE_W { w: self }
            }
            #[doc = "Bit 7 - Real-Time Interrupt Flag"]
            #[inline(always)]
            pub fn rtif(&mut self) -> RTIF_W {
                RTIF_W { w: self }
            }
            #[doc = "Bits 8:10 - Real-Time Clock Prescaler Select"]
            #[inline(always)]
            pub fn rtcps(&mut self) -> RTCPS_W {
                RTCPS_W { w: self }
            }
            #[doc = "Bits 14:15 - Real-Time Clock Source Select"]
            #[inline(always)]
            pub fn rtclks(&mut self) -> RTCLKS_W {
                RTCLKS_W { w: self }
            }
        }
    }
    #[doc = "RTC Modulo Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mod_](mod_) module"]
    pub type MOD = crate::Reg<u32, _MOD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MOD;
    #[doc = "`read()` method returns [mod_::R](mod_::R) reader structure"]
    impl crate::Readable for MOD {}
    #[doc = "`write(|w| ..)` method takes [mod_::W](mod_::W) writer structure"]
    impl crate::Writable for MOD {}
    #[doc = "RTC Modulo Register"]
    pub mod mod_ {
        #[doc = "Reader of register MOD"]
        pub type R = crate::R<u32, super::MOD>;
        #[doc = "Writer for register MOD"]
        pub type W = crate::W<u32, super::MOD>;
        #[doc = "Register MOD `reset()`'s with value 0"]
        impl crate::ResetValue for super::MOD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MOD`"]
        pub type MOD_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `MOD`"]
        pub struct MOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MOD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - RTC Modulo"]
            #[inline(always)]
            pub fn mod_(&self) -> MOD_R {
                MOD_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - RTC Modulo"]
            #[inline(always)]
            pub fn mod_(&mut self) -> MOD_W {
                MOD_W { w: self }
            }
        }
    }
    #[doc = "RTC Counter Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "RTC Counter Register"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - RTC Count"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
}
#[doc = "System Integration Module"]
pub struct SIM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SIM {}
impl SIM {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sim::RegisterBlock {
        0x4004_8000 as *const _
    }
}
impl Deref for SIM {
    type Target = sim::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SIM::ptr() }
    }
}
#[doc = "System Integration Module"]
pub mod sim {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - System Reset Status and ID Register"]
        pub srsid: SRSID,
        #[doc = "0x04 - System Options Register"]
        pub sopt: SOPT,
        #[doc = "0x08 - Pin Selection Register"]
        pub pinsel: PINSEL,
        #[doc = "0x0c - System Clock Gating Control Register"]
        pub scgc: SCGC,
        #[doc = "0x10 - Universally Unique Identifier Low Register"]
        pub uuidl: UUIDL,
        #[doc = "0x14 - Universally Unique Identifier Middle Low Register"]
        pub uuidml: UUIDML,
        #[doc = "0x18 - Universally Unique Identifier Middle High Register"]
        pub uuidmh: UUIDMH,
        #[doc = "0x1c - Clock Divider Register"]
        pub clkdiv: CLKDIV,
    }
    #[doc = "System Reset Status and ID Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [srsid](srsid) module"]
    pub type SRSID = crate::Reg<u32, _SRSID>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SRSID;
    #[doc = "`read()` method returns [srsid::R](srsid::R) reader structure"]
    impl crate::Readable for SRSID {}
    #[doc = "System Reset Status and ID Register"]
    pub mod srsid {
        #[doc = "Reader of register SRSID"]
        pub type R = crate::R<u32, super::SRSID>;
        #[doc = "Low Voltage Detect\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LVD_A {
            #[doc = "0: Reset is not caused by LVD trip or POR."]
            _0 = 0,
            #[doc = "1: Reset is caused by LVD trip or POR."]
            _1 = 1,
        }
        impl From<LVD_A> for bool {
            #[inline(always)]
            fn from(variant: LVD_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LVD`"]
        pub type LVD_R = crate::R<bool, LVD_A>;
        impl LVD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LVD_A {
                match self.bits {
                    false => LVD_A::_0,
                    true => LVD_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LVD_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LVD_A::_1
            }
        }
        #[doc = "Internal Clock Source Module Reset\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LOC_A {
            #[doc = "0: Reset is not caused by the ICS module."]
            _0 = 0,
            #[doc = "1: Reset is caused by the ICS module."]
            _1 = 1,
        }
        impl From<LOC_A> for bool {
            #[inline(always)]
            fn from(variant: LOC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LOC`"]
        pub type LOC_R = crate::R<bool, LOC_A>;
        impl LOC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LOC_A {
                match self.bits {
                    false => LOC_A::_0,
                    true => LOC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LOC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LOC_A::_1
            }
        }
        #[doc = "Watchdog (WDOG)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WDOG_A {
            #[doc = "0: Reset is not caused by WDOG timeout."]
            _0 = 0,
            #[doc = "1: Reset is caused by WDOG timeout."]
            _1 = 1,
        }
        impl From<WDOG_A> for bool {
            #[inline(always)]
            fn from(variant: WDOG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WDOG`"]
        pub type WDOG_R = crate::R<bool, WDOG_A>;
        impl WDOG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WDOG_A {
                match self.bits {
                    false => WDOG_A::_0,
                    true => WDOG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == WDOG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == WDOG_A::_1
            }
        }
        #[doc = "External Reset Pin\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PIN_A {
            #[doc = "0: Reset is not caused by external reset pin."]
            _0 = 0,
            #[doc = "1: Reset came from external reset pin."]
            _1 = 1,
        }
        impl From<PIN_A> for bool {
            #[inline(always)]
            fn from(variant: PIN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PIN`"]
        pub type PIN_R = crate::R<bool, PIN_A>;
        impl PIN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PIN_A {
                match self.bits {
                    false => PIN_A::_0,
                    true => PIN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PIN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PIN_A::_1
            }
        }
        #[doc = "Power-On Reset\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum POR_A {
            #[doc = "0: Reset not caused by POR."]
            _0 = 0,
            #[doc = "1: POR caused reset."]
            _1 = 1,
        }
        impl From<POR_A> for bool {
            #[inline(always)]
            fn from(variant: POR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `POR`"]
        pub type POR_R = crate::R<bool, POR_A>;
        impl POR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> POR_A {
                match self.bits {
                    false => POR_A::_0,
                    true => POR_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == POR_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == POR_A::_1
            }
        }
        #[doc = "Core Lockup\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LOCKUP_A {
            #[doc = "0: Reset is not caused by core LOCKUP event."]
            _0 = 0,
            #[doc = "1: Reset is caused by core LOCKUP event."]
            _1 = 1,
        }
        impl From<LOCKUP_A> for bool {
            #[inline(always)]
            fn from(variant: LOCKUP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LOCKUP`"]
        pub type LOCKUP_R = crate::R<bool, LOCKUP_A>;
        impl LOCKUP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LOCKUP_A {
                match self.bits {
                    false => LOCKUP_A::_0,
                    true => LOCKUP_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LOCKUP_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LOCKUP_A::_1
            }
        }
        #[doc = "Software\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SW_A {
            #[doc = "0: Reset is not caused by software setting of SYSRESETREQ bit."]
            _0 = 0,
            #[doc = "1: Reset caused by software setting of SYSRESETREQ bit"]
            _1 = 1,
        }
        impl From<SW_A> for bool {
            #[inline(always)]
            fn from(variant: SW_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SW`"]
        pub type SW_R = crate::R<bool, SW_A>;
        impl SW_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SW_A {
                match self.bits {
                    false => SW_A::_0,
                    true => SW_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SW_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SW_A::_1
            }
        }
        #[doc = "MDM-AP System Reset Request\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MDMAP_A {
            #[doc = "0: Reset is not caused by host debugger system setting of the System Reset Request bit."]
            _0 = 0,
            #[doc = "1: Reset is caused by host debugger system setting of the System Reset Request bit."]
            _1 = 1,
        }
        impl From<MDMAP_A> for bool {
            #[inline(always)]
            fn from(variant: MDMAP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MDMAP`"]
        pub type MDMAP_R = crate::R<bool, MDMAP_A>;
        impl MDMAP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MDMAP_A {
                match self.bits {
                    false => MDMAP_A::_0,
                    true => MDMAP_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == MDMAP_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == MDMAP_A::_1
            }
        }
        #[doc = "Stop Mode Acknowledge Error Reset\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SACKERR_A {
            #[doc = "0: Reset is not caused by peripheral failure to acknowledge attempt to enter Stop mode."]
            _0 = 0,
            #[doc = "1: Reset is caused by peripheral failure to acknowledge attempt to enter Stop mode."]
            _1 = 1,
        }
        impl From<SACKERR_A> for bool {
            #[inline(always)]
            fn from(variant: SACKERR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SACKERR`"]
        pub type SACKERR_R = crate::R<bool, SACKERR_A>;
        impl SACKERR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SACKERR_A {
                match self.bits {
                    false => SACKERR_A::_0,
                    true => SACKERR_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SACKERR_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SACKERR_A::_1
            }
        }
        #[doc = "Device Pin ID\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum PINID_A {
            #[doc = "0: 8-pin"]
            _0000 = 0,
            #[doc = "1: 16-pin"]
            _0001 = 1,
            #[doc = "2: 20-pin"]
            _0010 = 2,
            #[doc = "3: 24-pin"]
            _0011 = 3,
            #[doc = "4: 32-pin"]
            _0100 = 4,
            #[doc = "5: 44-pin"]
            _0101 = 5,
            #[doc = "6: 48-pin"]
            _0110 = 6,
            #[doc = "7: 64-pin"]
            _0111 = 7,
            #[doc = "8: 80-pin"]
            _1000 = 8,
            #[doc = "10: 100-pin"]
            _1010 = 10,
        }
        impl From<PINID_A> for u8 {
            #[inline(always)]
            fn from(variant: PINID_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PINID`"]
        pub type PINID_R = crate::R<u8, PINID_A>;
        impl PINID_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, PINID_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(PINID_A::_0000),
                    1 => Val(PINID_A::_0001),
                    2 => Val(PINID_A::_0010),
                    3 => Val(PINID_A::_0011),
                    4 => Val(PINID_A::_0100),
                    5 => Val(PINID_A::_0101),
                    6 => Val(PINID_A::_0110),
                    7 => Val(PINID_A::_0111),
                    8 => Val(PINID_A::_1000),
                    10 => Val(PINID_A::_1010),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0000`"]
            #[inline(always)]
            pub fn is_0000(&self) -> bool {
                *self == PINID_A::_0000
            }
            #[doc = "Checks if the value of the field is `_0001`"]
            #[inline(always)]
            pub fn is_0001(&self) -> bool {
                *self == PINID_A::_0001
            }
            #[doc = "Checks if the value of the field is `_0010`"]
            #[inline(always)]
            pub fn is_0010(&self) -> bool {
                *self == PINID_A::_0010
            }
            #[doc = "Checks if the value of the field is `_0011`"]
            #[inline(always)]
            pub fn is_0011(&self) -> bool {
                *self == PINID_A::_0011
            }
            #[doc = "Checks if the value of the field is `_0100`"]
            #[inline(always)]
            pub fn is_0100(&self) -> bool {
                *self == PINID_A::_0100
            }
            #[doc = "Checks if the value of the field is `_0101`"]
            #[inline(always)]
            pub fn is_0101(&self) -> bool {
                *self == PINID_A::_0101
            }
            #[doc = "Checks if the value of the field is `_0110`"]
            #[inline(always)]
            pub fn is_0110(&self) -> bool {
                *self == PINID_A::_0110
            }
            #[doc = "Checks if the value of the field is `_0111`"]
            #[inline(always)]
            pub fn is_0111(&self) -> bool {
                *self == PINID_A::_0111
            }
            #[doc = "Checks if the value of the field is `_1000`"]
            #[inline(always)]
            pub fn is_1000(&self) -> bool {
                *self == PINID_A::_1000
            }
            #[doc = "Checks if the value of the field is `_1010`"]
            #[inline(always)]
            pub fn is_1010(&self) -> bool {
                *self == PINID_A::_1010
            }
        }
        #[doc = "Reader of field `RevID`"]
        pub type REVID_R = crate::R<u8, u8>;
        #[doc = "Kinetis sub-family ID\n\nValue on reset: 4"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum SUBFAMID_A {
            #[doc = "4: KEx4 sub-family"]
            _0100 = 4,
        }
        impl From<SUBFAMID_A> for u8 {
            #[inline(always)]
            fn from(variant: SUBFAMID_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `SUBFAMID`"]
        pub type SUBFAMID_R = crate::R<u8, SUBFAMID_A>;
        impl SUBFAMID_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, SUBFAMID_A> {
                use crate::Variant::*;
                match self.bits {
                    4 => Val(SUBFAMID_A::_0100),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0100`"]
            #[inline(always)]
            pub fn is_0100(&self) -> bool {
                *self == SUBFAMID_A::_0100
            }
        }
        #[doc = "Kinetis family ID\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FAMID_A {
            #[doc = "0: KE0x family."]
            _0000 = 0,
        }
        impl From<FAMID_A> for u8 {
            #[inline(always)]
            fn from(variant: FAMID_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FAMID`"]
        pub type FAMID_R = crate::R<u8, FAMID_A>;
        impl FAMID_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, FAMID_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(FAMID_A::_0000),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0000`"]
            #[inline(always)]
            pub fn is_0000(&self) -> bool {
                *self == FAMID_A::_0000
            }
        }
        impl R {
            #[doc = "Bit 1 - Low Voltage Detect"]
            #[inline(always)]
            pub fn lvd(&self) -> LVD_R {
                LVD_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Internal Clock Source Module Reset"]
            #[inline(always)]
            pub fn loc(&self) -> LOC_R {
                LOC_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Watchdog (WDOG)"]
            #[inline(always)]
            pub fn wdog(&self) -> WDOG_R {
                WDOG_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - External Reset Pin"]
            #[inline(always)]
            pub fn pin(&self) -> PIN_R {
                PIN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Power-On Reset"]
            #[inline(always)]
            pub fn por(&self) -> POR_R {
                POR_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Core Lockup"]
            #[inline(always)]
            pub fn lockup(&self) -> LOCKUP_R {
                LOCKUP_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Software"]
            #[inline(always)]
            pub fn sw(&self) -> SW_R {
                SW_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - MDM-AP System Reset Request"]
            #[inline(always)]
            pub fn mdmap(&self) -> MDMAP_R {
                MDMAP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Stop Mode Acknowledge Error Reset"]
            #[inline(always)]
            pub fn sackerr(&self) -> SACKERR_R {
                SACKERR_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bits 16:19 - Device Pin ID"]
            #[inline(always)]
            pub fn pinid(&self) -> PINID_R {
                PINID_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Device Revision Number"]
            #[inline(always)]
            pub fn rev_id(&self) -> REVID_R {
                REVID_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Kinetis sub-family ID"]
            #[inline(always)]
            pub fn subfamid(&self) -> SUBFAMID_R {
                SUBFAMID_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 28:31 - Kinetis family ID"]
            #[inline(always)]
            pub fn famid(&self) -> FAMID_R {
                FAMID_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
        }
    }
    #[doc = "System Options Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sopt](sopt) module"]
    pub type SOPT = crate::Reg<u32, _SOPT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SOPT;
    #[doc = "`read()` method returns [sopt::R](sopt::R) reader structure"]
    impl crate::Readable for SOPT {}
    #[doc = "`write(|w| ..)` method takes [sopt::W](sopt::W) writer structure"]
    impl crate::Writable for SOPT {}
    #[doc = "System Options Register"]
    pub mod sopt {
        #[doc = "Reader of register SOPT"]
        pub type R = crate::R<u32, super::SOPT>;
        #[doc = "Writer for register SOPT"]
        pub type W = crate::W<u32, super::SOPT>;
        #[doc = "Register SOPT `reset()`'s with value 0x0e"]
        impl crate::ResetValue for super::SOPT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0e
            }
        }
        #[doc = "NMI Pin Enable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum NMIE_A {
            #[doc = "0: PTB4/KBI1_P6/FTM2_CH4/SPI0_MISO/ACMP1_IN2/NMI pin functions as PTB4, KBI1_P6, FTM2_CH4, SPI0_MISO or ACMP1_IN2."]
            _0 = 0,
            #[doc = "1: PTB4/KBI1_P6/FTM2_CH4/SPI0_MISO/ACMP1_IN2/NMI pin functions as NMI."]
            _1 = 1,
        }
        impl From<NMIE_A> for bool {
            #[inline(always)]
            fn from(variant: NMIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `NMIE`"]
        pub type NMIE_R = crate::R<bool, NMIE_A>;
        impl NMIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> NMIE_A {
                match self.bits {
                    false => NMIE_A::_0,
                    true => NMIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == NMIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == NMIE_A::_1
            }
        }
        #[doc = "Write proxy for field `NMIE`"]
        pub struct NMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NMIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: NMIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PTB4/KBI1_P6/FTM2_CH4/SPI0_MISO/ACMP1_IN2/NMI pin functions as PTB4, KBI1_P6, FTM2_CH4, SPI0_MISO or ACMP1_IN2."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(NMIE_A::_0)
            }
            #[doc = "PTB4/KBI1_P6/FTM2_CH4/SPI0_MISO/ACMP1_IN2/NMI pin functions as NMI."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(NMIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "RESET Pin Enable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RSTPE_A {
            #[doc = "0: PTA5/IRQ/TCLK1/RESET pin functions as PTA5, IRQ, or TCLK1."]
            _0 = 0,
            #[doc = "1: PTA5/IRQ/TCLK1/RESET pin functions as RESET."]
            _1 = 1,
        }
        impl From<RSTPE_A> for bool {
            #[inline(always)]
            fn from(variant: RSTPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RSTPE`"]
        pub type RSTPE_R = crate::R<bool, RSTPE_A>;
        impl RSTPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RSTPE_A {
                match self.bits {
                    false => RSTPE_A::_0,
                    true => RSTPE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RSTPE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RSTPE_A::_1
            }
        }
        #[doc = "Write proxy for field `RSTPE`"]
        pub struct RSTPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSTPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RSTPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PTA5/IRQ/TCLK1/RESET pin functions as PTA5, IRQ, or TCLK1."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RSTPE_A::_0)
            }
            #[doc = "PTA5/IRQ/TCLK1/RESET pin functions as RESET."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RSTPE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Single Wire Debug Port Pin Enable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWDE_A {
            #[doc = "0: PTA4/ACMP0_OUT/SWD_DIO as PTA4 or ACMP0_OUT function, PTA0/KBI0_P0/FTM0_CH0/RTCO/ACMP0_IN2/ADC0_SE0/SWD_CLK as PTA0, KBI0_P0, FTM0_CH0, RTCO, ACMP0_IN2 or ADC0_SE0 function."]
            _0 = 0,
            #[doc = "1: PTA4/ACMP0_OUT/SWD_DIO as SWD_DIO function, PTA0/KBI0_P0/FTM0_CH0/RTCO/ACMP0_IN2/ADC0_SE0/SWD_CLK as SWD_CLK function."]
            _1 = 1,
        }
        impl From<SWDE_A> for bool {
            #[inline(always)]
            fn from(variant: SWDE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWDE`"]
        pub type SWDE_R = crate::R<bool, SWDE_A>;
        impl SWDE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWDE_A {
                match self.bits {
                    false => SWDE_A::_0,
                    true => SWDE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SWDE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SWDE_A::_1
            }
        }
        #[doc = "Write proxy for field `SWDE`"]
        pub struct SWDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWDE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWDE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PTA4/ACMP0_OUT/SWD_DIO as PTA4 or ACMP0_OUT function, PTA0/KBI0_P0/FTM0_CH0/RTCO/ACMP0_IN2/ADC0_SE0/SWD_CLK as PTA0, KBI0_P0, FTM0_CH0, RTCO, ACMP0_IN2 or ADC0_SE0 function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SWDE_A::_0)
            }
            #[doc = "PTA4/ACMP0_OUT/SWD_DIO as SWD_DIO function, PTA0/KBI0_P0/FTM0_CH0/RTCO/ACMP0_IN2/ADC0_SE0/SWD_CLK as SWD_CLK function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SWDE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "ACMP Trigger FTM2 selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ACTRG_A {
            #[doc = "0: ACMP0 out"]
            _0 = 0,
            #[doc = "1: ACMP1 out"]
            _1 = 1,
        }
        impl From<ACTRG_A> for bool {
            #[inline(always)]
            fn from(variant: ACTRG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ACTRG`"]
        pub type ACTRG_R = crate::R<bool, ACTRG_A>;
        impl ACTRG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACTRG_A {
                match self.bits {
                    false => ACTRG_A::_0,
                    true => ACTRG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ACTRG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ACTRG_A::_1
            }
        }
        #[doc = "Write proxy for field `ACTRG`"]
        pub struct ACTRG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACTRG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACTRG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ACMP0 out"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ACTRG_A::_0)
            }
            #[doc = "ACMP1 out"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ACTRG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "FTM0CH0 Input Capture Source\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FTMIC_A {
            #[doc = "0: FTM0_CH0 pin"]
            _00 = 0,
            #[doc = "1: ACMP0 OUT"]
            _01 = 1,
            #[doc = "2: ACMP1 OUT"]
            _10 = 2,
            #[doc = "3: RTC overflow"]
            _11 = 3,
        }
        impl From<FTMIC_A> for u8 {
            #[inline(always)]
            fn from(variant: FTMIC_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FTMIC`"]
        pub type FTMIC_R = crate::R<u8, FTMIC_A>;
        impl FTMIC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FTMIC_A {
                match self.bits {
                    0 => FTMIC_A::_00,
                    1 => FTMIC_A::_01,
                    2 => FTMIC_A::_10,
                    3 => FTMIC_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == FTMIC_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == FTMIC_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == FTMIC_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == FTMIC_A::_11
            }
        }
        #[doc = "Write proxy for field `FTMIC`"]
        pub struct FTMIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FTMIC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FTMIC_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "FTM0_CH0 pin"]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(FTMIC_A::_00)
            }
            #[doc = "ACMP0 OUT"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(FTMIC_A::_01)
            }
            #[doc = "ACMP1 OUT"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(FTMIC_A::_10)
            }
            #[doc = "RTC overflow"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(FTMIC_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "UART0 RxD Filter Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum RXDFE_A {
            #[doc = "0: RXD0 input signal is connected to UART0 module directly."]
            _00 = 0,
            #[doc = "1: RXD0 input signal is filtered by ACMP0, then injected to UART0."]
            _01 = 1,
            #[doc = "2: RXD0 input signal is filtered by ACMP1, then injected to UART0."]
            _10 = 2,
        }
        impl From<RXDFE_A> for u8 {
            #[inline(always)]
            fn from(variant: RXDFE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `RXDFE`"]
        pub type RXDFE_R = crate::R<u8, RXDFE_A>;
        impl RXDFE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, RXDFE_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(RXDFE_A::_00),
                    1 => Val(RXDFE_A::_01),
                    2 => Val(RXDFE_A::_10),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == RXDFE_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == RXDFE_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == RXDFE_A::_10
            }
        }
        #[doc = "Write proxy for field `RXDFE`"]
        pub struct RXDFE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXDFE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RXDFE_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "RXD0 input signal is connected to UART0 module directly."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(RXDFE_A::_00)
            }
            #[doc = "RXD0 input signal is filtered by ACMP0, then injected to UART0."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(RXDFE_A::_01)
            }
            #[doc = "RXD0 input signal is filtered by ACMP1, then injected to UART0."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(RXDFE_A::_10)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "UART0_RX Capture Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXDCE_A {
            #[doc = "0: UART0_RX input signal is connected to the UART0 module only."]
            _0 = 0,
            #[doc = "1: UART0_RX input signal is connected to the UART0 module and FTM0 channel 1."]
            _1 = 1,
        }
        impl From<RXDCE_A> for bool {
            #[inline(always)]
            fn from(variant: RXDCE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXDCE`"]
        pub type RXDCE_R = crate::R<bool, RXDCE_A>;
        impl RXDCE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RXDCE_A {
                match self.bits {
                    false => RXDCE_A::_0,
                    true => RXDCE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RXDCE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RXDCE_A::_1
            }
        }
        #[doc = "Write proxy for field `RXDCE`"]
        pub struct RXDCE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXDCE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RXDCE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "UART0_RX input signal is connected to the UART0 module only."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RXDCE_A::_0)
            }
            #[doc = "UART0_RX input signal is connected to the UART0 module and FTM0 channel 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RXDCE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "FTM2 Synchronization Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FTMSYNC_AW {
            #[doc = "0: No synchronization triggered."]
            _0 = 0,
            #[doc = "1: Generates a PWM synchronization trigger to the FTM2 modules."]
            _1 = 1,
        }
        impl From<FTMSYNC_AW> for bool {
            #[inline(always)]
            fn from(variant: FTMSYNC_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `FTMSYNC`"]
        pub struct FTMSYNC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FTMSYNC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FTMSYNC_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No synchronization triggered."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FTMSYNC_AW::_0)
            }
            #[doc = "Generates a PWM synchronization trigger to the FTM2 modules."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FTMSYNC_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "UART0_TX Modulation Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TXDME_A {
            #[doc = "0: UART0_TX output is connected to pinout directly."]
            _0 = 0,
            #[doc = "1: UART0_TX output is modulated by FTM0 channel 0 before mapped to pinout."]
            _1 = 1,
        }
        impl From<TXDME_A> for bool {
            #[inline(always)]
            fn from(variant: TXDME_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TXDME`"]
        pub type TXDME_R = crate::R<bool, TXDME_A>;
        impl TXDME_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TXDME_A {
                match self.bits {
                    false => TXDME_A::_0,
                    true => TXDME_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TXDME_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TXDME_A::_1
            }
        }
        #[doc = "Write proxy for field `TXDME`"]
        pub struct TXDME_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXDME_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TXDME_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "UART0_TX output is connected to pinout directly."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TXDME_A::_0)
            }
            #[doc = "UART0_TX output is modulated by FTM0 channel 0 before mapped to pinout."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TXDME_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "BUS Clock Output select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum BUSREF_A {
            #[doc = "0: Bus"]
            _000 = 0,
            #[doc = "1: Bus divided by 2"]
            _001 = 1,
            #[doc = "2: Bus divided by 4"]
            _010 = 2,
            #[doc = "3: Bus divided by 8"]
            _011 = 3,
            #[doc = "4: Bus divided by 16"]
            _100 = 4,
            #[doc = "5: Bus divided by 32"]
            _101 = 5,
            #[doc = "6: Bus divided by 64"]
            _110 = 6,
            #[doc = "7: Bus divided by 128"]
            _111 = 7,
        }
        impl From<BUSREF_A> for u8 {
            #[inline(always)]
            fn from(variant: BUSREF_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `BUSREF`"]
        pub type BUSREF_R = crate::R<u8, BUSREF_A>;
        impl BUSREF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BUSREF_A {
                match self.bits {
                    0 => BUSREF_A::_000,
                    1 => BUSREF_A::_001,
                    2 => BUSREF_A::_010,
                    3 => BUSREF_A::_011,
                    4 => BUSREF_A::_100,
                    5 => BUSREF_A::_101,
                    6 => BUSREF_A::_110,
                    7 => BUSREF_A::_111,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_000`"]
            #[inline(always)]
            pub fn is_000(&self) -> bool {
                *self == BUSREF_A::_000
            }
            #[doc = "Checks if the value of the field is `_001`"]
            #[inline(always)]
            pub fn is_001(&self) -> bool {
                *self == BUSREF_A::_001
            }
            #[doc = "Checks if the value of the field is `_010`"]
            #[inline(always)]
            pub fn is_010(&self) -> bool {
                *self == BUSREF_A::_010
            }
            #[doc = "Checks if the value of the field is `_011`"]
            #[inline(always)]
            pub fn is_011(&self) -> bool {
                *self == BUSREF_A::_011
            }
            #[doc = "Checks if the value of the field is `_100`"]
            #[inline(always)]
            pub fn is_100(&self) -> bool {
                *self == BUSREF_A::_100
            }
            #[doc = "Checks if the value of the field is `_101`"]
            #[inline(always)]
            pub fn is_101(&self) -> bool {
                *self == BUSREF_A::_101
            }
            #[doc = "Checks if the value of the field is `_110`"]
            #[inline(always)]
            pub fn is_110(&self) -> bool {
                *self == BUSREF_A::_110
            }
            #[doc = "Checks if the value of the field is `_111`"]
            #[inline(always)]
            pub fn is_111(&self) -> bool {
                *self == BUSREF_A::_111
            }
        }
        #[doc = "Write proxy for field `BUSREF`"]
        pub struct BUSREF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BUSREF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BUSREF_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bus"]
            #[inline(always)]
            pub fn _000(self) -> &'a mut W {
                self.variant(BUSREF_A::_000)
            }
            #[doc = "Bus divided by 2"]
            #[inline(always)]
            pub fn _001(self) -> &'a mut W {
                self.variant(BUSREF_A::_001)
            }
            #[doc = "Bus divided by 4"]
            #[inline(always)]
            pub fn _010(self) -> &'a mut W {
                self.variant(BUSREF_A::_010)
            }
            #[doc = "Bus divided by 8"]
            #[inline(always)]
            pub fn _011(self) -> &'a mut W {
                self.variant(BUSREF_A::_011)
            }
            #[doc = "Bus divided by 16"]
            #[inline(always)]
            pub fn _100(self) -> &'a mut W {
                self.variant(BUSREF_A::_100)
            }
            #[doc = "Bus divided by 32"]
            #[inline(always)]
            pub fn _101(self) -> &'a mut W {
                self.variant(BUSREF_A::_101)
            }
            #[doc = "Bus divided by 64"]
            #[inline(always)]
            pub fn _110(self) -> &'a mut W {
                self.variant(BUSREF_A::_110)
            }
            #[doc = "Bus divided by 128"]
            #[inline(always)]
            pub fn _111(self) -> &'a mut W {
                self.variant(BUSREF_A::_111)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 16)) | (((value as u32) & 0x07) << 16);
                self.w
            }
        }
        #[doc = "Bus Clock Output Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CLKOE_A {
            #[doc = "0: Bus clock output is disabled on PTC5."]
            _0 = 0,
            #[doc = "1: Bus clock output is enabled on PTC5."]
            _1 = 1,
        }
        impl From<CLKOE_A> for bool {
            #[inline(always)]
            fn from(variant: CLKOE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CLKOE`"]
        pub type CLKOE_R = crate::R<bool, CLKOE_A>;
        impl CLKOE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CLKOE_A {
                match self.bits {
                    false => CLKOE_A::_0,
                    true => CLKOE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CLKOE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CLKOE_A::_1
            }
        }
        #[doc = "Write proxy for field `CLKOE`"]
        pub struct CLKOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLKOE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CLKOE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock output is disabled on PTC5."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CLKOE_A::_0)
            }
            #[doc = "Bus clock output is enabled on PTC5."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CLKOE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "ADC Hardware Trigger Source\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ADHWT_A {
            #[doc = "0: RTC overflow as the ADC hardware trigger"]
            _000 = 0,
            #[doc = "1: FTM0 init trigger as the ADC hardware trigger"]
            _001 = 1,
            #[doc = "2: FTM2 init trigger with 8-bit programmable counter delay"]
            _010 = 2,
            #[doc = "3: FTM2 match trigger with 8-bit programmable counter delay"]
            _011 = 3,
            #[doc = "4: PIT channel0 overflow as the ADC hardware trigger"]
            _100 = 4,
            #[doc = "5: PIT channel1 overflow as the ADC hardware trigger"]
            _101 = 5,
            #[doc = "6: ACMP0 out as the ADC hardware trigger."]
            _110 = 6,
            #[doc = "7: ACMP1 out as the ADC hardware trigger"]
            _111 = 7,
        }
        impl From<ADHWT_A> for u8 {
            #[inline(always)]
            fn from(variant: ADHWT_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ADHWT`"]
        pub type ADHWT_R = crate::R<u8, ADHWT_A>;
        impl ADHWT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADHWT_A {
                match self.bits {
                    0 => ADHWT_A::_000,
                    1 => ADHWT_A::_001,
                    2 => ADHWT_A::_010,
                    3 => ADHWT_A::_011,
                    4 => ADHWT_A::_100,
                    5 => ADHWT_A::_101,
                    6 => ADHWT_A::_110,
                    7 => ADHWT_A::_111,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_000`"]
            #[inline(always)]
            pub fn is_000(&self) -> bool {
                *self == ADHWT_A::_000
            }
            #[doc = "Checks if the value of the field is `_001`"]
            #[inline(always)]
            pub fn is_001(&self) -> bool {
                *self == ADHWT_A::_001
            }
            #[doc = "Checks if the value of the field is `_010`"]
            #[inline(always)]
            pub fn is_010(&self) -> bool {
                *self == ADHWT_A::_010
            }
            #[doc = "Checks if the value of the field is `_011`"]
            #[inline(always)]
            pub fn is_011(&self) -> bool {
                *self == ADHWT_A::_011
            }
            #[doc = "Checks if the value of the field is `_100`"]
            #[inline(always)]
            pub fn is_100(&self) -> bool {
                *self == ADHWT_A::_100
            }
            #[doc = "Checks if the value of the field is `_101`"]
            #[inline(always)]
            pub fn is_101(&self) -> bool {
                *self == ADHWT_A::_101
            }
            #[doc = "Checks if the value of the field is `_110`"]
            #[inline(always)]
            pub fn is_110(&self) -> bool {
                *self == ADHWT_A::_110
            }
            #[doc = "Checks if the value of the field is `_111`"]
            #[inline(always)]
            pub fn is_111(&self) -> bool {
                *self == ADHWT_A::_111
            }
        }
        #[doc = "Write proxy for field `ADHWT`"]
        pub struct ADHWT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADHWT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADHWT_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "RTC overflow as the ADC hardware trigger"]
            #[inline(always)]
            pub fn _000(self) -> &'a mut W {
                self.variant(ADHWT_A::_000)
            }
            #[doc = "FTM0 init trigger as the ADC hardware trigger"]
            #[inline(always)]
            pub fn _001(self) -> &'a mut W {
                self.variant(ADHWT_A::_001)
            }
            #[doc = "FTM2 init trigger with 8-bit programmable counter delay"]
            #[inline(always)]
            pub fn _010(self) -> &'a mut W {
                self.variant(ADHWT_A::_010)
            }
            #[doc = "FTM2 match trigger with 8-bit programmable counter delay"]
            #[inline(always)]
            pub fn _011(self) -> &'a mut W {
                self.variant(ADHWT_A::_011)
            }
            #[doc = "PIT channel0 overflow as the ADC hardware trigger"]
            #[inline(always)]
            pub fn _100(self) -> &'a mut W {
                self.variant(ADHWT_A::_100)
            }
            #[doc = "PIT channel1 overflow as the ADC hardware trigger"]
            #[inline(always)]
            pub fn _101(self) -> &'a mut W {
                self.variant(ADHWT_A::_101)
            }
            #[doc = "ACMP0 out as the ADC hardware trigger."]
            #[inline(always)]
            pub fn _110(self) -> &'a mut W {
                self.variant(ADHWT_A::_110)
            }
            #[doc = "ACMP1 out as the ADC hardware trigger"]
            #[inline(always)]
            pub fn _111(self) -> &'a mut W {
                self.variant(ADHWT_A::_111)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 20)) | (((value as u32) & 0x07) << 20);
                self.w
            }
        }
        #[doc = "FTM2 Trigger Delay Active\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DLYACT_A {
            #[doc = "0: The delay is inactive."]
            _0 = 0,
            #[doc = "1: The delay is active."]
            _1 = 1,
        }
        impl From<DLYACT_A> for bool {
            #[inline(always)]
            fn from(variant: DLYACT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DLYACT`"]
        pub type DLYACT_R = crate::R<bool, DLYACT_A>;
        impl DLYACT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DLYACT_A {
                match self.bits {
                    false => DLYACT_A::_0,
                    true => DLYACT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DLYACT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DLYACT_A::_1
            }
        }
        #[doc = "Reader of field `DELAY`"]
        pub type DELAY_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DELAY`"]
        pub struct DELAY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DELAY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | (((value as u32) & 0xff) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - NMI Pin Enable"]
            #[inline(always)]
            pub fn nmie(&self) -> NMIE_R {
                NMIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RESET Pin Enable"]
            #[inline(always)]
            pub fn rstpe(&self) -> RSTPE_R {
                RSTPE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Single Wire Debug Port Pin Enable"]
            #[inline(always)]
            pub fn swde(&self) -> SWDE_R {
                SWDE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 5 - ACMP Trigger FTM2 selection"]
            #[inline(always)]
            pub fn actrg(&self) -> ACTRG_R {
                ACTRG_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bits 6:7 - FTM0CH0 Input Capture Source"]
            #[inline(always)]
            pub fn ftmic(&self) -> FTMIC_R {
                FTMIC_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - UART0 RxD Filter Select"]
            #[inline(always)]
            pub fn rxdfe(&self) -> RXDFE_R {
                RXDFE_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 12 - UART0_RX Capture Select"]
            #[inline(always)]
            pub fn rxdce(&self) -> RXDCE_R {
                RXDCE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 15 - UART0_TX Modulation Select"]
            #[inline(always)]
            pub fn txdme(&self) -> TXDME_R {
                TXDME_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 16:18 - BUS Clock Output select"]
            #[inline(always)]
            pub fn busref(&self) -> BUSREF_R {
                BUSREF_R::new(((self.bits >> 16) & 0x07) as u8)
            }
            #[doc = "Bit 19 - Bus Clock Output Enable"]
            #[inline(always)]
            pub fn clkoe(&self) -> CLKOE_R {
                CLKOE_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bits 20:22 - ADC Hardware Trigger Source"]
            #[inline(always)]
            pub fn adhwt(&self) -> ADHWT_R {
                ADHWT_R::new(((self.bits >> 20) & 0x07) as u8)
            }
            #[doc = "Bit 23 - FTM2 Trigger Delay Active"]
            #[inline(always)]
            pub fn dlyact(&self) -> DLYACT_R {
                DLYACT_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bits 24:31 - FTM2 Trigger Delay"]
            #[inline(always)]
            pub fn delay(&self) -> DELAY_R {
                DELAY_R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 1 - NMI Pin Enable"]
            #[inline(always)]
            pub fn nmie(&mut self) -> NMIE_W {
                NMIE_W { w: self }
            }
            #[doc = "Bit 2 - RESET Pin Enable"]
            #[inline(always)]
            pub fn rstpe(&mut self) -> RSTPE_W {
                RSTPE_W { w: self }
            }
            #[doc = "Bit 3 - Single Wire Debug Port Pin Enable"]
            #[inline(always)]
            pub fn swde(&mut self) -> SWDE_W {
                SWDE_W { w: self }
            }
            #[doc = "Bit 5 - ACMP Trigger FTM2 selection"]
            #[inline(always)]
            pub fn actrg(&mut self) -> ACTRG_W {
                ACTRG_W { w: self }
            }
            #[doc = "Bits 6:7 - FTM0CH0 Input Capture Source"]
            #[inline(always)]
            pub fn ftmic(&mut self) -> FTMIC_W {
                FTMIC_W { w: self }
            }
            #[doc = "Bits 8:9 - UART0 RxD Filter Select"]
            #[inline(always)]
            pub fn rxdfe(&mut self) -> RXDFE_W {
                RXDFE_W { w: self }
            }
            #[doc = "Bit 12 - UART0_RX Capture Select"]
            #[inline(always)]
            pub fn rxdce(&mut self) -> RXDCE_W {
                RXDCE_W { w: self }
            }
            #[doc = "Bit 14 - FTM2 Synchronization Select"]
            #[inline(always)]
            pub fn ftmsync(&mut self) -> FTMSYNC_W {
                FTMSYNC_W { w: self }
            }
            #[doc = "Bit 15 - UART0_TX Modulation Select"]
            #[inline(always)]
            pub fn txdme(&mut self) -> TXDME_W {
                TXDME_W { w: self }
            }
            #[doc = "Bits 16:18 - BUS Clock Output select"]
            #[inline(always)]
            pub fn busref(&mut self) -> BUSREF_W {
                BUSREF_W { w: self }
            }
            #[doc = "Bit 19 - Bus Clock Output Enable"]
            #[inline(always)]
            pub fn clkoe(&mut self) -> CLKOE_W {
                CLKOE_W { w: self }
            }
            #[doc = "Bits 20:22 - ADC Hardware Trigger Source"]
            #[inline(always)]
            pub fn adhwt(&mut self) -> ADHWT_W {
                ADHWT_W { w: self }
            }
            #[doc = "Bits 24:31 - FTM2 Trigger Delay"]
            #[inline(always)]
            pub fn delay(&mut self) -> DELAY_W {
                DELAY_W { w: self }
            }
        }
    }
    #[doc = "Pin Selection Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pinsel](pinsel) module"]
    pub type PINSEL = crate::Reg<u32, _PINSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PINSEL;
    #[doc = "`read()` method returns [pinsel::R](pinsel::R) reader structure"]
    impl crate::Readable for PINSEL {}
    #[doc = "`write(|w| ..)` method takes [pinsel::W](pinsel::W) writer structure"]
    impl crate::Writable for PINSEL {}
    #[doc = "Pin Selection Register"]
    pub mod pinsel {
        #[doc = "Reader of register PINSEL"]
        pub type R = crate::R<u32, super::PINSEL>;
        #[doc = "Writer for register PINSEL"]
        pub type W = crate::W<u32, super::PINSEL>;
        #[doc = "Register PINSEL `reset()`'s with value 0"]
        impl crate::ResetValue for super::PINSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "I2C0 Port Pin Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum I2C0PS_A {
            #[doc = "0: I2C0_SCL and I2C0_SDA are mapped on PTA3 and PTA2, respectively."]
            _0 = 0,
            #[doc = "1: I2C0_SCL and I2C0_SDA are mapped on PTB7 and PTB6, respectively."]
            _1 = 1,
        }
        impl From<I2C0PS_A> for bool {
            #[inline(always)]
            fn from(variant: I2C0PS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `I2C0PS`"]
        pub type I2C0PS_R = crate::R<bool, I2C0PS_A>;
        impl I2C0PS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> I2C0PS_A {
                match self.bits {
                    false => I2C0PS_A::_0,
                    true => I2C0PS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == I2C0PS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == I2C0PS_A::_1
            }
        }
        #[doc = "Write proxy for field `I2C0PS`"]
        pub struct I2C0PS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C0PS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2C0PS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "I2C0_SCL and I2C0_SDA are mapped on PTA3 and PTA2, respectively."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(I2C0PS_A::_0)
            }
            #[doc = "I2C0_SCL and I2C0_SDA are mapped on PTB7 and PTB6, respectively."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(I2C0PS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "SPI0 Pin Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SPI0PS_A {
            #[doc = "0: SPI0_SCK, SPI0_MOSI, SPI0_MISO, and SPI0_PCS are mapped on PTB2, PTB3, PTB4, and PTB5."]
            _0 = 0,
            #[doc = "1: SPI0_SCK, SPI0_MOSI, SPI0_MISO, and SPI0_PCS are mapped on PTA6, PTA7, PTB1, and PTB0."]
            _1 = 1,
        }
        impl From<SPI0PS_A> for bool {
            #[inline(always)]
            fn from(variant: SPI0PS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SPI0PS`"]
        pub type SPI0PS_R = crate::R<bool, SPI0PS_A>;
        impl SPI0PS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SPI0PS_A {
                match self.bits {
                    false => SPI0PS_A::_0,
                    true => SPI0PS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SPI0PS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SPI0PS_A::_1
            }
        }
        #[doc = "Write proxy for field `SPI0PS`"]
        pub struct SPI0PS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI0PS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SPI0PS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SPI0_SCK, SPI0_MOSI, SPI0_MISO, and SPI0_PCS are mapped on PTB2, PTB3, PTB4, and PTB5."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SPI0PS_A::_0)
            }
            #[doc = "SPI0_SCK, SPI0_MOSI, SPI0_MISO, and SPI0_PCS are mapped on PTA6, PTA7, PTB1, and PTB0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SPI0PS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "UART0 Pin Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UART0PS_A {
            #[doc = "0: UART0_RX and UART0_TX are mapped on PTB0 and PTB1."]
            _0 = 0,
            #[doc = "1: UART0_RX and UART0_TX are mapped on PTA2 and PTA3."]
            _1 = 1,
        }
        impl From<UART0PS_A> for bool {
            #[inline(always)]
            fn from(variant: UART0PS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UART0PS`"]
        pub type UART0PS_R = crate::R<bool, UART0PS_A>;
        impl UART0PS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UART0PS_A {
                match self.bits {
                    false => UART0PS_A::_0,
                    true => UART0PS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == UART0PS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == UART0PS_A::_1
            }
        }
        #[doc = "Write proxy for field `UART0PS`"]
        pub struct UART0PS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UART0PS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UART0PS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "UART0_RX and UART0_TX are mapped on PTB0 and PTB1."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(UART0PS_A::_0)
            }
            #[doc = "UART0_RX and UART0_TX are mapped on PTA2 and PTA3."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(UART0PS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "FTM0_CH0 Port Pin Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FTM0PS0_A {
            #[doc = "0: FTM0_CH0 channels are mapped on PTA0."]
            _0 = 0,
            #[doc = "1: FTM0_CH0 channels are mapped on PTB2."]
            _1 = 1,
        }
        impl From<FTM0PS0_A> for bool {
            #[inline(always)]
            fn from(variant: FTM0PS0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FTM0PS0`"]
        pub type FTM0PS0_R = crate::R<bool, FTM0PS0_A>;
        impl FTM0PS0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FTM0PS0_A {
                match self.bits {
                    false => FTM0PS0_A::_0,
                    true => FTM0PS0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FTM0PS0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FTM0PS0_A::_1
            }
        }
        #[doc = "Write proxy for field `FTM0PS0`"]
        pub struct FTM0PS0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FTM0PS0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FTM0PS0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FTM0_CH0 channels are mapped on PTA0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FTM0PS0_A::_0)
            }
            #[doc = "FTM0_CH0 channels are mapped on PTB2."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FTM0PS0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "FTM0_CH1 Port Pin Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FTM0PS1_A {
            #[doc = "0: FTM0_CH1 channels are mapped on PTA1."]
            _0 = 0,
            #[doc = "1: FTM0_CH1 channels are mapped on PTB3."]
            _1 = 1,
        }
        impl From<FTM0PS1_A> for bool {
            #[inline(always)]
            fn from(variant: FTM0PS1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FTM0PS1`"]
        pub type FTM0PS1_R = crate::R<bool, FTM0PS1_A>;
        impl FTM0PS1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FTM0PS1_A {
                match self.bits {
                    false => FTM0PS1_A::_0,
                    true => FTM0PS1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FTM0PS1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FTM0PS1_A::_1
            }
        }
        #[doc = "Write proxy for field `FTM0PS1`"]
        pub struct FTM0PS1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FTM0PS1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FTM0PS1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FTM0_CH1 channels are mapped on PTA1."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FTM0PS1_A::_0)
            }
            #[doc = "FTM0_CH1 channels are mapped on PTB3."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FTM0PS1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "FTM2_CH2 Port Pin Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FTM2PS2_A {
            #[doc = "0: FTM2_CH2 channels are mapped on PTC2."]
            _0 = 0,
            #[doc = "1: FTM2_CH2 channels are mapped on PTC4."]
            _1 = 1,
        }
        impl From<FTM2PS2_A> for bool {
            #[inline(always)]
            fn from(variant: FTM2PS2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FTM2PS2`"]
        pub type FTM2PS2_R = crate::R<bool, FTM2PS2_A>;
        impl FTM2PS2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FTM2PS2_A {
                match self.bits {
                    false => FTM2PS2_A::_0,
                    true => FTM2PS2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FTM2PS2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FTM2PS2_A::_1
            }
        }
        #[doc = "Write proxy for field `FTM2PS2`"]
        pub struct FTM2PS2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FTM2PS2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FTM2PS2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FTM2_CH2 channels are mapped on PTC2."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FTM2PS2_A::_0)
            }
            #[doc = "FTM2_CH2 channels are mapped on PTC4."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FTM2PS2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "FTM2_CH3 Port Pin Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FTM2PS3_A {
            #[doc = "0: FTM2_CH3 channels are mapped on PTC3."]
            _0 = 0,
            #[doc = "1: FTM2_CH3 channels are mapped on PTC5."]
            _1 = 1,
        }
        impl From<FTM2PS3_A> for bool {
            #[inline(always)]
            fn from(variant: FTM2PS3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FTM2PS3`"]
        pub type FTM2PS3_R = crate::R<bool, FTM2PS3_A>;
        impl FTM2PS3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FTM2PS3_A {
                match self.bits {
                    false => FTM2PS3_A::_0,
                    true => FTM2PS3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FTM2PS3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FTM2PS3_A::_1
            }
        }
        #[doc = "Write proxy for field `FTM2PS3`"]
        pub struct FTM2PS3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FTM2PS3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FTM2PS3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FTM2_CH3 channels are mapped on PTC3."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FTM2PS3_A::_0)
            }
            #[doc = "FTM2_CH3 channels are mapped on PTC5."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FTM2PS3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "FTM0 TCLK Pin Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FTM0CLKPS_A {
            #[doc = "0: Selects TCLK1 for FTM0 module."]
            _0 = 0,
            #[doc = "1: Selects TCLK2 for FTM0 module."]
            _1 = 1,
        }
        impl From<FTM0CLKPS_A> for bool {
            #[inline(always)]
            fn from(variant: FTM0CLKPS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FTM0CLKPS`"]
        pub type FTM0CLKPS_R = crate::R<bool, FTM0CLKPS_A>;
        impl FTM0CLKPS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FTM0CLKPS_A {
                match self.bits {
                    false => FTM0CLKPS_A::_0,
                    true => FTM0CLKPS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FTM0CLKPS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FTM0CLKPS_A::_1
            }
        }
        #[doc = "Write proxy for field `FTM0CLKPS`"]
        pub struct FTM0CLKPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FTM0CLKPS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FTM0CLKPS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Selects TCLK1 for FTM0 module."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FTM0CLKPS_A::_0)
            }
            #[doc = "Selects TCLK2 for FTM0 module."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FTM0CLKPS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "FTM2 TCLK Pin Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FTM2CLKPS_A {
            #[doc = "0: Selects TCLK1 for FTM2 module."]
            _0 = 0,
            #[doc = "1: Selects TCLK2 for FTM2 module."]
            _1 = 1,
        }
        impl From<FTM2CLKPS_A> for bool {
            #[inline(always)]
            fn from(variant: FTM2CLKPS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FTM2CLKPS`"]
        pub type FTM2CLKPS_R = crate::R<bool, FTM2CLKPS_A>;
        impl FTM2CLKPS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FTM2CLKPS_A {
                match self.bits {
                    false => FTM2CLKPS_A::_0,
                    true => FTM2CLKPS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FTM2CLKPS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FTM2CLKPS_A::_1
            }
        }
        #[doc = "Write proxy for field `FTM2CLKPS`"]
        pub struct FTM2CLKPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FTM2CLKPS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FTM2CLKPS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Selects TCLK1 for FTM2 module."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FTM2CLKPS_A::_0)
            }
            #[doc = "Selects TCLK2 for FTM2 module."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FTM2CLKPS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "PWT TCLK Pin Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PWTCLKPS_A {
            #[doc = "0: Selects TCLK1 for PWT module."]
            _0 = 0,
            #[doc = "1: Selects TCLK2 for PWT module."]
            _1 = 1,
        }
        impl From<PWTCLKPS_A> for bool {
            #[inline(always)]
            fn from(variant: PWTCLKPS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PWTCLKPS`"]
        pub type PWTCLKPS_R = crate::R<bool, PWTCLKPS_A>;
        impl PWTCLKPS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PWTCLKPS_A {
                match self.bits {
                    false => PWTCLKPS_A::_0,
                    true => PWTCLKPS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PWTCLKPS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PWTCLKPS_A::_1
            }
        }
        #[doc = "Write proxy for field `PWTCLKPS`"]
        pub struct PWTCLKPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWTCLKPS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PWTCLKPS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Selects TCLK1 for PWT module."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PWTCLKPS_A::_0)
            }
            #[doc = "Selects TCLK2 for PWT module."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PWTCLKPS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 5 - I2C0 Port Pin Select"]
            #[inline(always)]
            pub fn i2c0ps(&self) -> I2C0PS_R {
                I2C0PS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SPI0 Pin Select"]
            #[inline(always)]
            pub fn spi0ps(&self) -> SPI0PS_R {
                SPI0PS_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - UART0 Pin Select"]
            #[inline(always)]
            pub fn uart0ps(&self) -> UART0PS_R {
                UART0PS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - FTM0_CH0 Port Pin Select"]
            #[inline(always)]
            pub fn ftm0ps0(&self) -> FTM0PS0_R {
                FTM0PS0_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - FTM0_CH1 Port Pin Select"]
            #[inline(always)]
            pub fn ftm0ps1(&self) -> FTM0PS1_R {
                FTM0PS1_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 14 - FTM2_CH2 Port Pin Select"]
            #[inline(always)]
            pub fn ftm2ps2(&self) -> FTM2PS2_R {
                FTM2PS2_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - FTM2_CH3 Port Pin Select"]
            #[inline(always)]
            pub fn ftm2ps3(&self) -> FTM2PS3_R {
                FTM2PS3_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 28 - FTM0 TCLK Pin Select"]
            #[inline(always)]
            pub fn ftm0clkps(&self) -> FTM0CLKPS_R {
                FTM0CLKPS_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 30 - FTM2 TCLK Pin Select"]
            #[inline(always)]
            pub fn ftm2clkps(&self) -> FTM2CLKPS_R {
                FTM2CLKPS_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - PWT TCLK Pin Select"]
            #[inline(always)]
            pub fn pwtclkps(&self) -> PWTCLKPS_R {
                PWTCLKPS_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 5 - I2C0 Port Pin Select"]
            #[inline(always)]
            pub fn i2c0ps(&mut self) -> I2C0PS_W {
                I2C0PS_W { w: self }
            }
            #[doc = "Bit 6 - SPI0 Pin Select"]
            #[inline(always)]
            pub fn spi0ps(&mut self) -> SPI0PS_W {
                SPI0PS_W { w: self }
            }
            #[doc = "Bit 7 - UART0 Pin Select"]
            #[inline(always)]
            pub fn uart0ps(&mut self) -> UART0PS_W {
                UART0PS_W { w: self }
            }
            #[doc = "Bit 8 - FTM0_CH0 Port Pin Select"]
            #[inline(always)]
            pub fn ftm0ps0(&mut self) -> FTM0PS0_W {
                FTM0PS0_W { w: self }
            }
            #[doc = "Bit 9 - FTM0_CH1 Port Pin Select"]
            #[inline(always)]
            pub fn ftm0ps1(&mut self) -> FTM0PS1_W {
                FTM0PS1_W { w: self }
            }
            #[doc = "Bit 14 - FTM2_CH2 Port Pin Select"]
            #[inline(always)]
            pub fn ftm2ps2(&mut self) -> FTM2PS2_W {
                FTM2PS2_W { w: self }
            }
            #[doc = "Bit 15 - FTM2_CH3 Port Pin Select"]
            #[inline(always)]
            pub fn ftm2ps3(&mut self) -> FTM2PS3_W {
                FTM2PS3_W { w: self }
            }
            #[doc = "Bit 28 - FTM0 TCLK Pin Select"]
            #[inline(always)]
            pub fn ftm0clkps(&mut self) -> FTM0CLKPS_W {
                FTM0CLKPS_W { w: self }
            }
            #[doc = "Bit 30 - FTM2 TCLK Pin Select"]
            #[inline(always)]
            pub fn ftm2clkps(&mut self) -> FTM2CLKPS_W {
                FTM2CLKPS_W { w: self }
            }
            #[doc = "Bit 31 - PWT TCLK Pin Select"]
            #[inline(always)]
            pub fn pwtclkps(&mut self) -> PWTCLKPS_W {
                PWTCLKPS_W { w: self }
            }
        }
    }
    #[doc = "System Clock Gating Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [scgc](scgc) module"]
    pub type SCGC = crate::Reg<u32, _SCGC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SCGC;
    #[doc = "`read()` method returns [scgc::R](scgc::R) reader structure"]
    impl crate::Readable for SCGC {}
    #[doc = "`write(|w| ..)` method takes [scgc::W](scgc::W) writer structure"]
    impl crate::Writable for SCGC {}
    #[doc = "System Clock Gating Control Register"]
    pub mod scgc {
        #[doc = "Reader of register SCGC"]
        pub type R = crate::R<u32, super::SCGC>;
        #[doc = "Writer for register SCGC"]
        pub type W = crate::W<u32, super::SCGC>;
        #[doc = "Register SCGC `reset()`'s with value 0x3000"]
        impl crate::ResetValue for super::SCGC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x3000
            }
        }
        #[doc = "RTC Clock Gate Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RTC_A {
            #[doc = "0: Bus clock to the RTC module is disabled."]
            _0 = 0,
            #[doc = "1: Bus clock to the RTC module is enabled."]
            _1 = 1,
        }
        impl From<RTC_A> for bool {
            #[inline(always)]
            fn from(variant: RTC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RTC`"]
        pub type RTC_R = crate::R<bool, RTC_A>;
        impl RTC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RTC_A {
                match self.bits {
                    false => RTC_A::_0,
                    true => RTC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RTC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RTC_A::_1
            }
        }
        #[doc = "Write proxy for field `RTC`"]
        pub struct RTC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RTC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock to the RTC module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RTC_A::_0)
            }
            #[doc = "Bus clock to the RTC module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RTC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "PIT Clock Gate Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PIT_A {
            #[doc = "0: Bus clock to the PIT module is disabled."]
            _0 = 0,
            #[doc = "1: Bus clock to the PIT module is enabled."]
            _1 = 1,
        }
        impl From<PIT_A> for bool {
            #[inline(always)]
            fn from(variant: PIT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PIT`"]
        pub type PIT_R = crate::R<bool, PIT_A>;
        impl PIT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PIT_A {
                match self.bits {
                    false => PIT_A::_0,
                    true => PIT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PIT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PIT_A::_1
            }
        }
        #[doc = "Write proxy for field `PIT`"]
        pub struct PIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PIT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PIT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock to the PIT module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PIT_A::_0)
            }
            #[doc = "Bus clock to the PIT module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PIT_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "PWT Clock Gate Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PWT_A {
            #[doc = "0: Timer clock to the PWT module is disabled."]
            _0 = 0,
            #[doc = "1: Timer clock to the PWT module is enabled."]
            _1 = 1,
        }
        impl From<PWT_A> for bool {
            #[inline(always)]
            fn from(variant: PWT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PWT`"]
        pub type PWT_R = crate::R<bool, PWT_A>;
        impl PWT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PWT_A {
                match self.bits {
                    false => PWT_A::_0,
                    true => PWT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PWT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PWT_A::_1
            }
        }
        #[doc = "Write proxy for field `PWT`"]
        pub struct PWT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PWT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Timer clock to the PWT module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PWT_A::_0)
            }
            #[doc = "Timer clock to the PWT module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PWT_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "FTM0 Clock Gate Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FTM0_A {
            #[doc = "0: Bus clock to the FTM0 module is disabled."]
            _0 = 0,
            #[doc = "1: Bus clock to the FTM0 module is enabled."]
            _1 = 1,
        }
        impl From<FTM0_A> for bool {
            #[inline(always)]
            fn from(variant: FTM0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FTM0`"]
        pub type FTM0_R = crate::R<bool, FTM0_A>;
        impl FTM0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FTM0_A {
                match self.bits {
                    false => FTM0_A::_0,
                    true => FTM0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FTM0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FTM0_A::_1
            }
        }
        #[doc = "Write proxy for field `FTM0`"]
        pub struct FTM0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FTM0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FTM0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock to the FTM0 module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FTM0_A::_0)
            }
            #[doc = "Bus clock to the FTM0 module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FTM0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "FTM2 Clock Gate Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FTM2_A {
            #[doc = "0: Bus clock to the FTM2 module is disabled."]
            _0 = 0,
            #[doc = "1: Bus clock to the FTM2 module is enabled."]
            _1 = 1,
        }
        impl From<FTM2_A> for bool {
            #[inline(always)]
            fn from(variant: FTM2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FTM2`"]
        pub type FTM2_R = crate::R<bool, FTM2_A>;
        impl FTM2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FTM2_A {
                match self.bits {
                    false => FTM2_A::_0,
                    true => FTM2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FTM2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FTM2_A::_1
            }
        }
        #[doc = "Write proxy for field `FTM2`"]
        pub struct FTM2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FTM2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FTM2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock to the FTM2 module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FTM2_A::_0)
            }
            #[doc = "Bus clock to the FTM2 module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FTM2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "CRC Clock Gate Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CRC_A {
            #[doc = "0: Bus clock to the CRC module is disabled."]
            _0 = 0,
            #[doc = "1: Bus clock to the CRC module is enabled."]
            _1 = 1,
        }
        impl From<CRC_A> for bool {
            #[inline(always)]
            fn from(variant: CRC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CRC`"]
        pub type CRC_R = crate::R<bool, CRC_A>;
        impl CRC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CRC_A {
                match self.bits {
                    false => CRC_A::_0,
                    true => CRC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CRC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CRC_A::_1
            }
        }
        #[doc = "Write proxy for field `CRC`"]
        pub struct CRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CRC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock to the CRC module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CRC_A::_0)
            }
            #[doc = "Bus clock to the CRC module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CRC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Flash Clock Gate Control\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FLASH_A {
            #[doc = "0: Bus clock to the flash module is disabled."]
            _0 = 0,
            #[doc = "1: Bus clock to the flash module is enabled."]
            _1 = 1,
        }
        impl From<FLASH_A> for bool {
            #[inline(always)]
            fn from(variant: FLASH_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FLASH`"]
        pub type FLASH_R = crate::R<bool, FLASH_A>;
        impl FLASH_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLASH_A {
                match self.bits {
                    false => FLASH_A::_0,
                    true => FLASH_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FLASH_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FLASH_A::_1
            }
        }
        #[doc = "Write proxy for field `FLASH`"]
        pub struct FLASH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLASH_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLASH_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock to the flash module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FLASH_A::_0)
            }
            #[doc = "Bus clock to the flash module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FLASH_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "SWD (single wire debugger) Clock Gate Control\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWD_A {
            #[doc = "0: Bus clock to the SWD module is disabled."]
            _0 = 0,
            #[doc = "1: Bus clock to the SWD module is enabled."]
            _1 = 1,
        }
        impl From<SWD_A> for bool {
            #[inline(always)]
            fn from(variant: SWD_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWD`"]
        pub type SWD_R = crate::R<bool, SWD_A>;
        impl SWD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SWD_A {
                match self.bits {
                    false => SWD_A::_0,
                    true => SWD_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SWD_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SWD_A::_1
            }
        }
        #[doc = "Write proxy for field `SWD`"]
        pub struct SWD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWD_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock to the SWD module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SWD_A::_0)
            }
            #[doc = "Bus clock to the SWD module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SWD_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "I2C Clock Gate Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum I2C_A {
            #[doc = "0: Bus clock to the IIC module is disabled."]
            _0 = 0,
            #[doc = "1: Bus clock to the IIC module is enabled."]
            _1 = 1,
        }
        impl From<I2C_A> for bool {
            #[inline(always)]
            fn from(variant: I2C_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `I2C`"]
        pub type I2C_R = crate::R<bool, I2C_A>;
        impl I2C_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> I2C_A {
                match self.bits {
                    false => I2C_A::_0,
                    true => I2C_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == I2C_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == I2C_A::_1
            }
        }
        #[doc = "Write proxy for field `I2C`"]
        pub struct I2C_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: I2C_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock to the IIC module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(I2C_A::_0)
            }
            #[doc = "Bus clock to the IIC module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(I2C_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "SPI0 Clock Gate Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SPI0_A {
            #[doc = "0: Bus clock to the SPI0 module is disabled."]
            _0 = 0,
            #[doc = "1: Bus clock to the SPI0 module is enabled."]
            _1 = 1,
        }
        impl From<SPI0_A> for bool {
            #[inline(always)]
            fn from(variant: SPI0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SPI0`"]
        pub type SPI0_R = crate::R<bool, SPI0_A>;
        impl SPI0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SPI0_A {
                match self.bits {
                    false => SPI0_A::_0,
                    true => SPI0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SPI0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SPI0_A::_1
            }
        }
        #[doc = "Write proxy for field `SPI0`"]
        pub struct SPI0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SPI0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock to the SPI0 module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SPI0_A::_0)
            }
            #[doc = "Bus clock to the SPI0 module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SPI0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "UART0 Clock Gate Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UART0_A {
            #[doc = "0: Bus clock to the UART0 module is disabled."]
            _0 = 0,
            #[doc = "1: Bus clock to the UART0 module is enabled."]
            _1 = 1,
        }
        impl From<UART0_A> for bool {
            #[inline(always)]
            fn from(variant: UART0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UART0`"]
        pub type UART0_R = crate::R<bool, UART0_A>;
        impl UART0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UART0_A {
                match self.bits {
                    false => UART0_A::_0,
                    true => UART0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == UART0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == UART0_A::_1
            }
        }
        #[doc = "Write proxy for field `UART0`"]
        pub struct UART0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UART0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UART0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock to the UART0 module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(UART0_A::_0)
            }
            #[doc = "Bus clock to the UART0 module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(UART0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "KBI0 Clock Gate Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum KBI0_A {
            #[doc = "0: Bus clock to the KBI0 module is disabled."]
            _0 = 0,
            #[doc = "1: Bus clock to the KBI0 module is enabled."]
            _1 = 1,
        }
        impl From<KBI0_A> for bool {
            #[inline(always)]
            fn from(variant: KBI0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `KBI0`"]
        pub type KBI0_R = crate::R<bool, KBI0_A>;
        impl KBI0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> KBI0_A {
                match self.bits {
                    false => KBI0_A::_0,
                    true => KBI0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == KBI0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == KBI0_A::_1
            }
        }
        #[doc = "Write proxy for field `KBI0`"]
        pub struct KBI0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KBI0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: KBI0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock to the KBI0 module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(KBI0_A::_0)
            }
            #[doc = "Bus clock to the KBI0 module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(KBI0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "KBI1 Clock Gate Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum KBI1_A {
            #[doc = "0: Bus clock to the KBI1 module is disabled."]
            _0 = 0,
            #[doc = "1: Bus clock to the KBI1 module is enabled."]
            _1 = 1,
        }
        impl From<KBI1_A> for bool {
            #[inline(always)]
            fn from(variant: KBI1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `KBI1`"]
        pub type KBI1_R = crate::R<bool, KBI1_A>;
        impl KBI1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> KBI1_A {
                match self.bits {
                    false => KBI1_A::_0,
                    true => KBI1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == KBI1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == KBI1_A::_1
            }
        }
        #[doc = "Write proxy for field `KBI1`"]
        pub struct KBI1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KBI1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: KBI1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock to the KBI1 module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(KBI1_A::_0)
            }
            #[doc = "Bus clock to the KBI1 module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(KBI1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "IRQ Clock Gate Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IRQ_A {
            #[doc = "0: Bus clock to the IRQ module is disabled."]
            _0 = 0,
            #[doc = "1: Bus clock to the IRQ module is enabled."]
            _1 = 1,
        }
        impl From<IRQ_A> for bool {
            #[inline(always)]
            fn from(variant: IRQ_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IRQ`"]
        pub type IRQ_R = crate::R<bool, IRQ_A>;
        impl IRQ_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IRQ_A {
                match self.bits {
                    false => IRQ_A::_0,
                    true => IRQ_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == IRQ_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == IRQ_A::_1
            }
        }
        #[doc = "Write proxy for field `IRQ`"]
        pub struct IRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQ_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IRQ_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock to the IRQ module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(IRQ_A::_0)
            }
            #[doc = "Bus clock to the IRQ module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(IRQ_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "ADC Clock Gate Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADC_A {
            #[doc = "0: Bus clock to the ADC module is disabled."]
            _0 = 0,
            #[doc = "1: Bus clock to the ADC module is enabled."]
            _1 = 1,
        }
        impl From<ADC_A> for bool {
            #[inline(always)]
            fn from(variant: ADC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADC`"]
        pub type ADC_R = crate::R<bool, ADC_A>;
        impl ADC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADC_A {
                match self.bits {
                    false => ADC_A::_0,
                    true => ADC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ADC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ADC_A::_1
            }
        }
        #[doc = "Write proxy for field `ADC`"]
        pub struct ADC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock to the ADC module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ADC_A::_0)
            }
            #[doc = "Bus clock to the ADC module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ADC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "ACMP0 Clock Gate Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ACMP0_A {
            #[doc = "0: Bus clock to the ACMP0 module is disabled."]
            _0 = 0,
            #[doc = "1: Bus clock to the ACMP0 module is enabled."]
            _1 = 1,
        }
        impl From<ACMP0_A> for bool {
            #[inline(always)]
            fn from(variant: ACMP0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ACMP0`"]
        pub type ACMP0_R = crate::R<bool, ACMP0_A>;
        impl ACMP0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACMP0_A {
                match self.bits {
                    false => ACMP0_A::_0,
                    true => ACMP0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ACMP0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ACMP0_A::_1
            }
        }
        #[doc = "Write proxy for field `ACMP0`"]
        pub struct ACMP0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACMP0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACMP0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock to the ACMP0 module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ACMP0_A::_0)
            }
            #[doc = "Bus clock to the ACMP0 module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ACMP0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "ACMP1 Clock Gate Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ACMP1_A {
            #[doc = "0: Bus clock to the ACMP1 module is disabled."]
            _0 = 0,
            #[doc = "1: Bus clock to the ACMP1 module is enabled."]
            _1 = 1,
        }
        impl From<ACMP1_A> for bool {
            #[inline(always)]
            fn from(variant: ACMP1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ACMP1`"]
        pub type ACMP1_R = crate::R<bool, ACMP1_A>;
        impl ACMP1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACMP1_A {
                match self.bits {
                    false => ACMP1_A::_0,
                    true => ACMP1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ACMP1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ACMP1_A::_1
            }
        }
        #[doc = "Write proxy for field `ACMP1`"]
        pub struct ACMP1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACMP1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACMP1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bus clock to the ACMP1 module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ACMP1_A::_0)
            }
            #[doc = "Bus clock to the ACMP1 module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ACMP1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - RTC Clock Gate Control"]
            #[inline(always)]
            pub fn rtc(&self) -> RTC_R {
                RTC_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - PIT Clock Gate Control"]
            #[inline(always)]
            pub fn pit(&self) -> PIT_R {
                PIT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 4 - PWT Clock Gate Control"]
            #[inline(always)]
            pub fn pwt(&self) -> PWT_R {
                PWT_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - FTM0 Clock Gate Control"]
            #[inline(always)]
            pub fn ftm0(&self) -> FTM0_R {
                FTM0_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 7 - FTM2 Clock Gate Control"]
            #[inline(always)]
            pub fn ftm2(&self) -> FTM2_R {
                FTM2_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CRC Clock Gate Control"]
            #[inline(always)]
            pub fn crc(&self) -> CRC_R {
                CRC_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Flash Clock Gate Control"]
            #[inline(always)]
            pub fn flash(&self) -> FLASH_R {
                FLASH_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - SWD (single wire debugger) Clock Gate Control"]
            #[inline(always)]
            pub fn swd(&self) -> SWD_R {
                SWD_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 17 - I2C Clock Gate Control"]
            #[inline(always)]
            pub fn i2c(&self) -> I2C_R {
                I2C_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - SPI0 Clock Gate Control"]
            #[inline(always)]
            pub fn spi0(&self) -> SPI0_R {
                SPI0_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 20 - UART0 Clock Gate Control"]
            #[inline(always)]
            pub fn uart0(&self) -> UART0_R {
                UART0_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 24 - KBI0 Clock Gate Control"]
            #[inline(always)]
            pub fn kbi0(&self) -> KBI0_R {
                KBI0_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - KBI1 Clock Gate Control"]
            #[inline(always)]
            pub fn kbi1(&self) -> KBI1_R {
                KBI1_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 27 - IRQ Clock Gate Control"]
            #[inline(always)]
            pub fn irq(&self) -> IRQ_R {
                IRQ_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 29 - ADC Clock Gate Control"]
            #[inline(always)]
            pub fn adc(&self) -> ADC_R {
                ADC_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - ACMP0 Clock Gate Control"]
            #[inline(always)]
            pub fn acmp0(&self) -> ACMP0_R {
                ACMP0_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - ACMP1 Clock Gate Control"]
            #[inline(always)]
            pub fn acmp1(&self) -> ACMP1_R {
                ACMP1_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - RTC Clock Gate Control"]
            #[inline(always)]
            pub fn rtc(&mut self) -> RTC_W {
                RTC_W { w: self }
            }
            #[doc = "Bit 1 - PIT Clock Gate Control"]
            #[inline(always)]
            pub fn pit(&mut self) -> PIT_W {
                PIT_W { w: self }
            }
            #[doc = "Bit 4 - PWT Clock Gate Control"]
            #[inline(always)]
            pub fn pwt(&mut self) -> PWT_W {
                PWT_W { w: self }
            }
            #[doc = "Bit 5 - FTM0 Clock Gate Control"]
            #[inline(always)]
            pub fn ftm0(&mut self) -> FTM0_W {
                FTM0_W { w: self }
            }
            #[doc = "Bit 7 - FTM2 Clock Gate Control"]
            #[inline(always)]
            pub fn ftm2(&mut self) -> FTM2_W {
                FTM2_W { w: self }
            }
            #[doc = "Bit 10 - CRC Clock Gate Control"]
            #[inline(always)]
            pub fn crc(&mut self) -> CRC_W {
                CRC_W { w: self }
            }
            #[doc = "Bit 12 - Flash Clock Gate Control"]
            #[inline(always)]
            pub fn flash(&mut self) -> FLASH_W {
                FLASH_W { w: self }
            }
            #[doc = "Bit 13 - SWD (single wire debugger) Clock Gate Control"]
            #[inline(always)]
            pub fn swd(&mut self) -> SWD_W {
                SWD_W { w: self }
            }
            #[doc = "Bit 17 - I2C Clock Gate Control"]
            #[inline(always)]
            pub fn i2c(&mut self) -> I2C_W {
                I2C_W { w: self }
            }
            #[doc = "Bit 18 - SPI0 Clock Gate Control"]
            #[inline(always)]
            pub fn spi0(&mut self) -> SPI0_W {
                SPI0_W { w: self }
            }
            #[doc = "Bit 20 - UART0 Clock Gate Control"]
            #[inline(always)]
            pub fn uart0(&mut self) -> UART0_W {
                UART0_W { w: self }
            }
            #[doc = "Bit 24 - KBI0 Clock Gate Control"]
            #[inline(always)]
            pub fn kbi0(&mut self) -> KBI0_W {
                KBI0_W { w: self }
            }
            #[doc = "Bit 25 - KBI1 Clock Gate Control"]
            #[inline(always)]
            pub fn kbi1(&mut self) -> KBI1_W {
                KBI1_W { w: self }
            }
            #[doc = "Bit 27 - IRQ Clock Gate Control"]
            #[inline(always)]
            pub fn irq(&mut self) -> IRQ_W {
                IRQ_W { w: self }
            }
            #[doc = "Bit 29 - ADC Clock Gate Control"]
            #[inline(always)]
            pub fn adc(&mut self) -> ADC_W {
                ADC_W { w: self }
            }
            #[doc = "Bit 30 - ACMP0 Clock Gate Control"]
            #[inline(always)]
            pub fn acmp0(&mut self) -> ACMP0_W {
                ACMP0_W { w: self }
            }
            #[doc = "Bit 31 - ACMP1 Clock Gate Control"]
            #[inline(always)]
            pub fn acmp1(&mut self) -> ACMP1_W {
                ACMP1_W { w: self }
            }
        }
    }
    #[doc = "Universally Unique Identifier Low Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [uuidl](uuidl) module"]
    pub type UUIDL = crate::Reg<u32, _UUIDL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UUIDL;
    #[doc = "`read()` method returns [uuidl::R](uuidl::R) reader structure"]
    impl crate::Readable for UUIDL {}
    #[doc = "Universally Unique Identifier Low Register"]
    pub mod uuidl {
        #[doc = "Reader of register UUIDL"]
        pub type R = crate::R<u32, super::UUIDL>;
        #[doc = "Reader of field `ID`"]
        pub type ID_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Universally Unique Identifier"]
            #[inline(always)]
            pub fn id(&self) -> ID_R {
                ID_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Universally Unique Identifier Middle Low Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [uuidml](uuidml) module"]
    pub type UUIDML = crate::Reg<u32, _UUIDML>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UUIDML;
    #[doc = "`read()` method returns [uuidml::R](uuidml::R) reader structure"]
    impl crate::Readable for UUIDML {}
    #[doc = "Universally Unique Identifier Middle Low Register"]
    pub mod uuidml {
        #[doc = "Reader of register UUIDML"]
        pub type R = crate::R<u32, super::UUIDML>;
        #[doc = "Reader of field `ID`"]
        pub type ID_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Universally Unique Identifier"]
            #[inline(always)]
            pub fn id(&self) -> ID_R {
                ID_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Universally Unique Identifier Middle High Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [uuidmh](uuidmh) module"]
    pub type UUIDMH = crate::Reg<u32, _UUIDMH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UUIDMH;
    #[doc = "`read()` method returns [uuidmh::R](uuidmh::R) reader structure"]
    impl crate::Readable for UUIDMH {}
    #[doc = "Universally Unique Identifier Middle High Register"]
    pub mod uuidmh {
        #[doc = "Reader of register UUIDMH"]
        pub type R = crate::R<u32, super::UUIDMH>;
        #[doc = "Reader of field `ID`"]
        pub type ID_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Universally Unique Identifier"]
            #[inline(always)]
            pub fn id(&self) -> ID_R {
                ID_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Clock Divider Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clkdiv](clkdiv) module"]
    pub type CLKDIV = crate::Reg<u32, _CLKDIV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CLKDIV;
    #[doc = "`read()` method returns [clkdiv::R](clkdiv::R) reader structure"]
    impl crate::Readable for CLKDIV {}
    #[doc = "`write(|w| ..)` method takes [clkdiv::W](clkdiv::W) writer structure"]
    impl crate::Writable for CLKDIV {}
    #[doc = "Clock Divider Register"]
    pub mod clkdiv {
        #[doc = "Reader of register CLKDIV"]
        pub type R = crate::R<u32, super::CLKDIV>;
        #[doc = "Writer for register CLKDIV"]
        pub type W = crate::W<u32, super::CLKDIV>;
        #[doc = "Register CLKDIV `reset()`'s with value 0"]
        impl crate::ResetValue for super::CLKDIV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Clock 3 output divider value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OUTDIV3_A {
            #[doc = "0: Same as ICSOUTCLK."]
            _0 = 0,
            #[doc = "1: ICSOUTCLK divides by 2."]
            _1 = 1,
        }
        impl From<OUTDIV3_A> for bool {
            #[inline(always)]
            fn from(variant: OUTDIV3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OUTDIV3`"]
        pub type OUTDIV3_R = crate::R<bool, OUTDIV3_A>;
        impl OUTDIV3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OUTDIV3_A {
                match self.bits {
                    false => OUTDIV3_A::_0,
                    true => OUTDIV3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == OUTDIV3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == OUTDIV3_A::_1
            }
        }
        #[doc = "Write proxy for field `OUTDIV3`"]
        pub struct OUTDIV3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OUTDIV3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OUTDIV3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Same as ICSOUTCLK."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(OUTDIV3_A::_0)
            }
            #[doc = "ICSOUTCLK divides by 2."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(OUTDIV3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Clock 2 output divider value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OUTDIV2_A {
            #[doc = "0: Not divided from divider1."]
            _0 = 0,
            #[doc = "1: Divide by 2 from divider1."]
            _1 = 1,
        }
        impl From<OUTDIV2_A> for bool {
            #[inline(always)]
            fn from(variant: OUTDIV2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OUTDIV2`"]
        pub type OUTDIV2_R = crate::R<bool, OUTDIV2_A>;
        impl OUTDIV2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OUTDIV2_A {
                match self.bits {
                    false => OUTDIV2_A::_0,
                    true => OUTDIV2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == OUTDIV2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == OUTDIV2_A::_1
            }
        }
        #[doc = "Write proxy for field `OUTDIV2`"]
        pub struct OUTDIV2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OUTDIV2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OUTDIV2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Not divided from divider1."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(OUTDIV2_A::_0)
            }
            #[doc = "Divide by 2 from divider1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(OUTDIV2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Clock 1 output divider value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum OUTDIV1_A {
            #[doc = "0: Same as ICSOUTCLK."]
            _00 = 0,
            #[doc = "1: ICSOUTCLK divides by 2."]
            _01 = 1,
            #[doc = "2: ICSOUTCLK divides by 3."]
            _10 = 2,
            #[doc = "3: ICSOUTCLK divides by 4."]
            _11 = 3,
        }
        impl From<OUTDIV1_A> for u8 {
            #[inline(always)]
            fn from(variant: OUTDIV1_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `OUTDIV1`"]
        pub type OUTDIV1_R = crate::R<u8, OUTDIV1_A>;
        impl OUTDIV1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OUTDIV1_A {
                match self.bits {
                    0 => OUTDIV1_A::_00,
                    1 => OUTDIV1_A::_01,
                    2 => OUTDIV1_A::_10,
                    3 => OUTDIV1_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == OUTDIV1_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == OUTDIV1_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == OUTDIV1_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == OUTDIV1_A::_11
            }
        }
        #[doc = "Write proxy for field `OUTDIV1`"]
        pub struct OUTDIV1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OUTDIV1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OUTDIV1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Same as ICSOUTCLK."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(OUTDIV1_A::_00)
            }
            #[doc = "ICSOUTCLK divides by 2."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(OUTDIV1_A::_01)
            }
            #[doc = "ICSOUTCLK divides by 3."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(OUTDIV1_A::_10)
            }
            #[doc = "ICSOUTCLK divides by 4."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(OUTDIV1_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 20 - Clock 3 output divider value"]
            #[inline(always)]
            pub fn outdiv3(&self) -> OUTDIV3_R {
                OUTDIV3_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Clock 2 output divider value"]
            #[inline(always)]
            pub fn outdiv2(&self) -> OUTDIV2_R {
                OUTDIV2_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bits 28:29 - Clock 1 output divider value"]
            #[inline(always)]
            pub fn outdiv1(&self) -> OUTDIV1_R {
                OUTDIV1_R::new(((self.bits >> 28) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 20 - Clock 3 output divider value"]
            #[inline(always)]
            pub fn outdiv3(&mut self) -> OUTDIV3_W {
                OUTDIV3_W { w: self }
            }
            #[doc = "Bit 24 - Clock 2 output divider value"]
            #[inline(always)]
            pub fn outdiv2(&mut self) -> OUTDIV2_W {
                OUTDIV2_W { w: self }
            }
            #[doc = "Bits 28:29 - Clock 1 output divider value"]
            #[inline(always)]
            pub fn outdiv1(&mut self) -> OUTDIV1_W {
                OUTDIV1_W { w: self }
            }
        }
    }
}
#[doc = "Port control and interrupts"]
pub struct PORT {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PORT {}
impl PORT {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const port::RegisterBlock {
        0x4004_9000 as *const _
    }
}
impl Deref for PORT {
    type Target = port::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*PORT::ptr() }
    }
}
#[doc = "Port control and interrupts"]
pub mod port {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Port Filter Register"]
        pub ioflt: IOFLT,
        #[doc = "0x04 - Port Pullup Enable Low Register"]
        pub puel: PUEL,
        _reserved2: [u8; 4usize],
        #[doc = "0x0c - Port High Drive Enable Register"]
        pub hdrve: HDRVE,
    }
    #[doc = "Port Filter Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ioflt](ioflt) module"]
    pub type IOFLT = crate::Reg<u32, _IOFLT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOFLT;
    #[doc = "`read()` method returns [ioflt::R](ioflt::R) reader structure"]
    impl crate::Readable for IOFLT {}
    #[doc = "`write(|w| ..)` method takes [ioflt::W](ioflt::W) writer structure"]
    impl crate::Writable for IOFLT {}
    #[doc = "Port Filter Register"]
    pub mod ioflt {
        #[doc = "Reader of register IOFLT"]
        pub type R = crate::R<u32, super::IOFLT>;
        #[doc = "Writer for register IOFLT"]
        pub type W = crate::W<u32, super::IOFLT>;
        #[doc = "Register IOFLT `reset()`'s with value 0x00c0_0000"]
        impl crate::ResetValue for super::IOFLT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x00c0_0000
            }
        }
        #[doc = "Filter Selection for Input from PTA\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FLTA_A {
            #[doc = "0: BUSCLK"]
            _00 = 0,
            #[doc = "1: FLTDIV1"]
            _01 = 1,
            #[doc = "2: FLTDIV2"]
            _10 = 2,
            #[doc = "3: FLTDIV3"]
            _11 = 3,
        }
        impl From<FLTA_A> for u8 {
            #[inline(always)]
            fn from(variant: FLTA_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FLTA`"]
        pub type FLTA_R = crate::R<u8, FLTA_A>;
        impl FLTA_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLTA_A {
                match self.bits {
                    0 => FLTA_A::_00,
                    1 => FLTA_A::_01,
                    2 => FLTA_A::_10,
                    3 => FLTA_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == FLTA_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == FLTA_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == FLTA_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == FLTA_A::_11
            }
        }
        #[doc = "Write proxy for field `FLTA`"]
        pub struct FLTA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLTA_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLTA_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "BUSCLK"]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(FLTA_A::_00)
            }
            #[doc = "FLTDIV1"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(FLTA_A::_01)
            }
            #[doc = "FLTDIV2"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(FLTA_A::_10)
            }
            #[doc = "FLTDIV3"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(FLTA_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Filter Selection for Input from PTB\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FLTB_A {
            #[doc = "0: BUSCLK"]
            _00 = 0,
            #[doc = "1: FLTDIV1"]
            _01 = 1,
            #[doc = "2: FLTDIV2"]
            _10 = 2,
            #[doc = "3: FLTDIV3"]
            _11 = 3,
        }
        impl From<FLTB_A> for u8 {
            #[inline(always)]
            fn from(variant: FLTB_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FLTB`"]
        pub type FLTB_R = crate::R<u8, FLTB_A>;
        impl FLTB_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLTB_A {
                match self.bits {
                    0 => FLTB_A::_00,
                    1 => FLTB_A::_01,
                    2 => FLTB_A::_10,
                    3 => FLTB_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == FLTB_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == FLTB_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == FLTB_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == FLTB_A::_11
            }
        }
        #[doc = "Write proxy for field `FLTB`"]
        pub struct FLTB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLTB_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLTB_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "BUSCLK"]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(FLTB_A::_00)
            }
            #[doc = "FLTDIV1"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(FLTB_A::_01)
            }
            #[doc = "FLTDIV2"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(FLTB_A::_10)
            }
            #[doc = "FLTDIV3"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(FLTB_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Filter Selection for Input from PTC\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FLTC_A {
            #[doc = "0: BUSCLK"]
            _00 = 0,
            #[doc = "1: FLTDIV1"]
            _01 = 1,
            #[doc = "2: FLTDIV2"]
            _10 = 2,
            #[doc = "3: FLTDIV3"]
            _11 = 3,
        }
        impl From<FLTC_A> for u8 {
            #[inline(always)]
            fn from(variant: FLTC_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FLTC`"]
        pub type FLTC_R = crate::R<u8, FLTC_A>;
        impl FLTC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLTC_A {
                match self.bits {
                    0 => FLTC_A::_00,
                    1 => FLTC_A::_01,
                    2 => FLTC_A::_10,
                    3 => FLTC_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == FLTC_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == FLTC_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == FLTC_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == FLTC_A::_11
            }
        }
        #[doc = "Write proxy for field `FLTC`"]
        pub struct FLTC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLTC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLTC_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "BUSCLK"]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(FLTC_A::_00)
            }
            #[doc = "FLTDIV1"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(FLTC_A::_01)
            }
            #[doc = "FLTDIV2"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(FLTC_A::_10)
            }
            #[doc = "FLTDIV3"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(FLTC_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Filter Selection For Input from SCL/SDA\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FLTIIC_A {
            #[doc = "0: No filter"]
            _00 = 0,
            #[doc = "1: Select FLTDIV1"]
            _01 = 1,
            #[doc = "2: Select FLTDIV2"]
            _10 = 2,
            #[doc = "3: Select BUSCLK"]
            _11 = 3,
        }
        impl From<FLTIIC_A> for u8 {
            #[inline(always)]
            fn from(variant: FLTIIC_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FLTIIC`"]
        pub type FLTIIC_R = crate::R<u8, FLTIIC_A>;
        impl FLTIIC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLTIIC_A {
                match self.bits {
                    0 => FLTIIC_A::_00,
                    1 => FLTIIC_A::_01,
                    2 => FLTIIC_A::_10,
                    3 => FLTIIC_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == FLTIIC_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == FLTIIC_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == FLTIIC_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == FLTIIC_A::_11
            }
        }
        #[doc = "Write proxy for field `FLTIIC`"]
        pub struct FLTIIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLTIIC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLTIIC_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No filter"]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(FLTIIC_A::_00)
            }
            #[doc = "Select FLTDIV1"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(FLTIIC_A::_01)
            }
            #[doc = "Select FLTDIV2"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(FLTIIC_A::_10)
            }
            #[doc = "Select BUSCLK"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(FLTIIC_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Filter Selection For Input from FTM0CH0/FTM0CH1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FLTFTM0_A {
            #[doc = "0: No filter"]
            _00 = 0,
            #[doc = "1: Select FLTDIV1"]
            _01 = 1,
            #[doc = "2: Select FLTDIV2"]
            _10 = 2,
            #[doc = "3: Select FLTDIV3"]
            _11 = 3,
        }
        impl From<FLTFTM0_A> for u8 {
            #[inline(always)]
            fn from(variant: FLTFTM0_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FLTFTM0`"]
        pub type FLTFTM0_R = crate::R<u8, FLTFTM0_A>;
        impl FLTFTM0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLTFTM0_A {
                match self.bits {
                    0 => FLTFTM0_A::_00,
                    1 => FLTFTM0_A::_01,
                    2 => FLTFTM0_A::_10,
                    3 => FLTFTM0_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == FLTFTM0_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == FLTFTM0_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == FLTFTM0_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == FLTFTM0_A::_11
            }
        }
        #[doc = "Write proxy for field `FLTFTM0`"]
        pub struct FLTFTM0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLTFTM0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLTFTM0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No filter"]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(FLTFTM0_A::_00)
            }
            #[doc = "Select FLTDIV1"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(FLTFTM0_A::_01)
            }
            #[doc = "Select FLTDIV2"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(FLTFTM0_A::_10)
            }
            #[doc = "Select FLTDIV3"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(FLTFTM0_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Filter Selection For Input from PWT_IN1/PWT_IN0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FLTPWT_A {
            #[doc = "0: No filter"]
            _00 = 0,
            #[doc = "1: Select FLTDIV1"]
            _01 = 1,
            #[doc = "2: Select FLTDIV2"]
            _10 = 2,
            #[doc = "3: Select FLTDIV3"]
            _11 = 3,
        }
        impl From<FLTPWT_A> for u8 {
            #[inline(always)]
            fn from(variant: FLTPWT_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FLTPWT`"]
        pub type FLTPWT_R = crate::R<u8, FLTPWT_A>;
        impl FLTPWT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLTPWT_A {
                match self.bits {
                    0 => FLTPWT_A::_00,
                    1 => FLTPWT_A::_01,
                    2 => FLTPWT_A::_10,
                    3 => FLTPWT_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == FLTPWT_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == FLTPWT_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == FLTPWT_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == FLTPWT_A::_11
            }
        }
        #[doc = "Write proxy for field `FLTPWT`"]
        pub struct FLTPWT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLTPWT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLTPWT_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No filter"]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(FLTPWT_A::_00)
            }
            #[doc = "Select FLTDIV1"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(FLTPWT_A::_01)
            }
            #[doc = "Select FLTDIV2"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(FLTPWT_A::_10)
            }
            #[doc = "Select FLTDIV3"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(FLTPWT_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Filter Selection for Input from RESET/IRQ\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FLTRST_A {
            #[doc = "0: No filter."]
            _00 = 0,
            #[doc = "1: Selects FLTDIV1, and will switch to FLTDIV3 in Stop mode automatically."]
            _01 = 1,
            #[doc = "2: Selects FLTDIV2, and will switch to FLTDIV3 in Stop mode automatically."]
            _10 = 2,
            #[doc = "3: FLTDIV3"]
            _11 = 3,
        }
        impl From<FLTRST_A> for u8 {
            #[inline(always)]
            fn from(variant: FLTRST_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FLTRST`"]
        pub type FLTRST_R = crate::R<u8, FLTRST_A>;
        impl FLTRST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLTRST_A {
                match self.bits {
                    0 => FLTRST_A::_00,
                    1 => FLTRST_A::_01,
                    2 => FLTRST_A::_10,
                    3 => FLTRST_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == FLTRST_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == FLTRST_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == FLTRST_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == FLTRST_A::_11
            }
        }
        #[doc = "Write proxy for field `FLTRST`"]
        pub struct FLTRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLTRST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLTRST_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No filter."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(FLTRST_A::_00)
            }
            #[doc = "Selects FLTDIV1, and will switch to FLTDIV3 in Stop mode automatically."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(FLTRST_A::_01)
            }
            #[doc = "Selects FLTDIV2, and will switch to FLTDIV3 in Stop mode automatically."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(FLTRST_A::_10)
            }
            #[doc = "FLTDIV3"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(FLTRST_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Filter selection for Input from KBI0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FLTKBI0_A {
            #[doc = "0: No filter."]
            _00 = 0,
            #[doc = "1: Selects FLTDIV1, and will switch to FLTDIV3 in Stop mode automatically."]
            _01 = 1,
            #[doc = "2: Selects FLTDIV2, and will switch to FLTDIV3 in Stop mode automatically."]
            _10 = 2,
            #[doc = "3: FLTDIV3"]
            _11 = 3,
        }
        impl From<FLTKBI0_A> for u8 {
            #[inline(always)]
            fn from(variant: FLTKBI0_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FLTKBI0`"]
        pub type FLTKBI0_R = crate::R<u8, FLTKBI0_A>;
        impl FLTKBI0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLTKBI0_A {
                match self.bits {
                    0 => FLTKBI0_A::_00,
                    1 => FLTKBI0_A::_01,
                    2 => FLTKBI0_A::_10,
                    3 => FLTKBI0_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == FLTKBI0_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == FLTKBI0_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == FLTKBI0_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == FLTKBI0_A::_11
            }
        }
        #[doc = "Write proxy for field `FLTKBI0`"]
        pub struct FLTKBI0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLTKBI0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLTKBI0_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No filter."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(FLTKBI0_A::_00)
            }
            #[doc = "Selects FLTDIV1, and will switch to FLTDIV3 in Stop mode automatically."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(FLTKBI0_A::_01)
            }
            #[doc = "Selects FLTDIV2, and will switch to FLTDIV3 in Stop mode automatically."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(FLTKBI0_A::_10)
            }
            #[doc = "FLTDIV3"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(FLTKBI0_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Filter Selection for Input from KBI1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FLTKBI1_A {
            #[doc = "0: No filter"]
            _00 = 0,
            #[doc = "1: Selects FLTDIV1, and will switch to FLTDIV3 in Stop mode automatically."]
            _01 = 1,
            #[doc = "2: Selects FLTDIV2, and will switch to FLTDIV3 in Stop mode automatically."]
            _10 = 2,
            #[doc = "3: FLTDIV3"]
            _11 = 3,
        }
        impl From<FLTKBI1_A> for u8 {
            #[inline(always)]
            fn from(variant: FLTKBI1_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FLTKBI1`"]
        pub type FLTKBI1_R = crate::R<u8, FLTKBI1_A>;
        impl FLTKBI1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLTKBI1_A {
                match self.bits {
                    0 => FLTKBI1_A::_00,
                    1 => FLTKBI1_A::_01,
                    2 => FLTKBI1_A::_10,
                    3 => FLTKBI1_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == FLTKBI1_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == FLTKBI1_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == FLTKBI1_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == FLTKBI1_A::_11
            }
        }
        #[doc = "Write proxy for field `FLTKBI1`"]
        pub struct FLTKBI1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLTKBI1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLTKBI1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No filter"]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(FLTKBI1_A::_00)
            }
            #[doc = "Selects FLTDIV1, and will switch to FLTDIV3 in Stop mode automatically."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(FLTKBI1_A::_01)
            }
            #[doc = "Selects FLTDIV2, and will switch to FLTDIV3 in Stop mode automatically."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(FLTKBI1_A::_10)
            }
            #[doc = "FLTDIV3"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(FLTKBI1_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Filter Selection for Input from NMI\n\nValue on reset: 3"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FLTNMI_A {
            #[doc = "0: No filter."]
            _00 = 0,
            #[doc = "1: Selects FLTDIV1, and will switch to FLTDIV3 in Stop mode automatically."]
            _01 = 1,
            #[doc = "2: Selects FLTDIV2, and will switch to FLTDIV3 in Stop mode automatically."]
            _10 = 2,
            #[doc = "3: FLTDIV3"]
            _11 = 3,
        }
        impl From<FLTNMI_A> for u8 {
            #[inline(always)]
            fn from(variant: FLTNMI_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FLTNMI`"]
        pub type FLTNMI_R = crate::R<u8, FLTNMI_A>;
        impl FLTNMI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLTNMI_A {
                match self.bits {
                    0 => FLTNMI_A::_00,
                    1 => FLTNMI_A::_01,
                    2 => FLTNMI_A::_10,
                    3 => FLTNMI_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == FLTNMI_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == FLTNMI_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == FLTNMI_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == FLTNMI_A::_11
            }
        }
        #[doc = "Write proxy for field `FLTNMI`"]
        pub struct FLTNMI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLTNMI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLTNMI_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "No filter."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(FLTNMI_A::_00)
            }
            #[doc = "Selects FLTDIV1, and will switch to FLTDIV3 in Stop mode automatically."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(FLTNMI_A::_01)
            }
            #[doc = "Selects FLTDIV2, and will switch to FLTDIV3 in Stop mode automatically."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(FLTNMI_A::_10)
            }
            #[doc = "FLTDIV3"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(FLTNMI_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Filter Division Set 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FLTDIV1_A {
            #[doc = "0: BUSCLK/2"]
            _00 = 0,
            #[doc = "1: BUSCLK/4"]
            _01 = 1,
            #[doc = "2: BUSCLK/8"]
            _10 = 2,
            #[doc = "3: BUSCLK/16"]
            _11 = 3,
        }
        impl From<FLTDIV1_A> for u8 {
            #[inline(always)]
            fn from(variant: FLTDIV1_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FLTDIV1`"]
        pub type FLTDIV1_R = crate::R<u8, FLTDIV1_A>;
        impl FLTDIV1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLTDIV1_A {
                match self.bits {
                    0 => FLTDIV1_A::_00,
                    1 => FLTDIV1_A::_01,
                    2 => FLTDIV1_A::_10,
                    3 => FLTDIV1_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == FLTDIV1_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == FLTDIV1_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == FLTDIV1_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == FLTDIV1_A::_11
            }
        }
        #[doc = "Write proxy for field `FLTDIV1`"]
        pub struct FLTDIV1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLTDIV1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLTDIV1_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "BUSCLK/2"]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(FLTDIV1_A::_00)
            }
            #[doc = "BUSCLK/4"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(FLTDIV1_A::_01)
            }
            #[doc = "BUSCLK/8"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(FLTDIV1_A::_10)
            }
            #[doc = "BUSCLK/16"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(FLTDIV1_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Filter Division Set 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FLTDIV2_A {
            #[doc = "0: BUSCLK/32"]
            _000 = 0,
            #[doc = "1: BUSCLK/64"]
            _001 = 1,
            #[doc = "2: BUSCLK/128"]
            _010 = 2,
            #[doc = "3: BUSCLK/256"]
            _011 = 3,
            #[doc = "4: BUSCLK/512"]
            _100 = 4,
            #[doc = "5: BUSCLK/1024"]
            _101 = 5,
            #[doc = "6: BUSCLK/2048"]
            _110 = 6,
            #[doc = "7: BUSCLK/4096"]
            _111 = 7,
        }
        impl From<FLTDIV2_A> for u8 {
            #[inline(always)]
            fn from(variant: FLTDIV2_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FLTDIV2`"]
        pub type FLTDIV2_R = crate::R<u8, FLTDIV2_A>;
        impl FLTDIV2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLTDIV2_A {
                match self.bits {
                    0 => FLTDIV2_A::_000,
                    1 => FLTDIV2_A::_001,
                    2 => FLTDIV2_A::_010,
                    3 => FLTDIV2_A::_011,
                    4 => FLTDIV2_A::_100,
                    5 => FLTDIV2_A::_101,
                    6 => FLTDIV2_A::_110,
                    7 => FLTDIV2_A::_111,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_000`"]
            #[inline(always)]
            pub fn is_000(&self) -> bool {
                *self == FLTDIV2_A::_000
            }
            #[doc = "Checks if the value of the field is `_001`"]
            #[inline(always)]
            pub fn is_001(&self) -> bool {
                *self == FLTDIV2_A::_001
            }
            #[doc = "Checks if the value of the field is `_010`"]
            #[inline(always)]
            pub fn is_010(&self) -> bool {
                *self == FLTDIV2_A::_010
            }
            #[doc = "Checks if the value of the field is `_011`"]
            #[inline(always)]
            pub fn is_011(&self) -> bool {
                *self == FLTDIV2_A::_011
            }
            #[doc = "Checks if the value of the field is `_100`"]
            #[inline(always)]
            pub fn is_100(&self) -> bool {
                *self == FLTDIV2_A::_100
            }
            #[doc = "Checks if the value of the field is `_101`"]
            #[inline(always)]
            pub fn is_101(&self) -> bool {
                *self == FLTDIV2_A::_101
            }
            #[doc = "Checks if the value of the field is `_110`"]
            #[inline(always)]
            pub fn is_110(&self) -> bool {
                *self == FLTDIV2_A::_110
            }
            #[doc = "Checks if the value of the field is `_111`"]
            #[inline(always)]
            pub fn is_111(&self) -> bool {
                *self == FLTDIV2_A::_111
            }
        }
        #[doc = "Write proxy for field `FLTDIV2`"]
        pub struct FLTDIV2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLTDIV2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLTDIV2_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "BUSCLK/32"]
            #[inline(always)]
            pub fn _000(self) -> &'a mut W {
                self.variant(FLTDIV2_A::_000)
            }
            #[doc = "BUSCLK/64"]
            #[inline(always)]
            pub fn _001(self) -> &'a mut W {
                self.variant(FLTDIV2_A::_001)
            }
            #[doc = "BUSCLK/128"]
            #[inline(always)]
            pub fn _010(self) -> &'a mut W {
                self.variant(FLTDIV2_A::_010)
            }
            #[doc = "BUSCLK/256"]
            #[inline(always)]
            pub fn _011(self) -> &'a mut W {
                self.variant(FLTDIV2_A::_011)
            }
            #[doc = "BUSCLK/512"]
            #[inline(always)]
            pub fn _100(self) -> &'a mut W {
                self.variant(FLTDIV2_A::_100)
            }
            #[doc = "BUSCLK/1024"]
            #[inline(always)]
            pub fn _101(self) -> &'a mut W {
                self.variant(FLTDIV2_A::_101)
            }
            #[doc = "BUSCLK/2048"]
            #[inline(always)]
            pub fn _110(self) -> &'a mut W {
                self.variant(FLTDIV2_A::_110)
            }
            #[doc = "BUSCLK/4096"]
            #[inline(always)]
            pub fn _111(self) -> &'a mut W {
                self.variant(FLTDIV2_A::_111)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 26)) | (((value as u32) & 0x07) << 26);
                self.w
            }
        }
        #[doc = "Filter Division Set 3\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FLTDIV3_A {
            #[doc = "0: LPOCLK"]
            _000 = 0,
            #[doc = "1: LPOCLK/2"]
            _001 = 1,
            #[doc = "2: LPOCLK/4"]
            _010 = 2,
            #[doc = "3: LPOCLK/8"]
            _011 = 3,
            #[doc = "4: LPOCLK/16"]
            _100 = 4,
            #[doc = "5: LPOCLK/32"]
            _101 = 5,
            #[doc = "6: LPOCLK/64"]
            _110 = 6,
            #[doc = "7: LPOCLK/128"]
            _111 = 7,
        }
        impl From<FLTDIV3_A> for u8 {
            #[inline(always)]
            fn from(variant: FLTDIV3_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FLTDIV3`"]
        pub type FLTDIV3_R = crate::R<u8, FLTDIV3_A>;
        impl FLTDIV3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLTDIV3_A {
                match self.bits {
                    0 => FLTDIV3_A::_000,
                    1 => FLTDIV3_A::_001,
                    2 => FLTDIV3_A::_010,
                    3 => FLTDIV3_A::_011,
                    4 => FLTDIV3_A::_100,
                    5 => FLTDIV3_A::_101,
                    6 => FLTDIV3_A::_110,
                    7 => FLTDIV3_A::_111,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_000`"]
            #[inline(always)]
            pub fn is_000(&self) -> bool {
                *self == FLTDIV3_A::_000
            }
            #[doc = "Checks if the value of the field is `_001`"]
            #[inline(always)]
            pub fn is_001(&self) -> bool {
                *self == FLTDIV3_A::_001
            }
            #[doc = "Checks if the value of the field is `_010`"]
            #[inline(always)]
            pub fn is_010(&self) -> bool {
                *self == FLTDIV3_A::_010
            }
            #[doc = "Checks if the value of the field is `_011`"]
            #[inline(always)]
            pub fn is_011(&self) -> bool {
                *self == FLTDIV3_A::_011
            }
            #[doc = "Checks if the value of the field is `_100`"]
            #[inline(always)]
            pub fn is_100(&self) -> bool {
                *self == FLTDIV3_A::_100
            }
            #[doc = "Checks if the value of the field is `_101`"]
            #[inline(always)]
            pub fn is_101(&self) -> bool {
                *self == FLTDIV3_A::_101
            }
            #[doc = "Checks if the value of the field is `_110`"]
            #[inline(always)]
            pub fn is_110(&self) -> bool {
                *self == FLTDIV3_A::_110
            }
            #[doc = "Checks if the value of the field is `_111`"]
            #[inline(always)]
            pub fn is_111(&self) -> bool {
                *self == FLTDIV3_A::_111
            }
        }
        #[doc = "Write proxy for field `FLTDIV3`"]
        pub struct FLTDIV3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLTDIV3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLTDIV3_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "LPOCLK"]
            #[inline(always)]
            pub fn _000(self) -> &'a mut W {
                self.variant(FLTDIV3_A::_000)
            }
            #[doc = "LPOCLK/2"]
            #[inline(always)]
            pub fn _001(self) -> &'a mut W {
                self.variant(FLTDIV3_A::_001)
            }
            #[doc = "LPOCLK/4"]
            #[inline(always)]
            pub fn _010(self) -> &'a mut W {
                self.variant(FLTDIV3_A::_010)
            }
            #[doc = "LPOCLK/8"]
            #[inline(always)]
            pub fn _011(self) -> &'a mut W {
                self.variant(FLTDIV3_A::_011)
            }
            #[doc = "LPOCLK/16"]
            #[inline(always)]
            pub fn _100(self) -> &'a mut W {
                self.variant(FLTDIV3_A::_100)
            }
            #[doc = "LPOCLK/32"]
            #[inline(always)]
            pub fn _101(self) -> &'a mut W {
                self.variant(FLTDIV3_A::_101)
            }
            #[doc = "LPOCLK/64"]
            #[inline(always)]
            pub fn _110(self) -> &'a mut W {
                self.variant(FLTDIV3_A::_110)
            }
            #[doc = "LPOCLK/128"]
            #[inline(always)]
            pub fn _111(self) -> &'a mut W {
                self.variant(FLTDIV3_A::_111)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 29)) | (((value as u32) & 0x07) << 29);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Filter Selection for Input from PTA"]
            #[inline(always)]
            pub fn flta(&self) -> FLTA_R {
                FLTA_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Filter Selection for Input from PTB"]
            #[inline(always)]
            pub fn fltb(&self) -> FLTB_R {
                FLTB_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Filter Selection for Input from PTC"]
            #[inline(always)]
            pub fn fltc(&self) -> FLTC_R {
                FLTC_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Filter Selection For Input from SCL/SDA"]
            #[inline(always)]
            pub fn fltiic(&self) -> FLTIIC_R {
                FLTIIC_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Filter Selection For Input from FTM0CH0/FTM0CH1"]
            #[inline(always)]
            pub fn fltftm0(&self) -> FLTFTM0_R {
                FLTFTM0_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Filter Selection For Input from PWT_IN1/PWT_IN0"]
            #[inline(always)]
            pub fn fltpwt(&self) -> FLTPWT_R {
                FLTPWT_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Filter Selection for Input from RESET/IRQ"]
            #[inline(always)]
            pub fn fltrst(&self) -> FLTRST_R {
                FLTRST_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Filter selection for Input from KBI0"]
            #[inline(always)]
            pub fn fltkbi0(&self) -> FLTKBI0_R {
                FLTKBI0_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Filter Selection for Input from KBI1"]
            #[inline(always)]
            pub fn fltkbi1(&self) -> FLTKBI1_R {
                FLTKBI1_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Filter Selection for Input from NMI"]
            #[inline(always)]
            pub fn fltnmi(&self) -> FLTNMI_R {
                FLTNMI_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Filter Division Set 1"]
            #[inline(always)]
            pub fn fltdiv1(&self) -> FLTDIV1_R {
                FLTDIV1_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 26:28 - Filter Division Set 2"]
            #[inline(always)]
            pub fn fltdiv2(&self) -> FLTDIV2_R {
                FLTDIV2_R::new(((self.bits >> 26) & 0x07) as u8)
            }
            #[doc = "Bits 29:31 - Filter Division Set 3"]
            #[inline(always)]
            pub fn fltdiv3(&self) -> FLTDIV3_R {
                FLTDIV3_R::new(((self.bits >> 29) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Filter Selection for Input from PTA"]
            #[inline(always)]
            pub fn flta(&mut self) -> FLTA_W {
                FLTA_W { w: self }
            }
            #[doc = "Bits 2:3 - Filter Selection for Input from PTB"]
            #[inline(always)]
            pub fn fltb(&mut self) -> FLTB_W {
                FLTB_W { w: self }
            }
            #[doc = "Bits 4:5 - Filter Selection for Input from PTC"]
            #[inline(always)]
            pub fn fltc(&mut self) -> FLTC_W {
                FLTC_W { w: self }
            }
            #[doc = "Bits 10:11 - Filter Selection For Input from SCL/SDA"]
            #[inline(always)]
            pub fn fltiic(&mut self) -> FLTIIC_W {
                FLTIIC_W { w: self }
            }
            #[doc = "Bits 12:13 - Filter Selection For Input from FTM0CH0/FTM0CH1"]
            #[inline(always)]
            pub fn fltftm0(&mut self) -> FLTFTM0_W {
                FLTFTM0_W { w: self }
            }
            #[doc = "Bits 14:15 - Filter Selection For Input from PWT_IN1/PWT_IN0"]
            #[inline(always)]
            pub fn fltpwt(&mut self) -> FLTPWT_W {
                FLTPWT_W { w: self }
            }
            #[doc = "Bits 16:17 - Filter Selection for Input from RESET/IRQ"]
            #[inline(always)]
            pub fn fltrst(&mut self) -> FLTRST_W {
                FLTRST_W { w: self }
            }
            #[doc = "Bits 18:19 - Filter selection for Input from KBI0"]
            #[inline(always)]
            pub fn fltkbi0(&mut self) -> FLTKBI0_W {
                FLTKBI0_W { w: self }
            }
            #[doc = "Bits 20:21 - Filter Selection for Input from KBI1"]
            #[inline(always)]
            pub fn fltkbi1(&mut self) -> FLTKBI1_W {
                FLTKBI1_W { w: self }
            }
            #[doc = "Bits 22:23 - Filter Selection for Input from NMI"]
            #[inline(always)]
            pub fn fltnmi(&mut self) -> FLTNMI_W {
                FLTNMI_W { w: self }
            }
            #[doc = "Bits 24:25 - Filter Division Set 1"]
            #[inline(always)]
            pub fn fltdiv1(&mut self) -> FLTDIV1_W {
                FLTDIV1_W { w: self }
            }
            #[doc = "Bits 26:28 - Filter Division Set 2"]
            #[inline(always)]
            pub fn fltdiv2(&mut self) -> FLTDIV2_W {
                FLTDIV2_W { w: self }
            }
            #[doc = "Bits 29:31 - Filter Division Set 3"]
            #[inline(always)]
            pub fn fltdiv3(&mut self) -> FLTDIV3_W {
                FLTDIV3_W { w: self }
            }
        }
    }
    #[doc = "Port Pullup Enable Low Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [puel](puel) module"]
    pub type PUEL = crate::Reg<u32, _PUEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PUEL;
    #[doc = "`read()` method returns [puel::R](puel::R) reader structure"]
    impl crate::Readable for PUEL {}
    #[doc = "`write(|w| ..)` method takes [puel::W](puel::W) writer structure"]
    impl crate::Writable for PUEL {}
    #[doc = "Port Pullup Enable Low Register"]
    pub mod puel {
        #[doc = "Reader of register PUEL"]
        pub type R = crate::R<u32, super::PUEL>;
        #[doc = "Writer for register PUEL"]
        pub type W = crate::W<u32, super::PUEL>;
        #[doc = "Register PUEL `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::PUEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Pull Enable for Port A Bit 0\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTAPE0_A {
            #[doc = "0: Pullup is disabled for port A bit 0."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port A bit 0."]
            _1 = 1,
        }
        impl From<PTAPE0_A> for bool {
            #[inline(always)]
            fn from(variant: PTAPE0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTAPE0`"]
        pub type PTAPE0_R = crate::R<bool, PTAPE0_A>;
        impl PTAPE0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTAPE0_A {
                match self.bits {
                    false => PTAPE0_A::_0,
                    true => PTAPE0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTAPE0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTAPE0_A::_1
            }
        }
        #[doc = "Write proxy for field `PTAPE0`"]
        pub struct PTAPE0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTAPE0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTAPE0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port A bit 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTAPE0_A::_0)
            }
            #[doc = "Pullup is enabled for port A bit 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTAPE0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Pull Enable for Port A Bit 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTAPE1_A {
            #[doc = "0: Pullup is disabled for port A bit 1."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port A bit 1."]
            _1 = 1,
        }
        impl From<PTAPE1_A> for bool {
            #[inline(always)]
            fn from(variant: PTAPE1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTAPE1`"]
        pub type PTAPE1_R = crate::R<bool, PTAPE1_A>;
        impl PTAPE1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTAPE1_A {
                match self.bits {
                    false => PTAPE1_A::_0,
                    true => PTAPE1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTAPE1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTAPE1_A::_1
            }
        }
        #[doc = "Write proxy for field `PTAPE1`"]
        pub struct PTAPE1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTAPE1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTAPE1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port A bit 1."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTAPE1_A::_0)
            }
            #[doc = "Pullup is enabled for port A bit 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTAPE1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Pull Enable for Port A Bit 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTAPE2_A {
            #[doc = "0: Pullup is disabled for port A bit 2."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port A bit 2."]
            _1 = 1,
        }
        impl From<PTAPE2_A> for bool {
            #[inline(always)]
            fn from(variant: PTAPE2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTAPE2`"]
        pub type PTAPE2_R = crate::R<bool, PTAPE2_A>;
        impl PTAPE2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTAPE2_A {
                match self.bits {
                    false => PTAPE2_A::_0,
                    true => PTAPE2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTAPE2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTAPE2_A::_1
            }
        }
        #[doc = "Write proxy for field `PTAPE2`"]
        pub struct PTAPE2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTAPE2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTAPE2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port A bit 2."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTAPE2_A::_0)
            }
            #[doc = "Pullup is enabled for port A bit 2."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTAPE2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Pull Enable for Port A Bit 3\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTAPE3_A {
            #[doc = "0: Pullup is disabled for port A bit 3."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port A bit 3."]
            _1 = 1,
        }
        impl From<PTAPE3_A> for bool {
            #[inline(always)]
            fn from(variant: PTAPE3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTAPE3`"]
        pub type PTAPE3_R = crate::R<bool, PTAPE3_A>;
        impl PTAPE3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTAPE3_A {
                match self.bits {
                    false => PTAPE3_A::_0,
                    true => PTAPE3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTAPE3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTAPE3_A::_1
            }
        }
        #[doc = "Write proxy for field `PTAPE3`"]
        pub struct PTAPE3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTAPE3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTAPE3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port A bit 3."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTAPE3_A::_0)
            }
            #[doc = "Pullup is enabled for port A bit 3."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTAPE3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Pull Enable for Port A Bit 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTAPE4_A {
            #[doc = "0: Pullup is disabled for port A bit 4."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port A bit 4."]
            _1 = 1,
        }
        impl From<PTAPE4_A> for bool {
            #[inline(always)]
            fn from(variant: PTAPE4_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTAPE4`"]
        pub type PTAPE4_R = crate::R<bool, PTAPE4_A>;
        impl PTAPE4_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTAPE4_A {
                match self.bits {
                    false => PTAPE4_A::_0,
                    true => PTAPE4_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTAPE4_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTAPE4_A::_1
            }
        }
        #[doc = "Write proxy for field `PTAPE4`"]
        pub struct PTAPE4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTAPE4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTAPE4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port A bit 4."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTAPE4_A::_0)
            }
            #[doc = "Pullup is enabled for port A bit 4."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTAPE4_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Pull Enable for Port A Bit 5\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTAPE5_A {
            #[doc = "0: Pullup is disabled for port A bit 5."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port A bit 5."]
            _1 = 1,
        }
        impl From<PTAPE5_A> for bool {
            #[inline(always)]
            fn from(variant: PTAPE5_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTAPE5`"]
        pub type PTAPE5_R = crate::R<bool, PTAPE5_A>;
        impl PTAPE5_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTAPE5_A {
                match self.bits {
                    false => PTAPE5_A::_0,
                    true => PTAPE5_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTAPE5_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTAPE5_A::_1
            }
        }
        #[doc = "Write proxy for field `PTAPE5`"]
        pub struct PTAPE5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTAPE5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTAPE5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port A bit 5."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTAPE5_A::_0)
            }
            #[doc = "Pullup is enabled for port A bit 5."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTAPE5_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Pull Enable for Port A Bit 6\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTAPE6_A {
            #[doc = "0: Pullup is disabled for port A bit 6."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port A bit 6."]
            _1 = 1,
        }
        impl From<PTAPE6_A> for bool {
            #[inline(always)]
            fn from(variant: PTAPE6_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTAPE6`"]
        pub type PTAPE6_R = crate::R<bool, PTAPE6_A>;
        impl PTAPE6_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTAPE6_A {
                match self.bits {
                    false => PTAPE6_A::_0,
                    true => PTAPE6_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTAPE6_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTAPE6_A::_1
            }
        }
        #[doc = "Write proxy for field `PTAPE6`"]
        pub struct PTAPE6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTAPE6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTAPE6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port A bit 6."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTAPE6_A::_0)
            }
            #[doc = "Pullup is enabled for port A bit 6."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTAPE6_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Pull Enable for Port A Bit 7\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTAPE7_A {
            #[doc = "0: Pullup is disabled for port A bit 7."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port A bit 7."]
            _1 = 1,
        }
        impl From<PTAPE7_A> for bool {
            #[inline(always)]
            fn from(variant: PTAPE7_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTAPE7`"]
        pub type PTAPE7_R = crate::R<bool, PTAPE7_A>;
        impl PTAPE7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTAPE7_A {
                match self.bits {
                    false => PTAPE7_A::_0,
                    true => PTAPE7_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTAPE7_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTAPE7_A::_1
            }
        }
        #[doc = "Write proxy for field `PTAPE7`"]
        pub struct PTAPE7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTAPE7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTAPE7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port A bit 7."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTAPE7_A::_0)
            }
            #[doc = "Pullup is enabled for port A bit 7."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTAPE7_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Pull Enable for Port B Bit 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTBPE0_A {
            #[doc = "0: Pullup is disabled for port B bit 0."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port B bit 0."]
            _1 = 1,
        }
        impl From<PTBPE0_A> for bool {
            #[inline(always)]
            fn from(variant: PTBPE0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTBPE0`"]
        pub type PTBPE0_R = crate::R<bool, PTBPE0_A>;
        impl PTBPE0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTBPE0_A {
                match self.bits {
                    false => PTBPE0_A::_0,
                    true => PTBPE0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTBPE0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTBPE0_A::_1
            }
        }
        #[doc = "Write proxy for field `PTBPE0`"]
        pub struct PTBPE0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTBPE0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTBPE0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port B bit 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTBPE0_A::_0)
            }
            #[doc = "Pullup is enabled for port B bit 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTBPE0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Pull Enable for Port B Bit 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTBPE1_A {
            #[doc = "0: Pullup is disabled for port B bit 1."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port B bit 1."]
            _1 = 1,
        }
        impl From<PTBPE1_A> for bool {
            #[inline(always)]
            fn from(variant: PTBPE1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTBPE1`"]
        pub type PTBPE1_R = crate::R<bool, PTBPE1_A>;
        impl PTBPE1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTBPE1_A {
                match self.bits {
                    false => PTBPE1_A::_0,
                    true => PTBPE1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTBPE1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTBPE1_A::_1
            }
        }
        #[doc = "Write proxy for field `PTBPE1`"]
        pub struct PTBPE1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTBPE1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTBPE1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port B bit 1."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTBPE1_A::_0)
            }
            #[doc = "Pullup is enabled for port B bit 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTBPE1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Pull Enable for Port B Bit 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTBPE2_A {
            #[doc = "0: Pullup is disabled for port B bit 2."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port B bit 2."]
            _1 = 1,
        }
        impl From<PTBPE2_A> for bool {
            #[inline(always)]
            fn from(variant: PTBPE2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTBPE2`"]
        pub type PTBPE2_R = crate::R<bool, PTBPE2_A>;
        impl PTBPE2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTBPE2_A {
                match self.bits {
                    false => PTBPE2_A::_0,
                    true => PTBPE2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTBPE2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTBPE2_A::_1
            }
        }
        #[doc = "Write proxy for field `PTBPE2`"]
        pub struct PTBPE2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTBPE2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTBPE2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port B bit 2."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTBPE2_A::_0)
            }
            #[doc = "Pullup is enabled for port B bit 2."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTBPE2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Pull Enable for Port B Bit 3\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTBPE3_A {
            #[doc = "0: Pullup is disabled for port B bit 3."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port B bit 3."]
            _1 = 1,
        }
        impl From<PTBPE3_A> for bool {
            #[inline(always)]
            fn from(variant: PTBPE3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTBPE3`"]
        pub type PTBPE3_R = crate::R<bool, PTBPE3_A>;
        impl PTBPE3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTBPE3_A {
                match self.bits {
                    false => PTBPE3_A::_0,
                    true => PTBPE3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTBPE3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTBPE3_A::_1
            }
        }
        #[doc = "Write proxy for field `PTBPE3`"]
        pub struct PTBPE3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTBPE3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTBPE3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port B bit 3."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTBPE3_A::_0)
            }
            #[doc = "Pullup is enabled for port B bit 3."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTBPE3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Pull Enable for Port B Bit 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTBPE4_A {
            #[doc = "0: Pullup is disabled for port B bit 4."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port B bit 4."]
            _1 = 1,
        }
        impl From<PTBPE4_A> for bool {
            #[inline(always)]
            fn from(variant: PTBPE4_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTBPE4`"]
        pub type PTBPE4_R = crate::R<bool, PTBPE4_A>;
        impl PTBPE4_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTBPE4_A {
                match self.bits {
                    false => PTBPE4_A::_0,
                    true => PTBPE4_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTBPE4_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTBPE4_A::_1
            }
        }
        #[doc = "Write proxy for field `PTBPE4`"]
        pub struct PTBPE4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTBPE4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTBPE4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port B bit 4."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTBPE4_A::_0)
            }
            #[doc = "Pullup is enabled for port B bit 4."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTBPE4_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Pull Enable for Port B Bit 5\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTBPE5_A {
            #[doc = "0: Pullup is disabled for port B bit 5."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port B bit 5."]
            _1 = 1,
        }
        impl From<PTBPE5_A> for bool {
            #[inline(always)]
            fn from(variant: PTBPE5_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTBPE5`"]
        pub type PTBPE5_R = crate::R<bool, PTBPE5_A>;
        impl PTBPE5_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTBPE5_A {
                match self.bits {
                    false => PTBPE5_A::_0,
                    true => PTBPE5_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTBPE5_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTBPE5_A::_1
            }
        }
        #[doc = "Write proxy for field `PTBPE5`"]
        pub struct PTBPE5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTBPE5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTBPE5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port B bit 5."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTBPE5_A::_0)
            }
            #[doc = "Pullup is enabled for port B bit 5."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTBPE5_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Pull Enable for Port B Bit 6\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTBPE6_A {
            #[doc = "0: Pullup is disabled for port B bit 6."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port B bit 6."]
            _1 = 1,
        }
        impl From<PTBPE6_A> for bool {
            #[inline(always)]
            fn from(variant: PTBPE6_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTBPE6`"]
        pub type PTBPE6_R = crate::R<bool, PTBPE6_A>;
        impl PTBPE6_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTBPE6_A {
                match self.bits {
                    false => PTBPE6_A::_0,
                    true => PTBPE6_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTBPE6_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTBPE6_A::_1
            }
        }
        #[doc = "Write proxy for field `PTBPE6`"]
        pub struct PTBPE6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTBPE6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTBPE6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port B bit 6."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTBPE6_A::_0)
            }
            #[doc = "Pullup is enabled for port B bit 6."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTBPE6_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Pull Enable for Port B Bit 7\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTBPE7_A {
            #[doc = "0: Pullup is disabled for port B bit 7."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port B bit 7."]
            _1 = 1,
        }
        impl From<PTBPE7_A> for bool {
            #[inline(always)]
            fn from(variant: PTBPE7_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTBPE7`"]
        pub type PTBPE7_R = crate::R<bool, PTBPE7_A>;
        impl PTBPE7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTBPE7_A {
                match self.bits {
                    false => PTBPE7_A::_0,
                    true => PTBPE7_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTBPE7_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTBPE7_A::_1
            }
        }
        #[doc = "Write proxy for field `PTBPE7`"]
        pub struct PTBPE7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTBPE7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTBPE7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port B bit 7."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTBPE7_A::_0)
            }
            #[doc = "Pullup is enabled for port B bit 7."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTBPE7_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Pull Enable for Port C Bit 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCPE0_A {
            #[doc = "0: Pullup is disabled for port C bit 0."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port C bit 0."]
            _1 = 1,
        }
        impl From<PTCPE0_A> for bool {
            #[inline(always)]
            fn from(variant: PTCPE0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTCPE0`"]
        pub type PTCPE0_R = crate::R<bool, PTCPE0_A>;
        impl PTCPE0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTCPE0_A {
                match self.bits {
                    false => PTCPE0_A::_0,
                    true => PTCPE0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTCPE0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTCPE0_A::_1
            }
        }
        #[doc = "Write proxy for field `PTCPE0`"]
        pub struct PTCPE0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCPE0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCPE0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port C bit 0."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCPE0_A::_0)
            }
            #[doc = "Pullup is enabled for port C bit 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCPE0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Pull Enable for Port C Bit 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCPE1_A {
            #[doc = "0: Pullup is disabled for port C bit 1."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port C bit 1."]
            _1 = 1,
        }
        impl From<PTCPE1_A> for bool {
            #[inline(always)]
            fn from(variant: PTCPE1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTCPE1`"]
        pub type PTCPE1_R = crate::R<bool, PTCPE1_A>;
        impl PTCPE1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTCPE1_A {
                match self.bits {
                    false => PTCPE1_A::_0,
                    true => PTCPE1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTCPE1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTCPE1_A::_1
            }
        }
        #[doc = "Write proxy for field `PTCPE1`"]
        pub struct PTCPE1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCPE1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCPE1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port C bit 1."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCPE1_A::_0)
            }
            #[doc = "Pullup is enabled for port C bit 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCPE1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Pull Enable for Port C Bit 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCPE2_A {
            #[doc = "0: Pullup is disabled for port C bit 2."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port C bit 2."]
            _1 = 1,
        }
        impl From<PTCPE2_A> for bool {
            #[inline(always)]
            fn from(variant: PTCPE2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTCPE2`"]
        pub type PTCPE2_R = crate::R<bool, PTCPE2_A>;
        impl PTCPE2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTCPE2_A {
                match self.bits {
                    false => PTCPE2_A::_0,
                    true => PTCPE2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTCPE2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTCPE2_A::_1
            }
        }
        #[doc = "Write proxy for field `PTCPE2`"]
        pub struct PTCPE2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCPE2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCPE2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port C bit 2."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCPE2_A::_0)
            }
            #[doc = "Pullup is enabled for port C bit 2."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCPE2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Pull Enable for Port C Bit 3\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCPE3_A {
            #[doc = "0: Pullup is disabled for port C bit 3."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port C bit 3."]
            _1 = 1,
        }
        impl From<PTCPE3_A> for bool {
            #[inline(always)]
            fn from(variant: PTCPE3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTCPE3`"]
        pub type PTCPE3_R = crate::R<bool, PTCPE3_A>;
        impl PTCPE3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTCPE3_A {
                match self.bits {
                    false => PTCPE3_A::_0,
                    true => PTCPE3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTCPE3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTCPE3_A::_1
            }
        }
        #[doc = "Write proxy for field `PTCPE3`"]
        pub struct PTCPE3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCPE3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCPE3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port C bit 3."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCPE3_A::_0)
            }
            #[doc = "Pullup is enabled for port C bit 3."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCPE3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Pull Enable for Port C Bit 4\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCPE4_A {
            #[doc = "0: Pullup is disabled for port C bit 4."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port C bit 4."]
            _1 = 1,
        }
        impl From<PTCPE4_A> for bool {
            #[inline(always)]
            fn from(variant: PTCPE4_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTCPE4`"]
        pub type PTCPE4_R = crate::R<bool, PTCPE4_A>;
        impl PTCPE4_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTCPE4_A {
                match self.bits {
                    false => PTCPE4_A::_0,
                    true => PTCPE4_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTCPE4_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTCPE4_A::_1
            }
        }
        #[doc = "Write proxy for field `PTCPE4`"]
        pub struct PTCPE4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCPE4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCPE4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port C bit 4."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCPE4_A::_0)
            }
            #[doc = "Pullup is enabled for port C bit 4."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCPE4_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Pull Enable for Port C Bit 5\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCPE5_A {
            #[doc = "0: Pullup is disabled for port C bit 5."]
            _0 = 0,
            #[doc = "1: Pullup is enabled for port C bit 5."]
            _1 = 1,
        }
        impl From<PTCPE5_A> for bool {
            #[inline(always)]
            fn from(variant: PTCPE5_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTCPE5`"]
        pub type PTCPE5_R = crate::R<bool, PTCPE5_A>;
        impl PTCPE5_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTCPE5_A {
                match self.bits {
                    false => PTCPE5_A::_0,
                    true => PTCPE5_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTCPE5_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTCPE5_A::_1
            }
        }
        #[doc = "Write proxy for field `PTCPE5`"]
        pub struct PTCPE5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCPE5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCPE5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pullup is disabled for port C bit 5."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCPE5_A::_0)
            }
            #[doc = "Pullup is enabled for port C bit 5."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCPE5_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Pull Enable for Port A Bit 0"]
            #[inline(always)]
            pub fn ptape0(&self) -> PTAPE0_R {
                PTAPE0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Pull Enable for Port A Bit 1"]
            #[inline(always)]
            pub fn ptape1(&self) -> PTAPE1_R {
                PTAPE1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Pull Enable for Port A Bit 2"]
            #[inline(always)]
            pub fn ptape2(&self) -> PTAPE2_R {
                PTAPE2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Pull Enable for Port A Bit 3"]
            #[inline(always)]
            pub fn ptape3(&self) -> PTAPE3_R {
                PTAPE3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Pull Enable for Port A Bit 4"]
            #[inline(always)]
            pub fn ptape4(&self) -> PTAPE4_R {
                PTAPE4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Pull Enable for Port A Bit 5"]
            #[inline(always)]
            pub fn ptape5(&self) -> PTAPE5_R {
                PTAPE5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Pull Enable for Port A Bit 6"]
            #[inline(always)]
            pub fn ptape6(&self) -> PTAPE6_R {
                PTAPE6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Pull Enable for Port A Bit 7"]
            #[inline(always)]
            pub fn ptape7(&self) -> PTAPE7_R {
                PTAPE7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Pull Enable for Port B Bit 0"]
            #[inline(always)]
            pub fn ptbpe0(&self) -> PTBPE0_R {
                PTBPE0_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Pull Enable for Port B Bit 1"]
            #[inline(always)]
            pub fn ptbpe1(&self) -> PTBPE1_R {
                PTBPE1_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Pull Enable for Port B Bit 2"]
            #[inline(always)]
            pub fn ptbpe2(&self) -> PTBPE2_R {
                PTBPE2_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Pull Enable for Port B Bit 3"]
            #[inline(always)]
            pub fn ptbpe3(&self) -> PTBPE3_R {
                PTBPE3_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Pull Enable for Port B Bit 4"]
            #[inline(always)]
            pub fn ptbpe4(&self) -> PTBPE4_R {
                PTBPE4_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Pull Enable for Port B Bit 5"]
            #[inline(always)]
            pub fn ptbpe5(&self) -> PTBPE5_R {
                PTBPE5_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Pull Enable for Port B Bit 6"]
            #[inline(always)]
            pub fn ptbpe6(&self) -> PTBPE6_R {
                PTBPE6_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Pull Enable for Port B Bit 7"]
            #[inline(always)]
            pub fn ptbpe7(&self) -> PTBPE7_R {
                PTBPE7_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Pull Enable for Port C Bit 0"]
            #[inline(always)]
            pub fn ptcpe0(&self) -> PTCPE0_R {
                PTCPE0_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Pull Enable for Port C Bit 1"]
            #[inline(always)]
            pub fn ptcpe1(&self) -> PTCPE1_R {
                PTCPE1_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Pull Enable for Port C Bit 2"]
            #[inline(always)]
            pub fn ptcpe2(&self) -> PTCPE2_R {
                PTCPE2_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Pull Enable for Port C Bit 3"]
            #[inline(always)]
            pub fn ptcpe3(&self) -> PTCPE3_R {
                PTCPE3_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Pull Enable for Port C Bit 4"]
            #[inline(always)]
            pub fn ptcpe4(&self) -> PTCPE4_R {
                PTCPE4_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Pull Enable for Port C Bit 5"]
            #[inline(always)]
            pub fn ptcpe5(&self) -> PTCPE5_R {
                PTCPE5_R::new(((self.bits >> 21) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Pull Enable for Port A Bit 0"]
            #[inline(always)]
            pub fn ptape0(&mut self) -> PTAPE0_W {
                PTAPE0_W { w: self }
            }
            #[doc = "Bit 1 - Pull Enable for Port A Bit 1"]
            #[inline(always)]
            pub fn ptape1(&mut self) -> PTAPE1_W {
                PTAPE1_W { w: self }
            }
            #[doc = "Bit 2 - Pull Enable for Port A Bit 2"]
            #[inline(always)]
            pub fn ptape2(&mut self) -> PTAPE2_W {
                PTAPE2_W { w: self }
            }
            #[doc = "Bit 3 - Pull Enable for Port A Bit 3"]
            #[inline(always)]
            pub fn ptape3(&mut self) -> PTAPE3_W {
                PTAPE3_W { w: self }
            }
            #[doc = "Bit 4 - Pull Enable for Port A Bit 4"]
            #[inline(always)]
            pub fn ptape4(&mut self) -> PTAPE4_W {
                PTAPE4_W { w: self }
            }
            #[doc = "Bit 5 - Pull Enable for Port A Bit 5"]
            #[inline(always)]
            pub fn ptape5(&mut self) -> PTAPE5_W {
                PTAPE5_W { w: self }
            }
            #[doc = "Bit 6 - Pull Enable for Port A Bit 6"]
            #[inline(always)]
            pub fn ptape6(&mut self) -> PTAPE6_W {
                PTAPE6_W { w: self }
            }
            #[doc = "Bit 7 - Pull Enable for Port A Bit 7"]
            #[inline(always)]
            pub fn ptape7(&mut self) -> PTAPE7_W {
                PTAPE7_W { w: self }
            }
            #[doc = "Bit 8 - Pull Enable for Port B Bit 0"]
            #[inline(always)]
            pub fn ptbpe0(&mut self) -> PTBPE0_W {
                PTBPE0_W { w: self }
            }
            #[doc = "Bit 9 - Pull Enable for Port B Bit 1"]
            #[inline(always)]
            pub fn ptbpe1(&mut self) -> PTBPE1_W {
                PTBPE1_W { w: self }
            }
            #[doc = "Bit 10 - Pull Enable for Port B Bit 2"]
            #[inline(always)]
            pub fn ptbpe2(&mut self) -> PTBPE2_W {
                PTBPE2_W { w: self }
            }
            #[doc = "Bit 11 - Pull Enable for Port B Bit 3"]
            #[inline(always)]
            pub fn ptbpe3(&mut self) -> PTBPE3_W {
                PTBPE3_W { w: self }
            }
            #[doc = "Bit 12 - Pull Enable for Port B Bit 4"]
            #[inline(always)]
            pub fn ptbpe4(&mut self) -> PTBPE4_W {
                PTBPE4_W { w: self }
            }
            #[doc = "Bit 13 - Pull Enable for Port B Bit 5"]
            #[inline(always)]
            pub fn ptbpe5(&mut self) -> PTBPE5_W {
                PTBPE5_W { w: self }
            }
            #[doc = "Bit 14 - Pull Enable for Port B Bit 6"]
            #[inline(always)]
            pub fn ptbpe6(&mut self) -> PTBPE6_W {
                PTBPE6_W { w: self }
            }
            #[doc = "Bit 15 - Pull Enable for Port B Bit 7"]
            #[inline(always)]
            pub fn ptbpe7(&mut self) -> PTBPE7_W {
                PTBPE7_W { w: self }
            }
            #[doc = "Bit 16 - Pull Enable for Port C Bit 0"]
            #[inline(always)]
            pub fn ptcpe0(&mut self) -> PTCPE0_W {
                PTCPE0_W { w: self }
            }
            #[doc = "Bit 17 - Pull Enable for Port C Bit 1"]
            #[inline(always)]
            pub fn ptcpe1(&mut self) -> PTCPE1_W {
                PTCPE1_W { w: self }
            }
            #[doc = "Bit 18 - Pull Enable for Port C Bit 2"]
            #[inline(always)]
            pub fn ptcpe2(&mut self) -> PTCPE2_W {
                PTCPE2_W { w: self }
            }
            #[doc = "Bit 19 - Pull Enable for Port C Bit 3"]
            #[inline(always)]
            pub fn ptcpe3(&mut self) -> PTCPE3_W {
                PTCPE3_W { w: self }
            }
            #[doc = "Bit 20 - Pull Enable for Port C Bit 4"]
            #[inline(always)]
            pub fn ptcpe4(&mut self) -> PTCPE4_W {
                PTCPE4_W { w: self }
            }
            #[doc = "Bit 21 - Pull Enable for Port C Bit 5"]
            #[inline(always)]
            pub fn ptcpe5(&mut self) -> PTCPE5_W {
                PTCPE5_W { w: self }
            }
        }
    }
    #[doc = "Port High Drive Enable Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hdrve](hdrve) module"]
    pub type HDRVE = crate::Reg<u32, _HDRVE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _HDRVE;
    #[doc = "`read()` method returns [hdrve::R](hdrve::R) reader structure"]
    impl crate::Readable for HDRVE {}
    #[doc = "`write(|w| ..)` method takes [hdrve::W](hdrve::W) writer structure"]
    impl crate::Writable for HDRVE {}
    #[doc = "Port High Drive Enable Register"]
    pub mod hdrve {
        #[doc = "Reader of register HDRVE"]
        pub type R = crate::R<u32, super::HDRVE>;
        #[doc = "Writer for register HDRVE"]
        pub type W = crate::W<u32, super::HDRVE>;
        #[doc = "Register HDRVE `reset()`'s with value 0"]
        impl crate::ResetValue for super::HDRVE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "High Current Drive Capability of PTB5\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTB5_A {
            #[doc = "0: PTB5 is disabled to offer high current drive capability."]
            _0 = 0,
            #[doc = "1: PTB5 is enabled to offer high current drive capability."]
            _1 = 1,
        }
        impl From<PTB5_A> for bool {
            #[inline(always)]
            fn from(variant: PTB5_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTB5`"]
        pub type PTB5_R = crate::R<bool, PTB5_A>;
        impl PTB5_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTB5_A {
                match self.bits {
                    false => PTB5_A::_0,
                    true => PTB5_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTB5_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTB5_A::_1
            }
        }
        #[doc = "Write proxy for field `PTB5`"]
        pub struct PTB5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTB5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTB5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PTB5 is disabled to offer high current drive capability."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTB5_A::_0)
            }
            #[doc = "PTB5 is enabled to offer high current drive capability."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTB5_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "High Current Drive Capability of PTC1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTC1_A {
            #[doc = "0: PTC1 is disabled to offer high current drive capability."]
            _0 = 0,
            #[doc = "1: PTC1 is enabled to offer high current drive capability."]
            _1 = 1,
        }
        impl From<PTC1_A> for bool {
            #[inline(always)]
            fn from(variant: PTC1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTC1`"]
        pub type PTC1_R = crate::R<bool, PTC1_A>;
        impl PTC1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTC1_A {
                match self.bits {
                    false => PTC1_A::_0,
                    true => PTC1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTC1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTC1_A::_1
            }
        }
        #[doc = "Write proxy for field `PTC1`"]
        pub struct PTC1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTC1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTC1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PTC1 is disabled to offer high current drive capability."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTC1_A::_0)
            }
            #[doc = "PTC1 is enabled to offer high current drive capability."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTC1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "High Current Drive Capability of PTC5\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTC5_A {
            #[doc = "0: PTC5 is disabled to offer high current drive capability."]
            _0 = 0,
            #[doc = "1: PTC5 is enabled to offer high current drive capability."]
            _1 = 1,
        }
        impl From<PTC5_A> for bool {
            #[inline(always)]
            fn from(variant: PTC5_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PTC5`"]
        pub type PTC5_R = crate::R<bool, PTC5_A>;
        impl PTC5_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PTC5_A {
                match self.bits {
                    false => PTC5_A::_0,
                    true => PTC5_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PTC5_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PTC5_A::_1
            }
        }
        #[doc = "Write proxy for field `PTC5`"]
        pub struct PTC5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTC5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTC5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PTC5 is disabled to offer high current drive capability."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTC5_A::_0)
            }
            #[doc = "PTC5 is enabled to offer high current drive capability."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTC5_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - High Current Drive Capability of PTB5"]
            #[inline(always)]
            pub fn ptb5(&self) -> PTB5_R {
                PTB5_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - High Current Drive Capability of PTC1"]
            #[inline(always)]
            pub fn ptc1(&self) -> PTC1_R {
                PTC1_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - High Current Drive Capability of PTC5"]
            #[inline(always)]
            pub fn ptc5(&self) -> PTC5_R {
                PTC5_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - High Current Drive Capability of PTB5"]
            #[inline(always)]
            pub fn ptb5(&mut self) -> PTB5_W {
                PTB5_W { w: self }
            }
            #[doc = "Bit 2 - High Current Drive Capability of PTC1"]
            #[inline(always)]
            pub fn ptc1(&mut self) -> PTC1_W {
                PTC1_W { w: self }
            }
            #[doc = "Bit 3 - High Current Drive Capability of PTC5"]
            #[inline(always)]
            pub fn ptc5(&mut self) -> PTC5_W {
                PTC5_W { w: self }
            }
        }
    }
}
#[doc = "Watchdog timer"]
pub struct WDOG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WDOG {}
impl WDOG {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wdog::RegisterBlock {
        0x4005_2000 as *const _
    }
}
impl Deref for WDOG {
    type Target = wdog::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*WDOG::ptr() }
    }
}
#[doc = "Watchdog timer"]
pub mod wdog {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Watchdog Control and Status Register 1"]
        pub cs1: CS1,
        #[doc = "0x01 - Watchdog Control and Status Register 2"]
        pub cs2: CS2,
        #[doc = "0x02 - Watchdog Counter Register: High"]
        pub cnth: CNTH,
        #[doc = "0x03 - Watchdog Counter Register: Low"]
        pub cntl: CNTL,
        #[doc = "0x04 - Watchdog Timeout Value Register: High"]
        pub tovalh: TOVALH,
        #[doc = "0x05 - Watchdog Timeout Value Register: Low"]
        pub tovall: TOVALL,
        #[doc = "0x06 - Watchdog Window Register: High"]
        pub winh: WINH,
        #[doc = "0x07 - Watchdog Window Register: Low"]
        pub winl: WINL,
    }
    #[doc = "Watchdog Control and Status Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cs1](cs1) module"]
    pub type CS1 = crate::Reg<u8, _CS1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CS1;
    #[doc = "`read()` method returns [cs1::R](cs1::R) reader structure"]
    impl crate::Readable for CS1 {}
    #[doc = "`write(|w| ..)` method takes [cs1::W](cs1::W) writer structure"]
    impl crate::Writable for CS1 {}
    #[doc = "Watchdog Control and Status Register 1"]
    pub mod cs1 {
        #[doc = "Reader of register CS1"]
        pub type R = crate::R<u8, super::CS1>;
        #[doc = "Writer for register CS1"]
        pub type W = crate::W<u8, super::CS1>;
        #[doc = "Register CS1 `reset()`'s with value 0x80"]
        impl crate::ResetValue for super::CS1 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x80
            }
        }
        #[doc = "Stop Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum STOP_A {
            #[doc = "0: Watchdog disabled in chip stop mode."]
            _0 = 0,
            #[doc = "1: Watchdog enabled in chip stop mode."]
            _1 = 1,
        }
        impl From<STOP_A> for bool {
            #[inline(always)]
            fn from(variant: STOP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `STOP`"]
        pub type STOP_R = crate::R<bool, STOP_A>;
        impl STOP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STOP_A {
                match self.bits {
                    false => STOP_A::_0,
                    true => STOP_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == STOP_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == STOP_A::_1
            }
        }
        #[doc = "Write proxy for field `STOP`"]
        pub struct STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STOP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Watchdog disabled in chip stop mode."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(STOP_A::_0)
            }
            #[doc = "Watchdog enabled in chip stop mode."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(STOP_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        #[doc = "Wait Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WAIT_A {
            #[doc = "0: Watchdog disabled in chip wait mode."]
            _0 = 0,
            #[doc = "1: Watchdog enabled in chip wait mode."]
            _1 = 1,
        }
        impl From<WAIT_A> for bool {
            #[inline(always)]
            fn from(variant: WAIT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WAIT`"]
        pub type WAIT_R = crate::R<bool, WAIT_A>;
        impl WAIT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WAIT_A {
                match self.bits {
                    false => WAIT_A::_0,
                    true => WAIT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == WAIT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == WAIT_A::_1
            }
        }
        #[doc = "Write proxy for field `WAIT`"]
        pub struct WAIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAIT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WAIT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Watchdog disabled in chip wait mode."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(WAIT_A::_0)
            }
            #[doc = "Watchdog enabled in chip wait mode."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(WAIT_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Debug Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DBG_A {
            #[doc = "0: Watchdog disabled in chip debug mode."]
            _0 = 0,
            #[doc = "1: Watchdog enabled in chip debug mode."]
            _1 = 1,
        }
        impl From<DBG_A> for bool {
            #[inline(always)]
            fn from(variant: DBG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DBG`"]
        pub type DBG_R = crate::R<bool, DBG_A>;
        impl DBG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DBG_A {
                match self.bits {
                    false => DBG_A::_0,
                    true => DBG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DBG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DBG_A::_1
            }
        }
        #[doc = "Write proxy for field `DBG`"]
        pub struct DBG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DBG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Watchdog disabled in chip debug mode."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DBG_A::_0)
            }
            #[doc = "Watchdog enabled in chip debug mode."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DBG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Watchdog Test\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum TST_A {
            #[doc = "0: Watchdog test mode disabled."]
            _00 = 0,
            #[doc = "1: Watchdog user mode enabled. (Watchdog test mode disabled.) After testing the watchdog, software should use this setting to indicate that the watchdog is functioning normally in user mode."]
            _01 = 1,
            #[doc = "2: Watchdog test mode enabled, only the low byte is used. WDOG_CNTL is compared with WDOG_TOVALL."]
            _10 = 2,
            #[doc = "3: Watchdog test mode enabled, only the high byte is used. WDOG_CNTH is compared with WDOG_TOVALH."]
            _11 = 3,
        }
        impl From<TST_A> for u8 {
            #[inline(always)]
            fn from(variant: TST_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `TST`"]
        pub type TST_R = crate::R<u8, TST_A>;
        impl TST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TST_A {
                match self.bits {
                    0 => TST_A::_00,
                    1 => TST_A::_01,
                    2 => TST_A::_10,
                    3 => TST_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == TST_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == TST_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == TST_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == TST_A::_11
            }
        }
        #[doc = "Write proxy for field `TST`"]
        pub struct TST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TST_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Watchdog test mode disabled."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(TST_A::_00)
            }
            #[doc = "Watchdog user mode enabled. (Watchdog test mode disabled.) After testing the watchdog, software should use this setting to indicate that the watchdog is functioning normally in user mode."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(TST_A::_01)
            }
            #[doc = "Watchdog test mode enabled, only the low byte is used. WDOG_CNTL is compared with WDOG_TOVALL."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(TST_A::_10)
            }
            #[doc = "Watchdog test mode enabled, only the high byte is used. WDOG_CNTH is compared with WDOG_TOVALH."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(TST_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 3)) | (((value as u8) & 0x03) << 3);
                self.w
            }
        }
        #[doc = "Allow updates\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UPDATE_A {
            #[doc = "0: Updates not allowed. After the initial configuration, the watchdog cannot be later modified without forcing a reset."]
            _0 = 0,
            #[doc = "1: Updates allowed. Software can modify the watchdog configuration registers within 128 bus clocks after performing the unlock write sequence."]
            _1 = 1,
        }
        impl From<UPDATE_A> for bool {
            #[inline(always)]
            fn from(variant: UPDATE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UPDATE`"]
        pub type UPDATE_R = crate::R<bool, UPDATE_A>;
        impl UPDATE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UPDATE_A {
                match self.bits {
                    false => UPDATE_A::_0,
                    true => UPDATE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == UPDATE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == UPDATE_A::_1
            }
        }
        #[doc = "Write proxy for field `UPDATE`"]
        pub struct UPDATE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UPDATE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UPDATE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Updates not allowed. After the initial configuration, the watchdog cannot be later modified without forcing a reset."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(UPDATE_A::_0)
            }
            #[doc = "Updates allowed. Software can modify the watchdog configuration registers within 128 bus clocks after performing the unlock write sequence."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(UPDATE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Watchdog Interrupt\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum INT_A {
            #[doc = "0: Watchdog interrupts are disabled. Watchdog resets are not delayed."]
            _0 = 0,
            #[doc = "1: Watchdog interrupts are enabled. Watchdog resets are delayed by 128 bus clocks."]
            _1 = 1,
        }
        impl From<INT_A> for bool {
            #[inline(always)]
            fn from(variant: INT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `INT`"]
        pub type INT_R = crate::R<bool, INT_A>;
        impl INT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> INT_A {
                match self.bits {
                    false => INT_A::_0,
                    true => INT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == INT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == INT_A::_1
            }
        }
        #[doc = "Write proxy for field `INT`"]
        pub struct INT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: INT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Watchdog interrupts are disabled. Watchdog resets are not delayed."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(INT_A::_0)
            }
            #[doc = "Watchdog interrupts are enabled. Watchdog resets are delayed by 128 bus clocks."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(INT_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Watchdog Enable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EN_A {
            #[doc = "0: Watchdog disabled."]
            _0 = 0,
            #[doc = "1: Watchdog enabled."]
            _1 = 1,
        }
        impl From<EN_A> for bool {
            #[inline(always)]
            fn from(variant: EN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, EN_A>;
        impl EN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EN_A {
                match self.bits {
                    false => EN_A::_0,
                    true => EN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == EN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == EN_A::_1
            }
        }
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Watchdog disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(EN_A::_0)
            }
            #[doc = "Watchdog enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(EN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Stop Enable"]
            #[inline(always)]
            pub fn stop(&self) -> STOP_R {
                STOP_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Wait Enable"]
            #[inline(always)]
            pub fn wait(&self) -> WAIT_R {
                WAIT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Debug Enable"]
            #[inline(always)]
            pub fn dbg(&self) -> DBG_R {
                DBG_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 3:4 - Watchdog Test"]
            #[inline(always)]
            pub fn tst(&self) -> TST_R {
                TST_R::new(((self.bits >> 3) & 0x03) as u8)
            }
            #[doc = "Bit 5 - Allow updates"]
            #[inline(always)]
            pub fn update(&self) -> UPDATE_R {
                UPDATE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Watchdog Interrupt"]
            #[inline(always)]
            pub fn int(&self) -> INT_R {
                INT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Watchdog Enable"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Stop Enable"]
            #[inline(always)]
            pub fn stop(&mut self) -> STOP_W {
                STOP_W { w: self }
            }
            #[doc = "Bit 1 - Wait Enable"]
            #[inline(always)]
            pub fn wait(&mut self) -> WAIT_W {
                WAIT_W { w: self }
            }
            #[doc = "Bit 2 - Debug Enable"]
            #[inline(always)]
            pub fn dbg(&mut self) -> DBG_W {
                DBG_W { w: self }
            }
            #[doc = "Bits 3:4 - Watchdog Test"]
            #[inline(always)]
            pub fn tst(&mut self) -> TST_W {
                TST_W { w: self }
            }
            #[doc = "Bit 5 - Allow updates"]
            #[inline(always)]
            pub fn update(&mut self) -> UPDATE_W {
                UPDATE_W { w: self }
            }
            #[doc = "Bit 6 - Watchdog Interrupt"]
            #[inline(always)]
            pub fn int(&mut self) -> INT_W {
                INT_W { w: self }
            }
            #[doc = "Bit 7 - Watchdog Enable"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "Watchdog Control and Status Register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cs2](cs2) module"]
    pub type CS2 = crate::Reg<u8, _CS2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CS2;
    #[doc = "`read()` method returns [cs2::R](cs2::R) reader structure"]
    impl crate::Readable for CS2 {}
    #[doc = "`write(|w| ..)` method takes [cs2::W](cs2::W) writer structure"]
    impl crate::Writable for CS2 {}
    #[doc = "Watchdog Control and Status Register 2"]
    pub mod cs2 {
        #[doc = "Reader of register CS2"]
        pub type R = crate::R<u8, super::CS2>;
        #[doc = "Writer for register CS2"]
        pub type W = crate::W<u8, super::CS2>;
        #[doc = "Register CS2 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::CS2 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Watchdog Clock\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CLK_A {
            #[doc = "0: Bus clock."]
            _00 = 0,
            #[doc = "1: 1 kHz internal low-power oscillator (LPOCLK)."]
            _01 = 1,
            #[doc = "2: 32 kHz internal oscillator (ICSIRCLK)."]
            _10 = 2,
            #[doc = "3: External clock source."]
            _11 = 3,
        }
        impl From<CLK_A> for u8 {
            #[inline(always)]
            fn from(variant: CLK_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CLK`"]
        pub type CLK_R = crate::R<u8, CLK_A>;
        impl CLK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CLK_A {
                match self.bits {
                    0 => CLK_A::_00,
                    1 => CLK_A::_01,
                    2 => CLK_A::_10,
                    3 => CLK_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == CLK_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == CLK_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == CLK_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == CLK_A::_11
            }
        }
        #[doc = "Write proxy for field `CLK`"]
        pub struct CLK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CLK_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Bus clock."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(CLK_A::_00)
            }
            #[doc = "1 kHz internal low-power oscillator (LPOCLK)."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(CLK_A::_01)
            }
            #[doc = "32 kHz internal oscillator (ICSIRCLK)."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(CLK_A::_10)
            }
            #[doc = "External clock source."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(CLK_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u8) & 0x03);
                self.w
            }
        }
        #[doc = "Watchdog Prescalar\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PRES_A {
            #[doc = "0: 256 prescalar disabled."]
            _0 = 0,
            #[doc = "1: 256 prescalar enabled."]
            _1 = 1,
        }
        impl From<PRES_A> for bool {
            #[inline(always)]
            fn from(variant: PRES_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PRES`"]
        pub type PRES_R = crate::R<bool, PRES_A>;
        impl PRES_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PRES_A {
                match self.bits {
                    false => PRES_A::_0,
                    true => PRES_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PRES_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PRES_A::_1
            }
        }
        #[doc = "Write proxy for field `PRES`"]
        pub struct PRES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRES_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PRES_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "256 prescalar disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PRES_A::_0)
            }
            #[doc = "256 prescalar enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PRES_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Watchdog Interrupt Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FLG_A {
            #[doc = "0: No interrupt occurred."]
            _0 = 0,
            #[doc = "1: An interrupt occurred."]
            _1 = 1,
        }
        impl From<FLG_A> for bool {
            #[inline(always)]
            fn from(variant: FLG_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FLG`"]
        pub type FLG_R = crate::R<bool, FLG_A>;
        impl FLG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FLG_A {
                match self.bits {
                    false => FLG_A::_0,
                    true => FLG_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FLG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FLG_A::_1
            }
        }
        #[doc = "Write proxy for field `FLG`"]
        pub struct FLG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLG_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No interrupt occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FLG_A::_0)
            }
            #[doc = "An interrupt occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FLG_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Watchdog Window\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WIN_A {
            #[doc = "0: Window mode disabled."]
            _0 = 0,
            #[doc = "1: Window mode enabled."]
            _1 = 1,
        }
        impl From<WIN_A> for bool {
            #[inline(always)]
            fn from(variant: WIN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WIN`"]
        pub type WIN_R = crate::R<bool, WIN_A>;
        impl WIN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WIN_A {
                match self.bits {
                    false => WIN_A::_0,
                    true => WIN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == WIN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == WIN_A::_1
            }
        }
        #[doc = "Write proxy for field `WIN`"]
        pub struct WIN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WIN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WIN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Window mode disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(WIN_A::_0)
            }
            #[doc = "Window mode enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(WIN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Watchdog Clock"]
            #[inline(always)]
            pub fn clk(&self) -> CLK_R {
                CLK_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 4 - Watchdog Prescalar"]
            #[inline(always)]
            pub fn pres(&self) -> PRES_R {
                PRES_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Watchdog Interrupt Flag"]
            #[inline(always)]
            pub fn flg(&self) -> FLG_R {
                FLG_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Watchdog Window"]
            #[inline(always)]
            pub fn win(&self) -> WIN_R {
                WIN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Watchdog Clock"]
            #[inline(always)]
            pub fn clk(&mut self) -> CLK_W {
                CLK_W { w: self }
            }
            #[doc = "Bit 4 - Watchdog Prescalar"]
            #[inline(always)]
            pub fn pres(&mut self) -> PRES_W {
                PRES_W { w: self }
            }
            #[doc = "Bit 6 - Watchdog Interrupt Flag"]
            #[inline(always)]
            pub fn flg(&mut self) -> FLG_W {
                FLG_W { w: self }
            }
            #[doc = "Bit 7 - Watchdog Window"]
            #[inline(always)]
            pub fn win(&mut self) -> WIN_W {
                WIN_W { w: self }
            }
        }
    }
    #[doc = "Watchdog Counter Register: High\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnth](cnth) module"]
    pub type CNTH = crate::Reg<u8, _CNTH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNTH;
    #[doc = "`read()` method returns [cnth::R](cnth::R) reader structure"]
    impl crate::Readable for CNTH {}
    #[doc = "`write(|w| ..)` method takes [cnth::W](cnth::W) writer structure"]
    impl crate::Writable for CNTH {}
    #[doc = "Watchdog Counter Register: High"]
    pub mod cnth {
        #[doc = "Reader of register CNTH"]
        pub type R = crate::R<u8, super::CNTH>;
        #[doc = "Writer for register CNTH"]
        pub type W = crate::W<u8, super::CNTH>;
        #[doc = "Register CNTH `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNTH {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNTHIGH`"]
        pub type CNTHIGH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CNTHIGH`"]
        pub struct CNTHIGH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNTHIGH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - High byte of the Watchdog Counter"]
            #[inline(always)]
            pub fn cnthigh(&self) -> CNTHIGH_R {
                CNTHIGH_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - High byte of the Watchdog Counter"]
            #[inline(always)]
            pub fn cnthigh(&mut self) -> CNTHIGH_W {
                CNTHIGH_W { w: self }
            }
        }
    }
    #[doc = "Watchdog Counter Register: Low\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cntl](cntl) module"]
    pub type CNTL = crate::Reg<u8, _CNTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNTL;
    #[doc = "`read()` method returns [cntl::R](cntl::R) reader structure"]
    impl crate::Readable for CNTL {}
    #[doc = "`write(|w| ..)` method takes [cntl::W](cntl::W) writer structure"]
    impl crate::Writable for CNTL {}
    #[doc = "Watchdog Counter Register: Low"]
    pub mod cntl {
        #[doc = "Reader of register CNTL"]
        pub type R = crate::R<u8, super::CNTL>;
        #[doc = "Writer for register CNTL"]
        pub type W = crate::W<u8, super::CNTL>;
        #[doc = "Register CNTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNTL {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNTLOW`"]
        pub type CNTLOW_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CNTLOW`"]
        pub struct CNTLOW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNTLOW_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Low byte of the Watchdog Counter"]
            #[inline(always)]
            pub fn cntlow(&self) -> CNTLOW_R {
                CNTLOW_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Low byte of the Watchdog Counter"]
            #[inline(always)]
            pub fn cntlow(&mut self) -> CNTLOW_W {
                CNTLOW_W { w: self }
            }
        }
    }
    #[doc = "Watchdog Timeout Value Register: High\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tovalh](tovalh) module"]
    pub type TOVALH = crate::Reg<u8, _TOVALH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TOVALH;
    #[doc = "`read()` method returns [tovalh::R](tovalh::R) reader structure"]
    impl crate::Readable for TOVALH {}
    #[doc = "`write(|w| ..)` method takes [tovalh::W](tovalh::W) writer structure"]
    impl crate::Writable for TOVALH {}
    #[doc = "Watchdog Timeout Value Register: High"]
    pub mod tovalh {
        #[doc = "Reader of register TOVALH"]
        pub type R = crate::R<u8, super::TOVALH>;
        #[doc = "Writer for register TOVALH"]
        pub type W = crate::W<u8, super::TOVALH>;
        #[doc = "Register TOVALH `reset()`'s with value 0"]
        impl crate::ResetValue for super::TOVALH {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TOVALHIGH`"]
        pub type TOVALHIGH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TOVALHIGH`"]
        pub struct TOVALHIGH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOVALHIGH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - High byte of the timeout value"]
            #[inline(always)]
            pub fn tovalhigh(&self) -> TOVALHIGH_R {
                TOVALHIGH_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - High byte of the timeout value"]
            #[inline(always)]
            pub fn tovalhigh(&mut self) -> TOVALHIGH_W {
                TOVALHIGH_W { w: self }
            }
        }
    }
    #[doc = "Watchdog Timeout Value Register: Low\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tovall](tovall) module"]
    pub type TOVALL = crate::Reg<u8, _TOVALL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TOVALL;
    #[doc = "`read()` method returns [tovall::R](tovall::R) reader structure"]
    impl crate::Readable for TOVALL {}
    #[doc = "`write(|w| ..)` method takes [tovall::W](tovall::W) writer structure"]
    impl crate::Writable for TOVALL {}
    #[doc = "Watchdog Timeout Value Register: Low"]
    pub mod tovall {
        #[doc = "Reader of register TOVALL"]
        pub type R = crate::R<u8, super::TOVALL>;
        #[doc = "Writer for register TOVALL"]
        pub type W = crate::W<u8, super::TOVALL>;
        #[doc = "Register TOVALL `reset()`'s with value 0x04"]
        impl crate::ResetValue for super::TOVALL {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x04
            }
        }
        #[doc = "Reader of field `TOVALLOW`"]
        pub type TOVALLOW_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TOVALLOW`"]
        pub struct TOVALLOW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOVALLOW_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Low byte of the timeout value"]
            #[inline(always)]
            pub fn tovallow(&self) -> TOVALLOW_R {
                TOVALLOW_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Low byte of the timeout value"]
            #[inline(always)]
            pub fn tovallow(&mut self) -> TOVALLOW_W {
                TOVALLOW_W { w: self }
            }
        }
    }
    #[doc = "Watchdog Window Register: High\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [winh](winh) module"]
    pub type WINH = crate::Reg<u8, _WINH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WINH;
    #[doc = "`read()` method returns [winh::R](winh::R) reader structure"]
    impl crate::Readable for WINH {}
    #[doc = "`write(|w| ..)` method takes [winh::W](winh::W) writer structure"]
    impl crate::Writable for WINH {}
    #[doc = "Watchdog Window Register: High"]
    pub mod winh {
        #[doc = "Reader of register WINH"]
        pub type R = crate::R<u8, super::WINH>;
        #[doc = "Writer for register WINH"]
        pub type W = crate::W<u8, super::WINH>;
        #[doc = "Register WINH `reset()`'s with value 0"]
        impl crate::ResetValue for super::WINH {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WINHIGH`"]
        pub type WINHIGH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WINHIGH`"]
        pub struct WINHIGH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WINHIGH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - High byte of Watchdog Window"]
            #[inline(always)]
            pub fn winhigh(&self) -> WINHIGH_R {
                WINHIGH_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - High byte of Watchdog Window"]
            #[inline(always)]
            pub fn winhigh(&mut self) -> WINHIGH_W {
                WINHIGH_W { w: self }
            }
        }
    }
    #[doc = "Watchdog Window Register: Low\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [winl](winl) module"]
    pub type WINL = crate::Reg<u8, _WINL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WINL;
    #[doc = "`read()` method returns [winl::R](winl::R) reader structure"]
    impl crate::Readable for WINL {}
    #[doc = "`write(|w| ..)` method takes [winl::W](winl::W) writer structure"]
    impl crate::Writable for WINL {}
    #[doc = "Watchdog Window Register: Low"]
    pub mod winl {
        #[doc = "Reader of register WINL"]
        pub type R = crate::R<u8, super::WINL>;
        #[doc = "Writer for register WINL"]
        pub type W = crate::W<u8, super::WINL>;
        #[doc = "Register WINL `reset()`'s with value 0"]
        impl crate::ResetValue for super::WINL {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WINLOW`"]
        pub type WINLOW_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WINLOW`"]
        pub struct WINLOW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WINLOW_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Low byte of Watchdog Window"]
            #[inline(always)]
            pub fn winlow(&self) -> WINLOW_R {
                WINLOW_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Low byte of Watchdog Window"]
            #[inline(always)]
            pub fn winlow(&mut self) -> WINLOW_W {
                WINLOW_W { w: self }
            }
        }
    }
}
#[doc = "Clock management"]
pub struct ICS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ICS {}
impl ICS {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ics::RegisterBlock {
        0x4006_4000 as *const _
    }
}
impl Deref for ICS {
    type Target = ics::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*ICS::ptr() }
    }
}
#[doc = "Clock management"]
pub mod ics {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - ICS Control Register 1"]
        pub c1: C1,
        #[doc = "0x01 - ICS Control Register 2"]
        pub c2: C2,
        #[doc = "0x02 - ICS Control Register 3"]
        pub c3: C3,
        #[doc = "0x03 - ICS Control Register 4"]
        pub c4: C4,
        #[doc = "0x04 - ICS Status Register"]
        pub s: S,
    }
    #[doc = "ICS Control Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c1](c1) module"]
    pub type C1 = crate::Reg<u8, _C1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C1;
    #[doc = "`read()` method returns [c1::R](c1::R) reader structure"]
    impl crate::Readable for C1 {}
    #[doc = "`write(|w| ..)` method takes [c1::W](c1::W) writer structure"]
    impl crate::Writable for C1 {}
    #[doc = "ICS Control Register 1"]
    pub mod c1 {
        #[doc = "Reader of register C1"]
        pub type R = crate::R<u8, super::C1>;
        #[doc = "Writer for register C1"]
        pub type W = crate::W<u8, super::C1>;
        #[doc = "Register C1 `reset()`'s with value 0x04"]
        impl crate::ResetValue for super::C1 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x04
            }
        }
        #[doc = "Internal Reference Stop Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IREFSTEN_A {
            #[doc = "0: Internal reference clock is disabled in Stop mode."]
            _0 = 0,
            #[doc = "1: Internal reference clock stays enabled in Stop mode if IRCLKEN is set, or if ICS is in FEI, FBI, or FBILP mode before entering Stop."]
            _1 = 1,
        }
        impl From<IREFSTEN_A> for bool {
            #[inline(always)]
            fn from(variant: IREFSTEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IREFSTEN`"]
        pub type IREFSTEN_R = crate::R<bool, IREFSTEN_A>;
        impl IREFSTEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IREFSTEN_A {
                match self.bits {
                    false => IREFSTEN_A::_0,
                    true => IREFSTEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == IREFSTEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == IREFSTEN_A::_1
            }
        }
        #[doc = "Write proxy for field `IREFSTEN`"]
        pub struct IREFSTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IREFSTEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IREFSTEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Internal reference clock is disabled in Stop mode."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(IREFSTEN_A::_0)
            }
            #[doc = "Internal reference clock stays enabled in Stop mode if IRCLKEN is set, or if ICS is in FEI, FBI, or FBILP mode before entering Stop."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(IREFSTEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        #[doc = "Internal Reference Clock Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IRCLKEN_A {
            #[doc = "0: ICSIRCLK is inactive."]
            _0 = 0,
            #[doc = "1: ICSIRCLK is active."]
            _1 = 1,
        }
        impl From<IRCLKEN_A> for bool {
            #[inline(always)]
            fn from(variant: IRCLKEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IRCLKEN`"]
        pub type IRCLKEN_R = crate::R<bool, IRCLKEN_A>;
        impl IRCLKEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IRCLKEN_A {
                match self.bits {
                    false => IRCLKEN_A::_0,
                    true => IRCLKEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == IRCLKEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == IRCLKEN_A::_1
            }
        }
        #[doc = "Write proxy for field `IRCLKEN`"]
        pub struct IRCLKEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRCLKEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IRCLKEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ICSIRCLK is inactive."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(IRCLKEN_A::_0)
            }
            #[doc = "ICSIRCLK is active."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(IRCLKEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Internal Reference Select\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IREFS_A {
            #[doc = "0: External reference clock is selected."]
            _0 = 0,
            #[doc = "1: Internal reference clock is selected."]
            _1 = 1,
        }
        impl From<IREFS_A> for bool {
            #[inline(always)]
            fn from(variant: IREFS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IREFS`"]
        pub type IREFS_R = crate::R<bool, IREFS_A>;
        impl IREFS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IREFS_A {
                match self.bits {
                    false => IREFS_A::_0,
                    true => IREFS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == IREFS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == IREFS_A::_1
            }
        }
        #[doc = "Write proxy for field `IREFS`"]
        pub struct IREFS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IREFS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IREFS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "External reference clock is selected."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(IREFS_A::_0)
            }
            #[doc = "Internal reference clock is selected."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(IREFS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `RDIV`"]
        pub type RDIV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RDIV`"]
        pub struct RDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RDIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 3)) | (((value as u8) & 0x07) << 3);
                self.w
            }
        }
        #[doc = "Clock Source Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CLKS_A {
            #[doc = "0: Output of FLL is selected."]
            _00 = 0,
            #[doc = "1: Internal reference clock is selected."]
            _01 = 1,
            #[doc = "2: External reference clock is selected."]
            _10 = 2,
            #[doc = "3: Reserved, defaults to 00."]
            _11 = 3,
        }
        impl From<CLKS_A> for u8 {
            #[inline(always)]
            fn from(variant: CLKS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CLKS`"]
        pub type CLKS_R = crate::R<u8, CLKS_A>;
        impl CLKS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CLKS_A {
                match self.bits {
                    0 => CLKS_A::_00,
                    1 => CLKS_A::_01,
                    2 => CLKS_A::_10,
                    3 => CLKS_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == CLKS_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == CLKS_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == CLKS_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == CLKS_A::_11
            }
        }
        #[doc = "Write proxy for field `CLKS`"]
        pub struct CLKS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLKS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CLKS_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Output of FLL is selected."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(CLKS_A::_00)
            }
            #[doc = "Internal reference clock is selected."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(CLKS_A::_01)
            }
            #[doc = "External reference clock is selected."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(CLKS_A::_10)
            }
            #[doc = "Reserved, defaults to 00."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(CLKS_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u8) & 0x03) << 6);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Internal Reference Stop Enable"]
            #[inline(always)]
            pub fn irefsten(&self) -> IREFSTEN_R {
                IREFSTEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Internal Reference Clock Enable"]
            #[inline(always)]
            pub fn irclken(&self) -> IRCLKEN_R {
                IRCLKEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Internal Reference Select"]
            #[inline(always)]
            pub fn irefs(&self) -> IREFS_R {
                IREFS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 3:5 - Reference Divider"]
            #[inline(always)]
            pub fn rdiv(&self) -> RDIV_R {
                RDIV_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bits 6:7 - Clock Source Select"]
            #[inline(always)]
            pub fn clks(&self) -> CLKS_R {
                CLKS_R::new(((self.bits >> 6) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - Internal Reference Stop Enable"]
            #[inline(always)]
            pub fn irefsten(&mut self) -> IREFSTEN_W {
                IREFSTEN_W { w: self }
            }
            #[doc = "Bit 1 - Internal Reference Clock Enable"]
            #[inline(always)]
            pub fn irclken(&mut self) -> IRCLKEN_W {
                IRCLKEN_W { w: self }
            }
            #[doc = "Bit 2 - Internal Reference Select"]
            #[inline(always)]
            pub fn irefs(&mut self) -> IREFS_W {
                IREFS_W { w: self }
            }
            #[doc = "Bits 3:5 - Reference Divider"]
            #[inline(always)]
            pub fn rdiv(&mut self) -> RDIV_W {
                RDIV_W { w: self }
            }
            #[doc = "Bits 6:7 - Clock Source Select"]
            #[inline(always)]
            pub fn clks(&mut self) -> CLKS_W {
                CLKS_W { w: self }
            }
        }
    }
    #[doc = "ICS Control Register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c2](c2) module"]
    pub type C2 = crate::Reg<u8, _C2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C2;
    #[doc = "`read()` method returns [c2::R](c2::R) reader structure"]
    impl crate::Readable for C2 {}
    #[doc = "`write(|w| ..)` method takes [c2::W](c2::W) writer structure"]
    impl crate::Writable for C2 {}
    #[doc = "ICS Control Register 2"]
    pub mod c2 {
        #[doc = "Reader of register C2"]
        pub type R = crate::R<u8, super::C2>;
        #[doc = "Writer for register C2"]
        pub type W = crate::W<u8, super::C2>;
        #[doc = "Register C2 `reset()`'s with value 0x20"]
        impl crate::ResetValue for super::C2 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x20
            }
        }
        #[doc = "Low Power Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LP_A {
            #[doc = "0: FLL is not disabled in bypass mode."]
            _0 = 0,
            #[doc = "1: FLL is disabled in bypass modes unless debug is active."]
            _1 = 1,
        }
        impl From<LP_A> for bool {
            #[inline(always)]
            fn from(variant: LP_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LP`"]
        pub type LP_R = crate::R<bool, LP_A>;
        impl LP_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LP_A {
                match self.bits {
                    false => LP_A::_0,
                    true => LP_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LP_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LP_A::_1
            }
        }
        #[doc = "Write proxy for field `LP`"]
        pub struct LP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LP_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FLL is not disabled in bypass mode."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(LP_A::_0)
            }
            #[doc = "FLL is disabled in bypass modes unless debug is active."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(LP_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Bus Frequency Divider\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum BDIV_A {
            #[doc = "0: Encoding 0-Divides the selected clock by 1."]
            _000 = 0,
            #[doc = "1: Encoding 1-Divides the selected clock by 2 (reset default)."]
            _001 = 1,
            #[doc = "2: Encoding 2-Divides the selected clock by 4."]
            _010 = 2,
            #[doc = "3: Encoding 3-Divides the selected clock by 8."]
            _011 = 3,
            #[doc = "4: Encoding 4-Divides the selected clock by 16."]
            _100 = 4,
            #[doc = "5: Encoding 5-Divides the selected clock by 32."]
            _101 = 5,
            #[doc = "6: Encoding 6-Divides the selected clock by 64."]
            _110 = 6,
            #[doc = "7: Encoding 7-Divides the selected clock by 128."]
            _111 = 7,
        }
        impl From<BDIV_A> for u8 {
            #[inline(always)]
            fn from(variant: BDIV_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `BDIV`"]
        pub type BDIV_R = crate::R<u8, BDIV_A>;
        impl BDIV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BDIV_A {
                match self.bits {
                    0 => BDIV_A::_000,
                    1 => BDIV_A::_001,
                    2 => BDIV_A::_010,
                    3 => BDIV_A::_011,
                    4 => BDIV_A::_100,
                    5 => BDIV_A::_101,
                    6 => BDIV_A::_110,
                    7 => BDIV_A::_111,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_000`"]
            #[inline(always)]
            pub fn is_000(&self) -> bool {
                *self == BDIV_A::_000
            }
            #[doc = "Checks if the value of the field is `_001`"]
            #[inline(always)]
            pub fn is_001(&self) -> bool {
                *self == BDIV_A::_001
            }
            #[doc = "Checks if the value of the field is `_010`"]
            #[inline(always)]
            pub fn is_010(&self) -> bool {
                *self == BDIV_A::_010
            }
            #[doc = "Checks if the value of the field is `_011`"]
            #[inline(always)]
            pub fn is_011(&self) -> bool {
                *self == BDIV_A::_011
            }
            #[doc = "Checks if the value of the field is `_100`"]
            #[inline(always)]
            pub fn is_100(&self) -> bool {
                *self == BDIV_A::_100
            }
            #[doc = "Checks if the value of the field is `_101`"]
            #[inline(always)]
            pub fn is_101(&self) -> bool {
                *self == BDIV_A::_101
            }
            #[doc = "Checks if the value of the field is `_110`"]
            #[inline(always)]
            pub fn is_110(&self) -> bool {
                *self == BDIV_A::_110
            }
            #[doc = "Checks if the value of the field is `_111`"]
            #[inline(always)]
            pub fn is_111(&self) -> bool {
                *self == BDIV_A::_111
            }
        }
        #[doc = "Write proxy for field `BDIV`"]
        pub struct BDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BDIV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BDIV_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Encoding 0-Divides the selected clock by 1."]
            #[inline(always)]
            pub fn _000(self) -> &'a mut W {
                self.variant(BDIV_A::_000)
            }
            #[doc = "Encoding 1-Divides the selected clock by 2 (reset default)."]
            #[inline(always)]
            pub fn _001(self) -> &'a mut W {
                self.variant(BDIV_A::_001)
            }
            #[doc = "Encoding 2-Divides the selected clock by 4."]
            #[inline(always)]
            pub fn _010(self) -> &'a mut W {
                self.variant(BDIV_A::_010)
            }
            #[doc = "Encoding 3-Divides the selected clock by 8."]
            #[inline(always)]
            pub fn _011(self) -> &'a mut W {
                self.variant(BDIV_A::_011)
            }
            #[doc = "Encoding 4-Divides the selected clock by 16."]
            #[inline(always)]
            pub fn _100(self) -> &'a mut W {
                self.variant(BDIV_A::_100)
            }
            #[doc = "Encoding 5-Divides the selected clock by 32."]
            #[inline(always)]
            pub fn _101(self) -> &'a mut W {
                self.variant(BDIV_A::_101)
            }
            #[doc = "Encoding 6-Divides the selected clock by 64."]
            #[inline(always)]
            pub fn _110(self) -> &'a mut W {
                self.variant(BDIV_A::_110)
            }
            #[doc = "Encoding 7-Divides the selected clock by 128."]
            #[inline(always)]
            pub fn _111(self) -> &'a mut W {
                self.variant(BDIV_A::_111)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 5)) | (((value as u8) & 0x07) << 5);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 4 - Low Power Select"]
            #[inline(always)]
            pub fn lp(&self) -> LP_R {
                LP_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 5:7 - Bus Frequency Divider"]
            #[inline(always)]
            pub fn bdiv(&self) -> BDIV_R {
                BDIV_R::new(((self.bits >> 5) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 4 - Low Power Select"]
            #[inline(always)]
            pub fn lp(&mut self) -> LP_W {
                LP_W { w: self }
            }
            #[doc = "Bits 5:7 - Bus Frequency Divider"]
            #[inline(always)]
            pub fn bdiv(&mut self) -> BDIV_W {
                BDIV_W { w: self }
            }
        }
    }
    #[doc = "ICS Control Register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c3](c3) module"]
    pub type C3 = crate::Reg<u8, _C3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C3;
    #[doc = "`read()` method returns [c3::R](c3::R) reader structure"]
    impl crate::Readable for C3 {}
    #[doc = "`write(|w| ..)` method takes [c3::W](c3::W) writer structure"]
    impl crate::Writable for C3 {}
    #[doc = "ICS Control Register 3"]
    pub mod c3 {
        #[doc = "Reader of register C3"]
        pub type R = crate::R<u8, super::C3>;
        #[doc = "Writer for register C3"]
        pub type W = crate::W<u8, super::C3>;
        #[doc = "Register C3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::C3 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SCTRIM`"]
        pub type SCTRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SCTRIM`"]
        pub struct SCTRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCTRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Slow Internal Reference Clock Trim Setting"]
            #[inline(always)]
            pub fn sctrim(&self) -> SCTRIM_R {
                SCTRIM_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Slow Internal Reference Clock Trim Setting"]
            #[inline(always)]
            pub fn sctrim(&mut self) -> SCTRIM_W {
                SCTRIM_W { w: self }
            }
        }
    }
    #[doc = "ICS Control Register 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c4](c4) module"]
    pub type C4 = crate::Reg<u8, _C4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C4;
    #[doc = "`read()` method returns [c4::R](c4::R) reader structure"]
    impl crate::Readable for C4 {}
    #[doc = "`write(|w| ..)` method takes [c4::W](c4::W) writer structure"]
    impl crate::Writable for C4 {}
    #[doc = "ICS Control Register 4"]
    pub mod c4 {
        #[doc = "Reader of register C4"]
        pub type R = crate::R<u8, super::C4>;
        #[doc = "Writer for register C4"]
        pub type W = crate::W<u8, super::C4>;
        #[doc = "Register C4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::C4 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SCFTRIM`"]
        pub type SCFTRIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SCFTRIM`"]
        pub struct SCFTRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCFTRIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        #[doc = "Clock Monitor Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CME_A {
            #[doc = "0: Clock monitor is disabled."]
            _0 = 0,
            #[doc = "1: Generates a reset request on loss of external clock."]
            _1 = 1,
        }
        impl From<CME_A> for bool {
            #[inline(always)]
            fn from(variant: CME_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CME`"]
        pub type CME_R = crate::R<bool, CME_A>;
        impl CME_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CME_A {
                match self.bits {
                    false => CME_A::_0,
                    true => CME_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CME_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CME_A::_1
            }
        }
        #[doc = "Write proxy for field `CME`"]
        pub struct CME_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CME_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CME_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clock monitor is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CME_A::_0)
            }
            #[doc = "Generates a reset request on loss of external clock."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CME_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Loss of Lock Interrupt\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LOLIE_A {
            #[doc = "0: No request on loss of lock."]
            _0 = 0,
            #[doc = "1: Generates an interrupt request on loss of lock."]
            _1 = 1,
        }
        impl From<LOLIE_A> for bool {
            #[inline(always)]
            fn from(variant: LOLIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LOLIE`"]
        pub type LOLIE_R = crate::R<bool, LOLIE_A>;
        impl LOLIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LOLIE_A {
                match self.bits {
                    false => LOLIE_A::_0,
                    true => LOLIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LOLIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LOLIE_A::_1
            }
        }
        #[doc = "Write proxy for field `LOLIE`"]
        pub struct LOLIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOLIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LOLIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No request on loss of lock."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(LOLIE_A::_0)
            }
            #[doc = "Generates an interrupt request on loss of lock."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(LOLIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Slow Internal Reference Clock Fine Trim"]
            #[inline(always)]
            pub fn scftrim(&self) -> SCFTRIM_R {
                SCFTRIM_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 5 - Clock Monitor Enable"]
            #[inline(always)]
            pub fn cme(&self) -> CME_R {
                CME_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Loss of Lock Interrupt"]
            #[inline(always)]
            pub fn lolie(&self) -> LOLIE_R {
                LOLIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Slow Internal Reference Clock Fine Trim"]
            #[inline(always)]
            pub fn scftrim(&mut self) -> SCFTRIM_W {
                SCFTRIM_W { w: self }
            }
            #[doc = "Bit 5 - Clock Monitor Enable"]
            #[inline(always)]
            pub fn cme(&mut self) -> CME_W {
                CME_W { w: self }
            }
            #[doc = "Bit 7 - Loss of Lock Interrupt"]
            #[inline(always)]
            pub fn lolie(&mut self) -> LOLIE_W {
                LOLIE_W { w: self }
            }
        }
    }
    #[doc = "ICS Status Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s](s) module"]
    pub type S = crate::Reg<u8, _S>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _S;
    #[doc = "`read()` method returns [s::R](s::R) reader structure"]
    impl crate::Readable for S {}
    #[doc = "`write(|w| ..)` method takes [s::W](s::W) writer structure"]
    impl crate::Writable for S {}
    #[doc = "ICS Status Register"]
    pub mod s {
        #[doc = "Reader of register S"]
        pub type R = crate::R<u8, super::S>;
        #[doc = "Writer for register S"]
        pub type W = crate::W<u8, super::S>;
        #[doc = "Register S `reset()`'s with value 0x10"]
        impl crate::ResetValue for super::S {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x10
            }
        }
        #[doc = "Clock Mode Status\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CLKST_A {
            #[doc = "0: Output of FLL is selected."]
            _00 = 0,
            #[doc = "1: FLL Bypassed, internal reference clock is selected."]
            _01 = 1,
            #[doc = "2: FLL Bypassed, external reference clock is selected."]
            _10 = 2,
        }
        impl From<CLKST_A> for u8 {
            #[inline(always)]
            fn from(variant: CLKST_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `CLKST`"]
        pub type CLKST_R = crate::R<u8, CLKST_A>;
        impl CLKST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, CLKST_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(CLKST_A::_00),
                    1 => Val(CLKST_A::_01),
                    2 => Val(CLKST_A::_10),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == CLKST_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == CLKST_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == CLKST_A::_10
            }
        }
        #[doc = "Internal Reference Status\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IREFST_A {
            #[doc = "0: Source of reference clock is external clock."]
            _0 = 0,
            #[doc = "1: Source of reference clock is internal clock."]
            _1 = 1,
        }
        impl From<IREFST_A> for bool {
            #[inline(always)]
            fn from(variant: IREFST_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IREFST`"]
        pub type IREFST_R = crate::R<bool, IREFST_A>;
        impl IREFST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IREFST_A {
                match self.bits {
                    false => IREFST_A::_0,
                    true => IREFST_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == IREFST_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == IREFST_A::_1
            }
        }
        #[doc = "Lock Status\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LOCK_A {
            #[doc = "0: FLL is currently unlocked."]
            _0 = 0,
            #[doc = "1: FLL is currently locked."]
            _1 = 1,
        }
        impl From<LOCK_A> for bool {
            #[inline(always)]
            fn from(variant: LOCK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LOCK`"]
        pub type LOCK_R = crate::R<bool, LOCK_A>;
        impl LOCK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LOCK_A {
                match self.bits {
                    false => LOCK_A::_0,
                    true => LOCK_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LOCK_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LOCK_A::_1
            }
        }
        #[doc = "Loss of Lock Status\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LOLS_A {
            #[doc = "0: FLL has not lost lock since LOLS was last cleared."]
            _0 = 0,
            #[doc = "1: FLL has lost lock since LOLS was last cleared."]
            _1 = 1,
        }
        impl From<LOLS_A> for bool {
            #[inline(always)]
            fn from(variant: LOLS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LOLS`"]
        pub type LOLS_R = crate::R<bool, LOLS_A>;
        impl LOLS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LOLS_A {
                match self.bits {
                    false => LOLS_A::_0,
                    true => LOLS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LOLS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LOLS_A::_1
            }
        }
        #[doc = "Write proxy for field `LOLS`"]
        pub struct LOLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOLS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LOLS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FLL has not lost lock since LOLS was last cleared."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(LOLS_A::_0)
            }
            #[doc = "FLL has lost lock since LOLS was last cleared."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(LOLS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 2:3 - Clock Mode Status"]
            #[inline(always)]
            pub fn clkst(&self) -> CLKST_R {
                CLKST_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bit 4 - Internal Reference Status"]
            #[inline(always)]
            pub fn irefst(&self) -> IREFST_R {
                IREFST_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Lock Status"]
            #[inline(always)]
            pub fn lock(&self) -> LOCK_R {
                LOCK_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Loss of Lock Status"]
            #[inline(always)]
            pub fn lols(&self) -> LOLS_R {
                LOLS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - Loss of Lock Status"]
            #[inline(always)]
            pub fn lols(&mut self) -> LOLS_W {
                LOLS_W { w: self }
            }
        }
    }
}
#[doc = "Oscillator"]
pub struct OSC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for OSC {}
impl OSC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const osc::RegisterBlock {
        0x4006_5000 as *const _
    }
}
impl Deref for OSC {
    type Target = osc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*OSC::ptr() }
    }
}
#[doc = "Oscillator"]
pub mod osc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - OSC Control Register"]
        pub cr: CR,
    }
    #[doc = "OSC Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u8, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "OSC Control Register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u8, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u8, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "OSC Initialization\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OSCINIT_A {
            #[doc = "0: Oscillator initialization is not complete."]
            _0 = 0,
            #[doc = "1: Oscillator initialization is completed."]
            _1 = 1,
        }
        impl From<OSCINIT_A> for bool {
            #[inline(always)]
            fn from(variant: OSCINIT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OSCINIT`"]
        pub type OSCINIT_R = crate::R<bool, OSCINIT_A>;
        impl OSCINIT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OSCINIT_A {
                match self.bits {
                    false => OSCINIT_A::_0,
                    true => OSCINIT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == OSCINIT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == OSCINIT_A::_1
            }
        }
        #[doc = "High Gain Oscillator Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HGO_A {
            #[doc = "0: Low-power mode"]
            _0 = 0,
            #[doc = "1: High-gain mode"]
            _1 = 1,
        }
        impl From<HGO_A> for bool {
            #[inline(always)]
            fn from(variant: HGO_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HGO`"]
        pub type HGO_R = crate::R<bool, HGO_A>;
        impl HGO_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HGO_A {
                match self.bits {
                    false => HGO_A::_0,
                    true => HGO_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HGO_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HGO_A::_1
            }
        }
        #[doc = "Write proxy for field `HGO`"]
        pub struct HGO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HGO_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HGO_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Low-power mode"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HGO_A::_0)
            }
            #[doc = "High-gain mode"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HGO_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Frequency Range Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RANGE_A {
            #[doc = "0: Low frequency range of 32 kHz."]
            _0 = 0,
            #[doc = "1: High frequency range of 4-24 MHz."]
            _1 = 1,
        }
        impl From<RANGE_A> for bool {
            #[inline(always)]
            fn from(variant: RANGE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RANGE`"]
        pub type RANGE_R = crate::R<bool, RANGE_A>;
        impl RANGE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RANGE_A {
                match self.bits {
                    false => RANGE_A::_0,
                    true => RANGE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RANGE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RANGE_A::_1
            }
        }
        #[doc = "Write proxy for field `RANGE`"]
        pub struct RANGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RANGE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RANGE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Low frequency range of 32 kHz."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RANGE_A::_0)
            }
            #[doc = "High frequency range of 4-24 MHz."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RANGE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "OSC Output Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OSCOS_A {
            #[doc = "0: External clock source from EXTAL pin is selected."]
            _0 = 0,
            #[doc = "1: Oscillator clock source is selected."]
            _1 = 1,
        }
        impl From<OSCOS_A> for bool {
            #[inline(always)]
            fn from(variant: OSCOS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OSCOS`"]
        pub type OSCOS_R = crate::R<bool, OSCOS_A>;
        impl OSCOS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OSCOS_A {
                match self.bits {
                    false => OSCOS_A::_0,
                    true => OSCOS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == OSCOS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == OSCOS_A::_1
            }
        }
        #[doc = "Write proxy for field `OSCOS`"]
        pub struct OSCOS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSCOS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSCOS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "External clock source from EXTAL pin is selected."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(OSCOS_A::_0)
            }
            #[doc = "Oscillator clock source is selected."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(OSCOS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "OSC Enable in Stop mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OSCSTEN_A {
            #[doc = "0: OSC clock is disabled in Stop mode."]
            _0 = 0,
            #[doc = "1: OSC clock stays enabled in Stop mode."]
            _1 = 1,
        }
        impl From<OSCSTEN_A> for bool {
            #[inline(always)]
            fn from(variant: OSCSTEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OSCSTEN`"]
        pub type OSCSTEN_R = crate::R<bool, OSCSTEN_A>;
        impl OSCSTEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OSCSTEN_A {
                match self.bits {
                    false => OSCSTEN_A::_0,
                    true => OSCSTEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == OSCSTEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == OSCSTEN_A::_1
            }
        }
        #[doc = "Write proxy for field `OSCSTEN`"]
        pub struct OSCSTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSCSTEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSCSTEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "OSC clock is disabled in Stop mode."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(OSCSTEN_A::_0)
            }
            #[doc = "OSC clock stays enabled in Stop mode."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(OSCSTEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "OSC Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OSCEN_A {
            #[doc = "0: OSC module is disabled."]
            _0 = 0,
            #[doc = "1: OSC module is enabled."]
            _1 = 1,
        }
        impl From<OSCEN_A> for bool {
            #[inline(always)]
            fn from(variant: OSCEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OSCEN`"]
        pub type OSCEN_R = crate::R<bool, OSCEN_A>;
        impl OSCEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OSCEN_A {
                match self.bits {
                    false => OSCEN_A::_0,
                    true => OSCEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == OSCEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == OSCEN_A::_1
            }
        }
        #[doc = "Write proxy for field `OSCEN`"]
        pub struct OSCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSCEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OSCEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "OSC module is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(OSCEN_A::_0)
            }
            #[doc = "OSC module is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(OSCEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - OSC Initialization"]
            #[inline(always)]
            pub fn oscinit(&self) -> OSCINIT_R {
                OSCINIT_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - High Gain Oscillator Select"]
            #[inline(always)]
            pub fn hgo(&self) -> HGO_R {
                HGO_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Frequency Range Select"]
            #[inline(always)]
            pub fn range(&self) -> RANGE_R {
                RANGE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 4 - OSC Output Select"]
            #[inline(always)]
            pub fn oscos(&self) -> OSCOS_R {
                OSCOS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - OSC Enable in Stop mode"]
            #[inline(always)]
            pub fn oscsten(&self) -> OSCSTEN_R {
                OSCSTEN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 7 - OSC Enable"]
            #[inline(always)]
            pub fn oscen(&self) -> OSCEN_R {
                OSCEN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - High Gain Oscillator Select"]
            #[inline(always)]
            pub fn hgo(&mut self) -> HGO_W {
                HGO_W { w: self }
            }
            #[doc = "Bit 2 - Frequency Range Select"]
            #[inline(always)]
            pub fn range(&mut self) -> RANGE_W {
                RANGE_W { w: self }
            }
            #[doc = "Bit 4 - OSC Output Select"]
            #[inline(always)]
            pub fn oscos(&mut self) -> OSCOS_W {
                OSCOS_W { w: self }
            }
            #[doc = "Bit 5 - OSC Enable in Stop mode"]
            #[inline(always)]
            pub fn oscsten(&mut self) -> OSCSTEN_W {
                OSCSTEN_W { w: self }
            }
            #[doc = "Bit 7 - OSC Enable"]
            #[inline(always)]
            pub fn oscen(&mut self) -> OSCEN_W {
                OSCEN_W { w: self }
            }
        }
    }
}
#[doc = "Inter-Integrated Circuit"]
pub struct I2C0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C0 {}
impl I2C0 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c0::RegisterBlock {
        0x4006_6000 as *const _
    }
}
impl Deref for I2C0 {
    type Target = i2c0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*I2C0::ptr() }
    }
}
#[doc = "Inter-Integrated Circuit"]
pub mod i2c0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - I2C Address Register 1"]
        pub a1: A1,
        #[doc = "0x01 - I2C Frequency Divider register"]
        pub f: F,
        #[doc = "0x02 - I2C Control Register 1"]
        pub c1: C1,
        #[doc = "0x03 - I2C Status register"]
        pub s: S,
        #[doc = "0x04 - I2C Data I/O register"]
        pub d: D,
        #[doc = "0x05 - I2C Control Register 2"]
        pub c2: C2,
        #[doc = "0x06 - I2C Programmable Input Glitch Filter register"]
        pub flt: FLT,
        #[doc = "0x07 - I2C Range Address register"]
        pub ra: RA,
        #[doc = "0x08 - I2C SMBus Control and Status register"]
        pub smb: SMB,
        #[doc = "0x09 - I2C Address Register 2"]
        pub a2: A2,
        #[doc = "0x0a - I2C SCL Low Timeout Register High"]
        pub slth: SLTH,
        #[doc = "0x0b - I2C SCL Low Timeout Register Low"]
        pub sltl: SLTL,
    }
    #[doc = "I2C Address Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [a1](a1) module"]
    pub type A1 = crate::Reg<u8, _A1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _A1;
    #[doc = "`read()` method returns [a1::R](a1::R) reader structure"]
    impl crate::Readable for A1 {}
    #[doc = "`write(|w| ..)` method takes [a1::W](a1::W) writer structure"]
    impl crate::Writable for A1 {}
    #[doc = "I2C Address Register 1"]
    pub mod a1 {
        #[doc = "Reader of register A1"]
        pub type R = crate::R<u8, super::A1>;
        #[doc = "Writer for register A1"]
        pub type W = crate::W<u8, super::A1>;
        #[doc = "Register A1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::A1 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AD`"]
        pub type AD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AD`"]
        pub struct AD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 1)) | (((value as u8) & 0x7f) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 1:7 - Address"]
            #[inline(always)]
            pub fn ad(&self) -> AD_R {
                AD_R::new(((self.bits >> 1) & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 1:7 - Address"]
            #[inline(always)]
            pub fn ad(&mut self) -> AD_W {
                AD_W { w: self }
            }
        }
    }
    #[doc = "I2C Frequency Divider register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [f](f) module"]
    pub type F = crate::Reg<u8, _F>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _F;
    #[doc = "`read()` method returns [f::R](f::R) reader structure"]
    impl crate::Readable for F {}
    #[doc = "`write(|w| ..)` method takes [f::W](f::W) writer structure"]
    impl crate::Writable for F {}
    #[doc = "I2C Frequency Divider register"]
    pub mod f {
        #[doc = "Reader of register F"]
        pub type R = crate::R<u8, super::F>;
        #[doc = "Writer for register F"]
        pub type W = crate::W<u8, super::F>;
        #[doc = "Register F `reset()`'s with value 0"]
        impl crate::ResetValue for super::F {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ICR`"]
        pub type ICR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ICR`"]
        pub struct ICR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ICR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u8) & 0x3f);
                self.w
            }
        }
        #[doc = "Multiplier Factor\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MULT_A {
            #[doc = "0: mul = 1"]
            _00 = 0,
            #[doc = "1: mul = 2"]
            _01 = 1,
            #[doc = "2: mul = 4"]
            _10 = 2,
        }
        impl From<MULT_A> for u8 {
            #[inline(always)]
            fn from(variant: MULT_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `MULT`"]
        pub type MULT_R = crate::R<u8, MULT_A>;
        impl MULT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, MULT_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(MULT_A::_00),
                    1 => Val(MULT_A::_01),
                    2 => Val(MULT_A::_10),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == MULT_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == MULT_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == MULT_A::_10
            }
        }
        #[doc = "Write proxy for field `MULT`"]
        pub struct MULT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MULT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MULT_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "mul = 1"]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(MULT_A::_00)
            }
            #[doc = "mul = 2"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(MULT_A::_01)
            }
            #[doc = "mul = 4"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(MULT_A::_10)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u8) & 0x03) << 6);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - ClockRate"]
            #[inline(always)]
            pub fn icr(&self) -> ICR_R {
                ICR_R::new((self.bits & 0x3f) as u8)
            }
            #[doc = "Bits 6:7 - Multiplier Factor"]
            #[inline(always)]
            pub fn mult(&self) -> MULT_R {
                MULT_R::new(((self.bits >> 6) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - ClockRate"]
            #[inline(always)]
            pub fn icr(&mut self) -> ICR_W {
                ICR_W { w: self }
            }
            #[doc = "Bits 6:7 - Multiplier Factor"]
            #[inline(always)]
            pub fn mult(&mut self) -> MULT_W {
                MULT_W { w: self }
            }
        }
    }
    #[doc = "I2C Control Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c1](c1) module"]
    pub type C1 = crate::Reg<u8, _C1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C1;
    #[doc = "`read()` method returns [c1::R](c1::R) reader structure"]
    impl crate::Readable for C1 {}
    #[doc = "`write(|w| ..)` method takes [c1::W](c1::W) writer structure"]
    impl crate::Writable for C1 {}
    #[doc = "I2C Control Register 1"]
    pub mod c1 {
        #[doc = "Reader of register C1"]
        pub type R = crate::R<u8, super::C1>;
        #[doc = "Writer for register C1"]
        pub type W = crate::W<u8, super::C1>;
        #[doc = "Register C1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::C1 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Wakeup Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WUEN_A {
            #[doc = "0: Normal operation. No interrupt generated when address matching in low power mode."]
            _0 = 0,
            #[doc = "1: Enables the wakeup function in low power mode."]
            _1 = 1,
        }
        impl From<WUEN_A> for bool {
            #[inline(always)]
            fn from(variant: WUEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WUEN`"]
        pub type WUEN_R = crate::R<bool, WUEN_A>;
        impl WUEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WUEN_A {
                match self.bits {
                    false => WUEN_A::_0,
                    true => WUEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == WUEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == WUEN_A::_1
            }
        }
        #[doc = "Write proxy for field `WUEN`"]
        pub struct WUEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WUEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Normal operation. No interrupt generated when address matching in low power mode."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(WUEN_A::_0)
            }
            #[doc = "Enables the wakeup function in low power mode."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(WUEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `RSTA`"]
        pub struct RSTA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSTA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Transmit Acknowledge Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TXAK_A {
            #[doc = "0: An acknowledge signal is sent to the bus on the following receiving byte (if FACK is cleared) or the current receiving byte (if FACK is set)."]
            _0 = 0,
            #[doc = "1: No acknowledge signal is sent to the bus on the following receiving data byte (if FACK is cleared) or the current receiving data byte (if FACK is set)."]
            _1 = 1,
        }
        impl From<TXAK_A> for bool {
            #[inline(always)]
            fn from(variant: TXAK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TXAK`"]
        pub type TXAK_R = crate::R<bool, TXAK_A>;
        impl TXAK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TXAK_A {
                match self.bits {
                    false => TXAK_A::_0,
                    true => TXAK_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TXAK_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TXAK_A::_1
            }
        }
        #[doc = "Write proxy for field `TXAK`"]
        pub struct TXAK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXAK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TXAK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "An acknowledge signal is sent to the bus on the following receiving byte (if FACK is cleared) or the current receiving byte (if FACK is set)."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TXAK_A::_0)
            }
            #[doc = "No acknowledge signal is sent to the bus on the following receiving data byte (if FACK is cleared) or the current receiving data byte (if FACK is set)."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TXAK_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u8) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Transmit Mode Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TX_A {
            #[doc = "0: Receive"]
            _0 = 0,
            #[doc = "1: Transmit"]
            _1 = 1,
        }
        impl From<TX_A> for bool {
            #[inline(always)]
            fn from(variant: TX_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TX`"]
        pub type TX_R = crate::R<bool, TX_A>;
        impl TX_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TX_A {
                match self.bits {
                    false => TX_A::_0,
                    true => TX_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TX_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TX_A::_1
            }
        }
        #[doc = "Write proxy for field `TX`"]
        pub struct TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TX_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Receive"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TX_A::_0)
            }
            #[doc = "Transmit"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TX_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Master Mode Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MST_A {
            #[doc = "0: Slave mode"]
            _0 = 0,
            #[doc = "1: Master mode"]
            _1 = 1,
        }
        impl From<MST_A> for bool {
            #[inline(always)]
            fn from(variant: MST_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MST`"]
        pub type MST_R = crate::R<bool, MST_A>;
        impl MST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MST_A {
                match self.bits {
                    false => MST_A::_0,
                    true => MST_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == MST_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == MST_A::_1
            }
        }
        #[doc = "Write proxy for field `MST`"]
        pub struct MST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Slave mode"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(MST_A::_0)
            }
            #[doc = "Master mode"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(MST_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "I2C Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IICIE_A {
            #[doc = "0: Disabled"]
            _0 = 0,
            #[doc = "1: Enabled"]
            _1 = 1,
        }
        impl From<IICIE_A> for bool {
            #[inline(always)]
            fn from(variant: IICIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IICIE`"]
        pub type IICIE_R = crate::R<bool, IICIE_A>;
        impl IICIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IICIE_A {
                match self.bits {
                    false => IICIE_A::_0,
                    true => IICIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == IICIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == IICIE_A::_1
            }
        }
        #[doc = "Write proxy for field `IICIE`"]
        pub struct IICIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IICIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IICIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Disabled"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(IICIE_A::_0)
            }
            #[doc = "Enabled"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(IICIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "I2C Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IICEN_A {
            #[doc = "0: Disabled"]
            _0 = 0,
            #[doc = "1: Enabled"]
            _1 = 1,
        }
        impl From<IICEN_A> for bool {
            #[inline(always)]
            fn from(variant: IICEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IICEN`"]
        pub type IICEN_R = crate::R<bool, IICEN_A>;
        impl IICEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IICEN_A {
                match self.bits {
                    false => IICEN_A::_0,
                    true => IICEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == IICEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == IICEN_A::_1
            }
        }
        #[doc = "Write proxy for field `IICEN`"]
        pub struct IICEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IICEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IICEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Disabled"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(IICEN_A::_0)
            }
            #[doc = "Enabled"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(IICEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - Wakeup Enable"]
            #[inline(always)]
            pub fn wuen(&self) -> WUEN_R {
                WUEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Transmit Acknowledge Enable"]
            #[inline(always)]
            pub fn txak(&self) -> TXAK_R {
                TXAK_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Transmit Mode Select"]
            #[inline(always)]
            pub fn tx(&self) -> TX_R {
                TX_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Master Mode Select"]
            #[inline(always)]
            pub fn mst(&self) -> MST_R {
                MST_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - I2C Interrupt Enable"]
            #[inline(always)]
            pub fn iicie(&self) -> IICIE_R {
                IICIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - I2C Enable"]
            #[inline(always)]
            pub fn iicen(&self) -> IICEN_R {
                IICEN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - Wakeup Enable"]
            #[inline(always)]
            pub fn wuen(&mut self) -> WUEN_W {
                WUEN_W { w: self }
            }
            #[doc = "Bit 2 - Repeat START"]
            #[inline(always)]
            pub fn rsta(&mut self) -> RSTA_W {
                RSTA_W { w: self }
            }
            #[doc = "Bit 3 - Transmit Acknowledge Enable"]
            #[inline(always)]
            pub fn txak(&mut self) -> TXAK_W {
                TXAK_W { w: self }
            }
            #[doc = "Bit 4 - Transmit Mode Select"]
            #[inline(always)]
            pub fn tx(&mut self) -> TX_W {
                TX_W { w: self }
            }
            #[doc = "Bit 5 - Master Mode Select"]
            #[inline(always)]
            pub fn mst(&mut self) -> MST_W {
                MST_W { w: self }
            }
            #[doc = "Bit 6 - I2C Interrupt Enable"]
            #[inline(always)]
            pub fn iicie(&mut self) -> IICIE_W {
                IICIE_W { w: self }
            }
            #[doc = "Bit 7 - I2C Enable"]
            #[inline(always)]
            pub fn iicen(&mut self) -> IICEN_W {
                IICEN_W { w: self }
            }
        }
    }
    #[doc = "I2C Status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s](s) module"]
    pub type S = crate::Reg<u8, _S>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _S;
    #[doc = "`read()` method returns [s::R](s::R) reader structure"]
    impl crate::Readable for S {}
    #[doc = "`write(|w| ..)` method takes [s::W](s::W) writer structure"]
    impl crate::Writable for S {}
    #[doc = "I2C Status register"]
    pub mod s {
        #[doc = "Reader of register S"]
        pub type R = crate::R<u8, super::S>;
        #[doc = "Writer for register S"]
        pub type W = crate::W<u8, super::S>;
        #[doc = "Register S `reset()`'s with value 0x80"]
        impl crate::ResetValue for super::S {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x80
            }
        }
        #[doc = "Receive Acknowledge\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXAK_A {
            #[doc = "0: Acknowledge signal was received after the completion of one byte of data transmission on the bus"]
            _0 = 0,
            #[doc = "1: No acknowledge signal detected"]
            _1 = 1,
        }
        impl From<RXAK_A> for bool {
            #[inline(always)]
            fn from(variant: RXAK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXAK`"]
        pub type RXAK_R = crate::R<bool, RXAK_A>;
        impl RXAK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RXAK_A {
                match self.bits {
                    false => RXAK_A::_0,
                    true => RXAK_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RXAK_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RXAK_A::_1
            }
        }
        #[doc = "Interrupt Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IICIF_A {
            #[doc = "0: No interrupt pending"]
            _0 = 0,
            #[doc = "1: Interrupt pending"]
            _1 = 1,
        }
        impl From<IICIF_A> for bool {
            #[inline(always)]
            fn from(variant: IICIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IICIF`"]
        pub type IICIF_R = crate::R<bool, IICIF_A>;
        impl IICIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IICIF_A {
                match self.bits {
                    false => IICIF_A::_0,
                    true => IICIF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == IICIF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == IICIF_A::_1
            }
        }
        #[doc = "Write proxy for field `IICIF`"]
        pub struct IICIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IICIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IICIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No interrupt pending"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(IICIF_A::_0)
            }
            #[doc = "Interrupt pending"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(IICIF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Slave Read/Write\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SRW_A {
            #[doc = "0: Slave receive, master writing to slave"]
            _0 = 0,
            #[doc = "1: Slave transmit, master reading from slave"]
            _1 = 1,
        }
        impl From<SRW_A> for bool {
            #[inline(always)]
            fn from(variant: SRW_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SRW`"]
        pub type SRW_R = crate::R<bool, SRW_A>;
        impl SRW_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SRW_A {
                match self.bits {
                    false => SRW_A::_0,
                    true => SRW_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SRW_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SRW_A::_1
            }
        }
        #[doc = "Range Address Match\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RAM_A {
            #[doc = "0: Not addressed"]
            _0 = 0,
            #[doc = "1: Addressed as a slave"]
            _1 = 1,
        }
        impl From<RAM_A> for bool {
            #[inline(always)]
            fn from(variant: RAM_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RAM`"]
        pub type RAM_R = crate::R<bool, RAM_A>;
        impl RAM_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RAM_A {
                match self.bits {
                    false => RAM_A::_0,
                    true => RAM_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RAM_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RAM_A::_1
            }
        }
        #[doc = "Write proxy for field `RAM`"]
        pub struct RAM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RAM_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Not addressed"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RAM_A::_0)
            }
            #[doc = "Addressed as a slave"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RAM_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u8) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Arbitration Lost\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ARBL_A {
            #[doc = "0: Standard bus operation."]
            _0 = 0,
            #[doc = "1: Loss of arbitration."]
            _1 = 1,
        }
        impl From<ARBL_A> for bool {
            #[inline(always)]
            fn from(variant: ARBL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ARBL`"]
        pub type ARBL_R = crate::R<bool, ARBL_A>;
        impl ARBL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ARBL_A {
                match self.bits {
                    false => ARBL_A::_0,
                    true => ARBL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ARBL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ARBL_A::_1
            }
        }
        #[doc = "Write proxy for field `ARBL`"]
        pub struct ARBL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARBL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ARBL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Standard bus operation."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ARBL_A::_0)
            }
            #[doc = "Loss of arbitration."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ARBL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Bus Busy\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BUSY_A {
            #[doc = "0: Bus is idle"]
            _0 = 0,
            #[doc = "1: Bus is busy"]
            _1 = 1,
        }
        impl From<BUSY_A> for bool {
            #[inline(always)]
            fn from(variant: BUSY_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BUSY`"]
        pub type BUSY_R = crate::R<bool, BUSY_A>;
        impl BUSY_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BUSY_A {
                match self.bits {
                    false => BUSY_A::_0,
                    true => BUSY_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == BUSY_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == BUSY_A::_1
            }
        }
        #[doc = "Addressed As A Slave\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IAAS_A {
            #[doc = "0: Not addressed"]
            _0 = 0,
            #[doc = "1: Addressed as a slave"]
            _1 = 1,
        }
        impl From<IAAS_A> for bool {
            #[inline(always)]
            fn from(variant: IAAS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IAAS`"]
        pub type IAAS_R = crate::R<bool, IAAS_A>;
        impl IAAS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IAAS_A {
                match self.bits {
                    false => IAAS_A::_0,
                    true => IAAS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == IAAS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == IAAS_A::_1
            }
        }
        #[doc = "Write proxy for field `IAAS`"]
        pub struct IAAS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IAAS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IAAS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Not addressed"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(IAAS_A::_0)
            }
            #[doc = "Addressed as a slave"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(IAAS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Transfer Complete Flag\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TCF_A {
            #[doc = "0: Transfer in progress"]
            _0 = 0,
            #[doc = "1: Transfer complete"]
            _1 = 1,
        }
        impl From<TCF_A> for bool {
            #[inline(always)]
            fn from(variant: TCF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TCF`"]
        pub type TCF_R = crate::R<bool, TCF_A>;
        impl TCF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TCF_A {
                match self.bits {
                    false => TCF_A::_0,
                    true => TCF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TCF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TCF_A::_1
            }
        }
        impl R {
            #[doc = "Bit 0 - Receive Acknowledge"]
            #[inline(always)]
            pub fn rxak(&self) -> RXAK_R {
                RXAK_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Interrupt Flag"]
            #[inline(always)]
            pub fn iicif(&self) -> IICIF_R {
                IICIF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Slave Read/Write"]
            #[inline(always)]
            pub fn srw(&self) -> SRW_R {
                SRW_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Range Address Match"]
            #[inline(always)]
            pub fn ram(&self) -> RAM_R {
                RAM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Arbitration Lost"]
            #[inline(always)]
            pub fn arbl(&self) -> ARBL_R {
                ARBL_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Bus Busy"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Addressed As A Slave"]
            #[inline(always)]
            pub fn iaas(&self) -> IAAS_R {
                IAAS_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Transfer Complete Flag"]
            #[inline(always)]
            pub fn tcf(&self) -> TCF_R {
                TCF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - Interrupt Flag"]
            #[inline(always)]
            pub fn iicif(&mut self) -> IICIF_W {
                IICIF_W { w: self }
            }
            #[doc = "Bit 3 - Range Address Match"]
            #[inline(always)]
            pub fn ram(&mut self) -> RAM_W {
                RAM_W { w: self }
            }
            #[doc = "Bit 4 - Arbitration Lost"]
            #[inline(always)]
            pub fn arbl(&mut self) -> ARBL_W {
                ARBL_W { w: self }
            }
            #[doc = "Bit 6 - Addressed As A Slave"]
            #[inline(always)]
            pub fn iaas(&mut self) -> IAAS_W {
                IAAS_W { w: self }
            }
        }
    }
    #[doc = "I2C Data I/O register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [d](d) module"]
    pub type D = crate::Reg<u8, _D>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _D;
    #[doc = "`read()` method returns [d::R](d::R) reader structure"]
    impl crate::Readable for D {}
    #[doc = "`write(|w| ..)` method takes [d::W](d::W) writer structure"]
    impl crate::Writable for D {}
    #[doc = "I2C Data I/O register"]
    pub mod d {
        #[doc = "Reader of register D"]
        pub type R = crate::R<u8, super::D>;
        #[doc = "Writer for register D"]
        pub type W = crate::W<u8, super::D>;
        #[doc = "Register D `reset()`'s with value 0"]
        impl crate::ResetValue for super::D {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DATA`"]
        pub type DATA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DATA`"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Data"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Data"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
        }
    }
    #[doc = "I2C Control Register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c2](c2) module"]
    pub type C2 = crate::Reg<u8, _C2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C2;
    #[doc = "`read()` method returns [c2::R](c2::R) reader structure"]
    impl crate::Readable for C2 {}
    #[doc = "`write(|w| ..)` method takes [c2::W](c2::W) writer structure"]
    impl crate::Writable for C2 {}
    #[doc = "I2C Control Register 2"]
    pub mod c2 {
        #[doc = "Reader of register C2"]
        pub type R = crate::R<u8, super::C2>;
        #[doc = "Writer for register C2"]
        pub type W = crate::W<u8, super::C2>;
        #[doc = "Register C2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::C2 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AD`"]
        pub type AD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AD`"]
        pub struct AD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u8) & 0x07);
                self.w
            }
        }
        #[doc = "Range Address Matching Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RMEN_A {
            #[doc = "0: Range mode disabled. No address matching occurs for an address within the range of values of the A1 and RA registers."]
            _0 = 0,
            #[doc = "1: Range mode enabled. Address matching occurs when a slave receives an address within the range of values of the A1 and RA registers."]
            _1 = 1,
        }
        impl From<RMEN_A> for bool {
            #[inline(always)]
            fn from(variant: RMEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RMEN`"]
        pub type RMEN_R = crate::R<bool, RMEN_A>;
        impl RMEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RMEN_A {
                match self.bits {
                    false => RMEN_A::_0,
                    true => RMEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RMEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RMEN_A::_1
            }
        }
        #[doc = "Write proxy for field `RMEN`"]
        pub struct RMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RMEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RMEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Range mode disabled. No address matching occurs for an address within the range of values of the A1 and RA registers."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RMEN_A::_0)
            }
            #[doc = "Range mode enabled. Address matching occurs when a slave receives an address within the range of values of the A1 and RA registers."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RMEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u8) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Slave Baud Rate Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SBRC_A {
            #[doc = "0: The slave baud rate follows the master baud rate and clock stretching may occur"]
            _0 = 0,
            #[doc = "1: Slave baud rate is independent of the master baud rate"]
            _1 = 1,
        }
        impl From<SBRC_A> for bool {
            #[inline(always)]
            fn from(variant: SBRC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SBRC`"]
        pub type SBRC_R = crate::R<bool, SBRC_A>;
        impl SBRC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SBRC_A {
                match self.bits {
                    false => SBRC_A::_0,
                    true => SBRC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SBRC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SBRC_A::_1
            }
        }
        #[doc = "Write proxy for field `SBRC`"]
        pub struct SBRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SBRC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SBRC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The slave baud rate follows the master baud rate and clock stretching may occur"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SBRC_A::_0)
            }
            #[doc = "Slave baud rate is independent of the master baud rate"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SBRC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Address Extension\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ADEXT_A {
            #[doc = "0: 7-bit address scheme"]
            _0 = 0,
            #[doc = "1: 10-bit address scheme"]
            _1 = 1,
        }
        impl From<ADEXT_A> for bool {
            #[inline(always)]
            fn from(variant: ADEXT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ADEXT`"]
        pub type ADEXT_R = crate::R<bool, ADEXT_A>;
        impl ADEXT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADEXT_A {
                match self.bits {
                    false => ADEXT_A::_0,
                    true => ADEXT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ADEXT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ADEXT_A::_1
            }
        }
        #[doc = "Write proxy for field `ADEXT`"]
        pub struct ADEXT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADEXT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADEXT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "7-bit address scheme"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ADEXT_A::_0)
            }
            #[doc = "10-bit address scheme"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ADEXT_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "General Call Address Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum GCAEN_A {
            #[doc = "0: Disabled"]
            _0 = 0,
            #[doc = "1: Enabled"]
            _1 = 1,
        }
        impl From<GCAEN_A> for bool {
            #[inline(always)]
            fn from(variant: GCAEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `GCAEN`"]
        pub type GCAEN_R = crate::R<bool, GCAEN_A>;
        impl GCAEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> GCAEN_A {
                match self.bits {
                    false => GCAEN_A::_0,
                    true => GCAEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == GCAEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == GCAEN_A::_1
            }
        }
        #[doc = "Write proxy for field `GCAEN`"]
        pub struct GCAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GCAEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: GCAEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Disabled"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(GCAEN_A::_0)
            }
            #[doc = "Enabled"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(GCAEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Slave Address"]
            #[inline(always)]
            pub fn ad(&self) -> AD_R {
                AD_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bit 3 - Range Address Matching Enable"]
            #[inline(always)]
            pub fn rmen(&self) -> RMEN_R {
                RMEN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Slave Baud Rate Control"]
            #[inline(always)]
            pub fn sbrc(&self) -> SBRC_R {
                SBRC_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Address Extension"]
            #[inline(always)]
            pub fn adext(&self) -> ADEXT_R {
                ADEXT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - General Call Address Enable"]
            #[inline(always)]
            pub fn gcaen(&self) -> GCAEN_R {
                GCAEN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Slave Address"]
            #[inline(always)]
            pub fn ad(&mut self) -> AD_W {
                AD_W { w: self }
            }
            #[doc = "Bit 3 - Range Address Matching Enable"]
            #[inline(always)]
            pub fn rmen(&mut self) -> RMEN_W {
                RMEN_W { w: self }
            }
            #[doc = "Bit 4 - Slave Baud Rate Control"]
            #[inline(always)]
            pub fn sbrc(&mut self) -> SBRC_W {
                SBRC_W { w: self }
            }
            #[doc = "Bit 6 - Address Extension"]
            #[inline(always)]
            pub fn adext(&mut self) -> ADEXT_W {
                ADEXT_W { w: self }
            }
            #[doc = "Bit 7 - General Call Address Enable"]
            #[inline(always)]
            pub fn gcaen(&mut self) -> GCAEN_W {
                GCAEN_W { w: self }
            }
        }
    }
    #[doc = "I2C Programmable Input Glitch Filter register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flt](flt) module"]
    pub type FLT = crate::Reg<u8, _FLT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLT;
    #[doc = "`read()` method returns [flt::R](flt::R) reader structure"]
    impl crate::Readable for FLT {}
    #[doc = "`write(|w| ..)` method takes [flt::W](flt::W) writer structure"]
    impl crate::Writable for FLT {}
    #[doc = "I2C Programmable Input Glitch Filter register"]
    pub mod flt {
        #[doc = "Reader of register FLT"]
        pub type R = crate::R<u8, super::FLT>;
        #[doc = "Writer for register FLT"]
        pub type W = crate::W<u8, super::FLT>;
        #[doc = "Register FLT `reset()`'s with value 0"]
        impl crate::ResetValue for super::FLT {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "I2C Programmable Filter Factor\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FLT_A {
            #[doc = "0: No filter/bypass"]
            _0 = 0,
        }
        impl From<FLT_A> for u8 {
            #[inline(always)]
            fn from(variant: FLT_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `FLT`"]
        pub type FLT_R = crate::R<u8, FLT_A>;
        impl FLT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, FLT_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(FLT_A::_0),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FLT_A::_0
            }
        }
        #[doc = "Write proxy for field `FLT`"]
        pub struct FLT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FLT_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No filter/bypass"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FLT_A::_0)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u8) & 0x0f);
                self.w
            }
        }
        #[doc = "I2C Bus Start Detect Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum STARTF_A {
            #[doc = "0: No start happens on I2C bus"]
            _0 = 0,
            #[doc = "1: Start detected on I2C bus"]
            _1 = 1,
        }
        impl From<STARTF_A> for bool {
            #[inline(always)]
            fn from(variant: STARTF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `STARTF`"]
        pub type STARTF_R = crate::R<bool, STARTF_A>;
        impl STARTF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STARTF_A {
                match self.bits {
                    false => STARTF_A::_0,
                    true => STARTF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == STARTF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == STARTF_A::_1
            }
        }
        #[doc = "Write proxy for field `STARTF`"]
        pub struct STARTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STARTF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STARTF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No start happens on I2C bus"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(STARTF_A::_0)
            }
            #[doc = "Start detected on I2C bus"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(STARTF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "I2C Bus Stop or Start Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SSIE_A {
            #[doc = "0: Stop or start detection interrupt is disabled"]
            _0 = 0,
            #[doc = "1: Stop or start detection interrupt is enabled"]
            _1 = 1,
        }
        impl From<SSIE_A> for bool {
            #[inline(always)]
            fn from(variant: SSIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SSIE`"]
        pub type SSIE_R = crate::R<bool, SSIE_A>;
        impl SSIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SSIE_A {
                match self.bits {
                    false => SSIE_A::_0,
                    true => SSIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SSIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SSIE_A::_1
            }
        }
        #[doc = "Write proxy for field `SSIE`"]
        pub struct SSIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SSIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Stop or start detection interrupt is disabled"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SSIE_A::_0)
            }
            #[doc = "Stop or start detection interrupt is enabled"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SSIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "I2C Bus Stop Detect Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum STOPF_A {
            #[doc = "0: No stop happens on I2C bus"]
            _0 = 0,
            #[doc = "1: Stop detected on I2C bus"]
            _1 = 1,
        }
        impl From<STOPF_A> for bool {
            #[inline(always)]
            fn from(variant: STOPF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `STOPF`"]
        pub type STOPF_R = crate::R<bool, STOPF_A>;
        impl STOPF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> STOPF_A {
                match self.bits {
                    false => STOPF_A::_0,
                    true => STOPF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == STOPF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == STOPF_A::_1
            }
        }
        #[doc = "Write proxy for field `STOPF`"]
        pub struct STOPF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOPF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: STOPF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No stop happens on I2C bus"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(STOPF_A::_0)
            }
            #[doc = "Stop detected on I2C bus"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(STOPF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Stop Hold Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SHEN_A {
            #[doc = "0: Stop holdoff is disabled. The MCU's entry to stop mode is not gated."]
            _0 = 0,
            #[doc = "1: Stop holdoff is enabled."]
            _1 = 1,
        }
        impl From<SHEN_A> for bool {
            #[inline(always)]
            fn from(variant: SHEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SHEN`"]
        pub type SHEN_R = crate::R<bool, SHEN_A>;
        impl SHEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SHEN_A {
                match self.bits {
                    false => SHEN_A::_0,
                    true => SHEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SHEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SHEN_A::_1
            }
        }
        #[doc = "Write proxy for field `SHEN`"]
        pub struct SHEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SHEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SHEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Stop holdoff is disabled. The MCU's entry to stop mode is not gated."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SHEN_A::_0)
            }
            #[doc = "Stop holdoff is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SHEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - I2C Programmable Filter Factor"]
            #[inline(always)]
            pub fn flt(&self) -> FLT_R {
                FLT_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bit 4 - I2C Bus Start Detect Flag"]
            #[inline(always)]
            pub fn startf(&self) -> STARTF_R {
                STARTF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - I2C Bus Stop or Start Interrupt Enable"]
            #[inline(always)]
            pub fn ssie(&self) -> SSIE_R {
                SSIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - I2C Bus Stop Detect Flag"]
            #[inline(always)]
            pub fn stopf(&self) -> STOPF_R {
                STOPF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Stop Hold Enable"]
            #[inline(always)]
            pub fn shen(&self) -> SHEN_R {
                SHEN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - I2C Programmable Filter Factor"]
            #[inline(always)]
            pub fn flt(&mut self) -> FLT_W {
                FLT_W { w: self }
            }
            #[doc = "Bit 4 - I2C Bus Start Detect Flag"]
            #[inline(always)]
            pub fn startf(&mut self) -> STARTF_W {
                STARTF_W { w: self }
            }
            #[doc = "Bit 5 - I2C Bus Stop or Start Interrupt Enable"]
            #[inline(always)]
            pub fn ssie(&mut self) -> SSIE_W {
                SSIE_W { w: self }
            }
            #[doc = "Bit 6 - I2C Bus Stop Detect Flag"]
            #[inline(always)]
            pub fn stopf(&mut self) -> STOPF_W {
                STOPF_W { w: self }
            }
            #[doc = "Bit 7 - Stop Hold Enable"]
            #[inline(always)]
            pub fn shen(&mut self) -> SHEN_W {
                SHEN_W { w: self }
            }
        }
    }
    #[doc = "I2C Range Address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ra](ra) module"]
    pub type RA = crate::Reg<u8, _RA>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RA;
    #[doc = "`read()` method returns [ra::R](ra::R) reader structure"]
    impl crate::Readable for RA {}
    #[doc = "`write(|w| ..)` method takes [ra::W](ra::W) writer structure"]
    impl crate::Writable for RA {}
    #[doc = "I2C Range Address register"]
    pub mod ra {
        #[doc = "Reader of register RA"]
        pub type R = crate::R<u8, super::RA>;
        #[doc = "Writer for register RA"]
        pub type W = crate::W<u8, super::RA>;
        #[doc = "Register RA `reset()`'s with value 0"]
        impl crate::ResetValue for super::RA {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RAD`"]
        pub type RAD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RAD`"]
        pub struct RAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 1)) | (((value as u8) & 0x7f) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 1:7 - Range Slave Address"]
            #[inline(always)]
            pub fn rad(&self) -> RAD_R {
                RAD_R::new(((self.bits >> 1) & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 1:7 - Range Slave Address"]
            #[inline(always)]
            pub fn rad(&mut self) -> RAD_W {
                RAD_W { w: self }
            }
        }
    }
    #[doc = "I2C SMBus Control and Status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smb](smb) module"]
    pub type SMB = crate::Reg<u8, _SMB>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMB;
    #[doc = "`read()` method returns [smb::R](smb::R) reader structure"]
    impl crate::Readable for SMB {}
    #[doc = "`write(|w| ..)` method takes [smb::W](smb::W) writer structure"]
    impl crate::Writable for SMB {}
    #[doc = "I2C SMBus Control and Status register"]
    pub mod smb {
        #[doc = "Reader of register SMB"]
        pub type R = crate::R<u8, super::SMB>;
        #[doc = "Writer for register SMB"]
        pub type W = crate::W<u8, super::SMB>;
        #[doc = "Register SMB `reset()`'s with value 0"]
        impl crate::ResetValue for super::SMB {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "SHTF2 Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SHTF2IE_A {
            #[doc = "0: SHTF2 interrupt is disabled"]
            _0 = 0,
            #[doc = "1: SHTF2 interrupt is enabled"]
            _1 = 1,
        }
        impl From<SHTF2IE_A> for bool {
            #[inline(always)]
            fn from(variant: SHTF2IE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SHTF2IE`"]
        pub type SHTF2IE_R = crate::R<bool, SHTF2IE_A>;
        impl SHTF2IE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SHTF2IE_A {
                match self.bits {
                    false => SHTF2IE_A::_0,
                    true => SHTF2IE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SHTF2IE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SHTF2IE_A::_1
            }
        }
        #[doc = "Write proxy for field `SHTF2IE`"]
        pub struct SHTF2IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SHTF2IE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SHTF2IE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SHTF2 interrupt is disabled"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SHTF2IE_A::_0)
            }
            #[doc = "SHTF2 interrupt is enabled"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SHTF2IE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        #[doc = "SCL High Timeout Flag 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SHTF2_A {
            #[doc = "0: No SCL high and SDA low timeout occurs"]
            _0 = 0,
            #[doc = "1: SCL high and SDA low timeout occurs"]
            _1 = 1,
        }
        impl From<SHTF2_A> for bool {
            #[inline(always)]
            fn from(variant: SHTF2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SHTF2`"]
        pub type SHTF2_R = crate::R<bool, SHTF2_A>;
        impl SHTF2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SHTF2_A {
                match self.bits {
                    false => SHTF2_A::_0,
                    true => SHTF2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SHTF2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SHTF2_A::_1
            }
        }
        #[doc = "Write proxy for field `SHTF2`"]
        pub struct SHTF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SHTF2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SHTF2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No SCL high and SDA low timeout occurs"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SHTF2_A::_0)
            }
            #[doc = "SCL high and SDA low timeout occurs"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SHTF2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "SCL High Timeout Flag 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SHTF1_A {
            #[doc = "0: No SCL high and SDA high timeout occurs"]
            _0 = 0,
            #[doc = "1: SCL high and SDA high timeout occurs"]
            _1 = 1,
        }
        impl From<SHTF1_A> for bool {
            #[inline(always)]
            fn from(variant: SHTF1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SHTF1`"]
        pub type SHTF1_R = crate::R<bool, SHTF1_A>;
        impl SHTF1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SHTF1_A {
                match self.bits {
                    false => SHTF1_A::_0,
                    true => SHTF1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SHTF1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SHTF1_A::_1
            }
        }
        #[doc = "SCL Low Timeout Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SLTF_A {
            #[doc = "0: No low timeout occurs"]
            _0 = 0,
            #[doc = "1: Low timeout occurs"]
            _1 = 1,
        }
        impl From<SLTF_A> for bool {
            #[inline(always)]
            fn from(variant: SLTF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SLTF`"]
        pub type SLTF_R = crate::R<bool, SLTF_A>;
        impl SLTF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SLTF_A {
                match self.bits {
                    false => SLTF_A::_0,
                    true => SLTF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SLTF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SLTF_A::_1
            }
        }
        #[doc = "Write proxy for field `SLTF`"]
        pub struct SLTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLTF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SLTF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No low timeout occurs"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SLTF_A::_0)
            }
            #[doc = "Low timeout occurs"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SLTF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u8) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Timeout Counter Clock Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TCKSEL_A {
            #[doc = "0: Timeout counter counts at the frequency of the I2C module clock / 64"]
            _0 = 0,
            #[doc = "1: Timeout counter counts at the frequency of the I2C module clock"]
            _1 = 1,
        }
        impl From<TCKSEL_A> for bool {
            #[inline(always)]
            fn from(variant: TCKSEL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TCKSEL`"]
        pub type TCKSEL_R = crate::R<bool, TCKSEL_A>;
        impl TCKSEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TCKSEL_A {
                match self.bits {
                    false => TCKSEL_A::_0,
                    true => TCKSEL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TCKSEL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TCKSEL_A::_1
            }
        }
        #[doc = "Write proxy for field `TCKSEL`"]
        pub struct TCKSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCKSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TCKSEL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Timeout counter counts at the frequency of the I2C module clock / 64"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TCKSEL_A::_0)
            }
            #[doc = "Timeout counter counts at the frequency of the I2C module clock"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TCKSEL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Second I2C Address Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SIICAEN_A {
            #[doc = "0: I2C address register 2 matching is disabled"]
            _0 = 0,
            #[doc = "1: I2C address register 2 matching is enabled"]
            _1 = 1,
        }
        impl From<SIICAEN_A> for bool {
            #[inline(always)]
            fn from(variant: SIICAEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SIICAEN`"]
        pub type SIICAEN_R = crate::R<bool, SIICAEN_A>;
        impl SIICAEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SIICAEN_A {
                match self.bits {
                    false => SIICAEN_A::_0,
                    true => SIICAEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SIICAEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SIICAEN_A::_1
            }
        }
        #[doc = "Write proxy for field `SIICAEN`"]
        pub struct SIICAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SIICAEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SIICAEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "I2C address register 2 matching is disabled"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SIICAEN_A::_0)
            }
            #[doc = "I2C address register 2 matching is enabled"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SIICAEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "SMBus Alert Response Address Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ALERTEN_A {
            #[doc = "0: SMBus alert response address matching is disabled"]
            _0 = 0,
            #[doc = "1: SMBus alert response address matching is enabled"]
            _1 = 1,
        }
        impl From<ALERTEN_A> for bool {
            #[inline(always)]
            fn from(variant: ALERTEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ALERTEN`"]
        pub type ALERTEN_R = crate::R<bool, ALERTEN_A>;
        impl ALERTEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ALERTEN_A {
                match self.bits {
                    false => ALERTEN_A::_0,
                    true => ALERTEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ALERTEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ALERTEN_A::_1
            }
        }
        #[doc = "Write proxy for field `ALERTEN`"]
        pub struct ALERTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALERTEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ALERTEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SMBus alert response address matching is disabled"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ALERTEN_A::_0)
            }
            #[doc = "SMBus alert response address matching is enabled"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ALERTEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Fast NACK/ACK Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FACK_A {
            #[doc = "0: An ACK or NACK is sent on the following receiving data byte"]
            _0 = 0,
            #[doc = "1: Writing 0 to TXAK after receiving a data byte generates an ACK. Writing 1 to TXAK after receiving a data byte generates a NACK."]
            _1 = 1,
        }
        impl From<FACK_A> for bool {
            #[inline(always)]
            fn from(variant: FACK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FACK`"]
        pub type FACK_R = crate::R<bool, FACK_A>;
        impl FACK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FACK_A {
                match self.bits {
                    false => FACK_A::_0,
                    true => FACK_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FACK_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FACK_A::_1
            }
        }
        #[doc = "Write proxy for field `FACK`"]
        pub struct FACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FACK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FACK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "An ACK or NACK is sent on the following receiving data byte"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FACK_A::_0)
            }
            #[doc = "Writing 0 to TXAK after receiving a data byte generates an ACK. Writing 1 to TXAK after receiving a data byte generates a NACK."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FACK_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - SHTF2 Interrupt Enable"]
            #[inline(always)]
            pub fn shtf2ie(&self) -> SHTF2IE_R {
                SHTF2IE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - SCL High Timeout Flag 2"]
            #[inline(always)]
            pub fn shtf2(&self) -> SHTF2_R {
                SHTF2_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - SCL High Timeout Flag 1"]
            #[inline(always)]
            pub fn shtf1(&self) -> SHTF1_R {
                SHTF1_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - SCL Low Timeout Flag"]
            #[inline(always)]
            pub fn sltf(&self) -> SLTF_R {
                SLTF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Timeout Counter Clock Select"]
            #[inline(always)]
            pub fn tcksel(&self) -> TCKSEL_R {
                TCKSEL_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Second I2C Address Enable"]
            #[inline(always)]
            pub fn siicaen(&self) -> SIICAEN_R {
                SIICAEN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SMBus Alert Response Address Enable"]
            #[inline(always)]
            pub fn alerten(&self) -> ALERTEN_R {
                ALERTEN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Fast NACK/ACK Enable"]
            #[inline(always)]
            pub fn fack(&self) -> FACK_R {
                FACK_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - SHTF2 Interrupt Enable"]
            #[inline(always)]
            pub fn shtf2ie(&mut self) -> SHTF2IE_W {
                SHTF2IE_W { w: self }
            }
            #[doc = "Bit 1 - SCL High Timeout Flag 2"]
            #[inline(always)]
            pub fn shtf2(&mut self) -> SHTF2_W {
                SHTF2_W { w: self }
            }
            #[doc = "Bit 3 - SCL Low Timeout Flag"]
            #[inline(always)]
            pub fn sltf(&mut self) -> SLTF_W {
                SLTF_W { w: self }
            }
            #[doc = "Bit 4 - Timeout Counter Clock Select"]
            #[inline(always)]
            pub fn tcksel(&mut self) -> TCKSEL_W {
                TCKSEL_W { w: self }
            }
            #[doc = "Bit 5 - Second I2C Address Enable"]
            #[inline(always)]
            pub fn siicaen(&mut self) -> SIICAEN_W {
                SIICAEN_W { w: self }
            }
            #[doc = "Bit 6 - SMBus Alert Response Address Enable"]
            #[inline(always)]
            pub fn alerten(&mut self) -> ALERTEN_W {
                ALERTEN_W { w: self }
            }
            #[doc = "Bit 7 - Fast NACK/ACK Enable"]
            #[inline(always)]
            pub fn fack(&mut self) -> FACK_W {
                FACK_W { w: self }
            }
        }
    }
    #[doc = "I2C Address Register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [a2](a2) module"]
    pub type A2 = crate::Reg<u8, _A2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _A2;
    #[doc = "`read()` method returns [a2::R](a2::R) reader structure"]
    impl crate::Readable for A2 {}
    #[doc = "`write(|w| ..)` method takes [a2::W](a2::W) writer structure"]
    impl crate::Writable for A2 {}
    #[doc = "I2C Address Register 2"]
    pub mod a2 {
        #[doc = "Reader of register A2"]
        pub type R = crate::R<u8, super::A2>;
        #[doc = "Writer for register A2"]
        pub type W = crate::W<u8, super::A2>;
        #[doc = "Register A2 `reset()`'s with value 0xc2"]
        impl crate::ResetValue for super::A2 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xc2
            }
        }
        #[doc = "Reader of field `SAD`"]
        pub type SAD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SAD`"]
        pub struct SAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SAD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 1)) | (((value as u8) & 0x7f) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 1:7 - SMBus Address"]
            #[inline(always)]
            pub fn sad(&self) -> SAD_R {
                SAD_R::new(((self.bits >> 1) & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 1:7 - SMBus Address"]
            #[inline(always)]
            pub fn sad(&mut self) -> SAD_W {
                SAD_W { w: self }
            }
        }
    }
    #[doc = "I2C SCL Low Timeout Register High\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [slth](slth) module"]
    pub type SLTH = crate::Reg<u8, _SLTH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SLTH;
    #[doc = "`read()` method returns [slth::R](slth::R) reader structure"]
    impl crate::Readable for SLTH {}
    #[doc = "`write(|w| ..)` method takes [slth::W](slth::W) writer structure"]
    impl crate::Writable for SLTH {}
    #[doc = "I2C SCL Low Timeout Register High"]
    pub mod slth {
        #[doc = "Reader of register SLTH"]
        pub type R = crate::R<u8, super::SLTH>;
        #[doc = "Writer for register SLTH"]
        pub type W = crate::W<u8, super::SLTH>;
        #[doc = "Register SLTH `reset()`'s with value 0"]
        impl crate::ResetValue for super::SLTH {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SSLT`"]
        pub type SSLT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SSLT`"]
        pub struct SSLT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSLT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Most significant byte of SCL low timeout value that determines the timeout period of SCL low."]
            #[inline(always)]
            pub fn sslt(&self) -> SSLT_R {
                SSLT_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Most significant byte of SCL low timeout value that determines the timeout period of SCL low."]
            #[inline(always)]
            pub fn sslt(&mut self) -> SSLT_W {
                SSLT_W { w: self }
            }
        }
    }
    #[doc = "I2C SCL Low Timeout Register Low\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sltl](sltl) module"]
    pub type SLTL = crate::Reg<u8, _SLTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SLTL;
    #[doc = "`read()` method returns [sltl::R](sltl::R) reader structure"]
    impl crate::Readable for SLTL {}
    #[doc = "`write(|w| ..)` method takes [sltl::W](sltl::W) writer structure"]
    impl crate::Writable for SLTL {}
    #[doc = "I2C SCL Low Timeout Register Low"]
    pub mod sltl {
        #[doc = "Reader of register SLTL"]
        pub type R = crate::R<u8, super::SLTL>;
        #[doc = "Writer for register SLTL"]
        pub type W = crate::W<u8, super::SLTL>;
        #[doc = "Register SLTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::SLTL {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SSLT`"]
        pub type SSLT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SSLT`"]
        pub struct SSLT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSLT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Least significant byte of SCL low timeout value that determines the timeout period of SCL low."]
            #[inline(always)]
            pub fn sslt(&self) -> SSLT_R {
                SSLT_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Least significant byte of SCL low timeout value that determines the timeout period of SCL low."]
            #[inline(always)]
            pub fn sslt(&mut self) -> SSLT_W {
                SSLT_W { w: self }
            }
        }
    }
}
#[doc = "Universal Asynchronous Receiver/Transmitter (UART)"]
pub struct UART0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART0 {}
impl UART0 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        0x4006_a000 as *const _
    }
}
impl Deref for UART0 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*UART0::ptr() }
    }
}
#[doc = "Universal Asynchronous Receiver/Transmitter (UART)"]
pub mod uart0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - UART Baud Rate Register: High"]
        pub bdh: BDH,
        #[doc = "0x01 - UART Baud Rate Register: Low"]
        pub bdl: BDL,
        #[doc = "0x02 - UART Control Register 1"]
        pub c1: C1,
        #[doc = "0x03 - UART Control Register 2"]
        pub c2: C2,
        #[doc = "0x04 - UART Status Register 1"]
        pub s1: S1,
        #[doc = "0x05 - UART Status Register 2"]
        pub s2: S2,
        #[doc = "0x06 - UART Control Register 3"]
        pub c3: C3,
        #[doc = "0x07 - UART Data Register"]
        pub d: D,
    }
    #[doc = "UART Baud Rate Register: High\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bdh](bdh) module"]
    pub type BDH = crate::Reg<u8, _BDH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BDH;
    #[doc = "`read()` method returns [bdh::R](bdh::R) reader structure"]
    impl crate::Readable for BDH {}
    #[doc = "`write(|w| ..)` method takes [bdh::W](bdh::W) writer structure"]
    impl crate::Writable for BDH {}
    #[doc = "UART Baud Rate Register: High"]
    pub mod bdh {
        #[doc = "Reader of register BDH"]
        pub type R = crate::R<u8, super::BDH>;
        #[doc = "Writer for register BDH"]
        pub type W = crate::W<u8, super::BDH>;
        #[doc = "Register BDH `reset()`'s with value 0"]
        impl crate::ResetValue for super::BDH {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SBR`"]
        pub type SBR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SBR`"]
        pub struct SBR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SBR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u8) & 0x1f);
                self.w
            }
        }
        #[doc = "Stop Bit Number Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SBNS_A {
            #[doc = "0: One stop bit."]
            _0 = 0,
            #[doc = "1: Two stop bit."]
            _1 = 1,
        }
        impl From<SBNS_A> for bool {
            #[inline(always)]
            fn from(variant: SBNS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SBNS`"]
        pub type SBNS_R = crate::R<bool, SBNS_A>;
        impl SBNS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SBNS_A {
                match self.bits {
                    false => SBNS_A::_0,
                    true => SBNS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SBNS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SBNS_A::_1
            }
        }
        #[doc = "Write proxy for field `SBNS`"]
        pub struct SBNS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SBNS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SBNS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "One stop bit."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SBNS_A::_0)
            }
            #[doc = "Two stop bit."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SBNS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "RxD Input Active Edge Interrupt Enable (for RXEDGIF)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXEDGIE_A {
            #[doc = "0: Hardware interrupts from UART_S2\\[RXEDGIF\\]
disabled (use polling)."]
            _0 = 0,
            #[doc = "1: Hardware interrupt requested when UART_S2\\[RXEDGIF\\]
flag is 1."]
            _1 = 1,
        }
        impl From<RXEDGIE_A> for bool {
            #[inline(always)]
            fn from(variant: RXEDGIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXEDGIE`"]
        pub type RXEDGIE_R = crate::R<bool, RXEDGIE_A>;
        impl RXEDGIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RXEDGIE_A {
                match self.bits {
                    false => RXEDGIE_A::_0,
                    true => RXEDGIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RXEDGIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RXEDGIE_A::_1
            }
        }
        #[doc = "Write proxy for field `RXEDGIE`"]
        pub struct RXEDGIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXEDGIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RXEDGIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Hardware interrupts from UART_S2\\[RXEDGIF\\]
disabled (use polling)."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RXEDGIE_A::_0)
            }
            #[doc = "Hardware interrupt requested when UART_S2\\[RXEDGIF\\]
flag is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RXEDGIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "LIN Break Detect Interrupt Enable (for LBKDIF)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LBKDIE_A {
            #[doc = "0: Hardware interrupts from UART_S2\\[LBKDIF\\]
disabled (use polling)."]
            _0 = 0,
            #[doc = "1: Hardware interrupt requested when UART_S2\\[LBKDIF\\]
flag is 1."]
            _1 = 1,
        }
        impl From<LBKDIE_A> for bool {
            #[inline(always)]
            fn from(variant: LBKDIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LBKDIE`"]
        pub type LBKDIE_R = crate::R<bool, LBKDIE_A>;
        impl LBKDIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LBKDIE_A {
                match self.bits {
                    false => LBKDIE_A::_0,
                    true => LBKDIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LBKDIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LBKDIE_A::_1
            }
        }
        #[doc = "Write proxy for field `LBKDIE`"]
        pub struct LBKDIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBKDIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LBKDIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Hardware interrupts from UART_S2\\[LBKDIF\\]
disabled (use polling)."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(LBKDIE_A::_0)
            }
            #[doc = "Hardware interrupt requested when UART_S2\\[LBKDIF\\]
flag is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(LBKDIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:4 - Baud Rate Modulo Divisor."]
            #[inline(always)]
            pub fn sbr(&self) -> SBR_R {
                SBR_R::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bit 5 - Stop Bit Number Select"]
            #[inline(always)]
            pub fn sbns(&self) -> SBNS_R {
                SBNS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RxD Input Active Edge Interrupt Enable (for RXEDGIF)"]
            #[inline(always)]
            pub fn rxedgie(&self) -> RXEDGIE_R {
                RXEDGIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - LIN Break Detect Interrupt Enable (for LBKDIF)"]
            #[inline(always)]
            pub fn lbkdie(&self) -> LBKDIE_R {
                LBKDIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - Baud Rate Modulo Divisor."]
            #[inline(always)]
            pub fn sbr(&mut self) -> SBR_W {
                SBR_W { w: self }
            }
            #[doc = "Bit 5 - Stop Bit Number Select"]
            #[inline(always)]
            pub fn sbns(&mut self) -> SBNS_W {
                SBNS_W { w: self }
            }
            #[doc = "Bit 6 - RxD Input Active Edge Interrupt Enable (for RXEDGIF)"]
            #[inline(always)]
            pub fn rxedgie(&mut self) -> RXEDGIE_W {
                RXEDGIE_W { w: self }
            }
            #[doc = "Bit 7 - LIN Break Detect Interrupt Enable (for LBKDIF)"]
            #[inline(always)]
            pub fn lbkdie(&mut self) -> LBKDIE_W {
                LBKDIE_W { w: self }
            }
        }
    }
    #[doc = "UART Baud Rate Register: Low\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bdl](bdl) module"]
    pub type BDL = crate::Reg<u8, _BDL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BDL;
    #[doc = "`read()` method returns [bdl::R](bdl::R) reader structure"]
    impl crate::Readable for BDL {}
    #[doc = "`write(|w| ..)` method takes [bdl::W](bdl::W) writer structure"]
    impl crate::Writable for BDL {}
    #[doc = "UART Baud Rate Register: Low"]
    pub mod bdl {
        #[doc = "Reader of register BDL"]
        pub type R = crate::R<u8, super::BDL>;
        #[doc = "Writer for register BDL"]
        pub type W = crate::W<u8, super::BDL>;
        #[doc = "Register BDL `reset()`'s with value 0x04"]
        impl crate::ResetValue for super::BDL {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x04
            }
        }
        #[doc = "Reader of field `SBR`"]
        pub type SBR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SBR`"]
        pub struct SBR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SBR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Baud Rate Modulo Divisor"]
            #[inline(always)]
            pub fn sbr(&self) -> SBR_R {
                SBR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Baud Rate Modulo Divisor"]
            #[inline(always)]
            pub fn sbr(&mut self) -> SBR_W {
                SBR_W { w: self }
            }
        }
    }
    #[doc = "UART Control Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c1](c1) module"]
    pub type C1 = crate::Reg<u8, _C1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C1;
    #[doc = "`read()` method returns [c1::R](c1::R) reader structure"]
    impl crate::Readable for C1 {}
    #[doc = "`write(|w| ..)` method takes [c1::W](c1::W) writer structure"]
    impl crate::Writable for C1 {}
    #[doc = "UART Control Register 1"]
    pub mod c1 {
        #[doc = "Reader of register C1"]
        pub type R = crate::R<u8, super::C1>;
        #[doc = "Writer for register C1"]
        pub type W = crate::W<u8, super::C1>;
        #[doc = "Register C1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::C1 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Parity Type\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PT_A {
            #[doc = "0: Even parity."]
            _0 = 0,
            #[doc = "1: Odd parity."]
            _1 = 1,
        }
        impl From<PT_A> for bool {
            #[inline(always)]
            fn from(variant: PT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PT`"]
        pub type PT_R = crate::R<bool, PT_A>;
        impl PT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PT_A {
                match self.bits {
                    false => PT_A::_0,
                    true => PT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PT_A::_1
            }
        }
        #[doc = "Write proxy for field `PT`"]
        pub struct PT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Even parity."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PT_A::_0)
            }
            #[doc = "Odd parity."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PT_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        #[doc = "Parity Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PE_A {
            #[doc = "0: No hardware parity generation or checking."]
            _0 = 0,
            #[doc = "1: Parity enabled."]
            _1 = 1,
        }
        impl From<PE_A> for bool {
            #[inline(always)]
            fn from(variant: PE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PE`"]
        pub type PE_R = crate::R<bool, PE_A>;
        impl PE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PE_A {
                match self.bits {
                    false => PE_A::_0,
                    true => PE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PE_A::_1
            }
        }
        #[doc = "Write proxy for field `PE`"]
        pub struct PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No hardware parity generation or checking."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PE_A::_0)
            }
            #[doc = "Parity enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Idle Line Type Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ILT_A {
            #[doc = "0: Idle character bit count starts after start bit."]
            _0 = 0,
            #[doc = "1: Idle character bit count starts after stop bit."]
            _1 = 1,
        }
        impl From<ILT_A> for bool {
            #[inline(always)]
            fn from(variant: ILT_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ILT`"]
        pub type ILT_R = crate::R<bool, ILT_A>;
        impl ILT_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ILT_A {
                match self.bits {
                    false => ILT_A::_0,
                    true => ILT_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ILT_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ILT_A::_1
            }
        }
        #[doc = "Write proxy for field `ILT`"]
        pub struct ILT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ILT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ILT_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Idle character bit count starts after start bit."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ILT_A::_0)
            }
            #[doc = "Idle character bit count starts after stop bit."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ILT_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Receiver Wakeup Method Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum WAKE_A {
            #[doc = "0: Idle-line wake-up."]
            _0 = 0,
            #[doc = "1: Address-mark wake-up."]
            _1 = 1,
        }
        impl From<WAKE_A> for bool {
            #[inline(always)]
            fn from(variant: WAKE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `WAKE`"]
        pub type WAKE_R = crate::R<bool, WAKE_A>;
        impl WAKE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> WAKE_A {
                match self.bits {
                    false => WAKE_A::_0,
                    true => WAKE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == WAKE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == WAKE_A::_1
            }
        }
        #[doc = "Write proxy for field `WAKE`"]
        pub struct WAKE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAKE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WAKE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Idle-line wake-up."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(WAKE_A::_0)
            }
            #[doc = "Address-mark wake-up."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(WAKE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u8) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "9-Bit or 8-Bit Mode Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum M_A {
            #[doc = "0: Normal - start + 8 data bits (lsb first) + stop."]
            _0 = 0,
            #[doc = "1: Receiver and transmitter use 9-bit data characters start + 8 data bits (lsb first) + 9th data bit + stop."]
            _1 = 1,
        }
        impl From<M_A> for bool {
            #[inline(always)]
            fn from(variant: M_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `M`"]
        pub type M_R = crate::R<bool, M_A>;
        impl M_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> M_A {
                match self.bits {
                    false => M_A::_0,
                    true => M_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == M_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == M_A::_1
            }
        }
        #[doc = "Write proxy for field `M`"]
        pub struct M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> M_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: M_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Normal - start + 8 data bits (lsb first) + stop."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(M_A::_0)
            }
            #[doc = "Receiver and transmitter use 9-bit data characters start + 8 data bits (lsb first) + 9th data bit + stop."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(M_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Receiver Source Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RSRC_A {
            #[doc = "0: Provided LOOPS is set, RSRC is cleared, selects internal loop back mode and the UART does not use the RxD pins."]
            _0 = 0,
            #[doc = "1: Single-wire UART mode where the TxD pin is connected to the transmitter output and receiver input."]
            _1 = 1,
        }
        impl From<RSRC_A> for bool {
            #[inline(always)]
            fn from(variant: RSRC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RSRC`"]
        pub type RSRC_R = crate::R<bool, RSRC_A>;
        impl RSRC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RSRC_A {
                match self.bits {
                    false => RSRC_A::_0,
                    true => RSRC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RSRC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RSRC_A::_1
            }
        }
        #[doc = "Write proxy for field `RSRC`"]
        pub struct RSRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSRC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RSRC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Provided LOOPS is set, RSRC is cleared, selects internal loop back mode and the UART does not use the RxD pins."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RSRC_A::_0)
            }
            #[doc = "Single-wire UART mode where the TxD pin is connected to the transmitter output and receiver input."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RSRC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "UART Stops in Wait Mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum UARTSWAI_A {
            #[doc = "0: UART clocks continue to run in Wait mode so the UART can be the source of an interrupt that wakes up the CPU."]
            _0 = 0,
            #[doc = "1: UART clocks freeze while CPU is in Wait mode."]
            _1 = 1,
        }
        impl From<UARTSWAI_A> for bool {
            #[inline(always)]
            fn from(variant: UARTSWAI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `UARTSWAI`"]
        pub type UARTSWAI_R = crate::R<bool, UARTSWAI_A>;
        impl UARTSWAI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> UARTSWAI_A {
                match self.bits {
                    false => UARTSWAI_A::_0,
                    true => UARTSWAI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == UARTSWAI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == UARTSWAI_A::_1
            }
        }
        #[doc = "Write proxy for field `UARTSWAI`"]
        pub struct UARTSWAI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UARTSWAI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: UARTSWAI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "UART clocks continue to run in Wait mode so the UART can be the source of an interrupt that wakes up the CPU."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(UARTSWAI_A::_0)
            }
            #[doc = "UART clocks freeze while CPU is in Wait mode."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(UARTSWAI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Loop Mode Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LOOPS_A {
            #[doc = "0: Normal operation - RxD and TxD use separate pins."]
            _0 = 0,
            #[doc = "1: Loop mode or single-wire mode where transmitter outputs are internally connected to receiver input. (See RSRC bit.) RxD pin is not used by UART."]
            _1 = 1,
        }
        impl From<LOOPS_A> for bool {
            #[inline(always)]
            fn from(variant: LOOPS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LOOPS`"]
        pub type LOOPS_R = crate::R<bool, LOOPS_A>;
        impl LOOPS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LOOPS_A {
                match self.bits {
                    false => LOOPS_A::_0,
                    true => LOOPS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LOOPS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LOOPS_A::_1
            }
        }
        #[doc = "Write proxy for field `LOOPS`"]
        pub struct LOOPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOOPS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LOOPS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Normal operation - RxD and TxD use separate pins."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(LOOPS_A::_0)
            }
            #[doc = "Loop mode or single-wire mode where transmitter outputs are internally connected to receiver input. (See RSRC bit.) RxD pin is not used by UART."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(LOOPS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Parity Type"]
            #[inline(always)]
            pub fn pt(&self) -> PT_R {
                PT_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Parity Enable"]
            #[inline(always)]
            pub fn pe(&self) -> PE_R {
                PE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Idle Line Type Select"]
            #[inline(always)]
            pub fn ilt(&self) -> ILT_R {
                ILT_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Receiver Wakeup Method Select"]
            #[inline(always)]
            pub fn wake(&self) -> WAKE_R {
                WAKE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - 9-Bit or 8-Bit Mode Select"]
            #[inline(always)]
            pub fn m(&self) -> M_R {
                M_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Receiver Source Select"]
            #[inline(always)]
            pub fn rsrc(&self) -> RSRC_R {
                RSRC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - UART Stops in Wait Mode"]
            #[inline(always)]
            pub fn uartswai(&self) -> UARTSWAI_R {
                UARTSWAI_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Loop Mode Select"]
            #[inline(always)]
            pub fn loops(&self) -> LOOPS_R {
                LOOPS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Parity Type"]
            #[inline(always)]
            pub fn pt(&mut self) -> PT_W {
                PT_W { w: self }
            }
            #[doc = "Bit 1 - Parity Enable"]
            #[inline(always)]
            pub fn pe(&mut self) -> PE_W {
                PE_W { w: self }
            }
            #[doc = "Bit 2 - Idle Line Type Select"]
            #[inline(always)]
            pub fn ilt(&mut self) -> ILT_W {
                ILT_W { w: self }
            }
            #[doc = "Bit 3 - Receiver Wakeup Method Select"]
            #[inline(always)]
            pub fn wake(&mut self) -> WAKE_W {
                WAKE_W { w: self }
            }
            #[doc = "Bit 4 - 9-Bit or 8-Bit Mode Select"]
            #[inline(always)]
            pub fn m(&mut self) -> M_W {
                M_W { w: self }
            }
            #[doc = "Bit 5 - Receiver Source Select"]
            #[inline(always)]
            pub fn rsrc(&mut self) -> RSRC_W {
                RSRC_W { w: self }
            }
            #[doc = "Bit 6 - UART Stops in Wait Mode"]
            #[inline(always)]
            pub fn uartswai(&mut self) -> UARTSWAI_W {
                UARTSWAI_W { w: self }
            }
            #[doc = "Bit 7 - Loop Mode Select"]
            #[inline(always)]
            pub fn loops(&mut self) -> LOOPS_W {
                LOOPS_W { w: self }
            }
        }
    }
    #[doc = "UART Control Register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c2](c2) module"]
    pub type C2 = crate::Reg<u8, _C2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C2;
    #[doc = "`read()` method returns [c2::R](c2::R) reader structure"]
    impl crate::Readable for C2 {}
    #[doc = "`write(|w| ..)` method takes [c2::W](c2::W) writer structure"]
    impl crate::Writable for C2 {}
    #[doc = "UART Control Register 2"]
    pub mod c2 {
        #[doc = "Reader of register C2"]
        pub type R = crate::R<u8, super::C2>;
        #[doc = "Writer for register C2"]
        pub type W = crate::W<u8, super::C2>;
        #[doc = "Register C2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::C2 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Send Break\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SBK_A {
            #[doc = "0: Normal transmitter operation."]
            _0 = 0,
            #[doc = "1: Queue break character(s) to be sent."]
            _1 = 1,
        }
        impl From<SBK_A> for bool {
            #[inline(always)]
            fn from(variant: SBK_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SBK`"]
        pub type SBK_R = crate::R<bool, SBK_A>;
        impl SBK_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SBK_A {
                match self.bits {
                    false => SBK_A::_0,
                    true => SBK_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SBK_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SBK_A::_1
            }
        }
        #[doc = "Write proxy for field `SBK`"]
        pub struct SBK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SBK_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SBK_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Normal transmitter operation."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SBK_A::_0)
            }
            #[doc = "Queue break character(s) to be sent."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SBK_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        #[doc = "Receiver Wakeup Control\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RWU_A {
            #[doc = "0: Normal UART receiver operation."]
            _0 = 0,
            #[doc = "1: UART receiver in standby waiting for wake-up condition."]
            _1 = 1,
        }
        impl From<RWU_A> for bool {
            #[inline(always)]
            fn from(variant: RWU_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RWU`"]
        pub type RWU_R = crate::R<bool, RWU_A>;
        impl RWU_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RWU_A {
                match self.bits {
                    false => RWU_A::_0,
                    true => RWU_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RWU_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RWU_A::_1
            }
        }
        #[doc = "Write proxy for field `RWU`"]
        pub struct RWU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RWU_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RWU_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Normal UART receiver operation."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RWU_A::_0)
            }
            #[doc = "UART receiver in standby waiting for wake-up condition."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RWU_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Receiver Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RE_A {
            #[doc = "0: Receiver off."]
            _0 = 0,
            #[doc = "1: Receiver on."]
            _1 = 1,
        }
        impl From<RE_A> for bool {
            #[inline(always)]
            fn from(variant: RE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RE`"]
        pub type RE_R = crate::R<bool, RE_A>;
        impl RE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RE_A {
                match self.bits {
                    false => RE_A::_0,
                    true => RE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RE_A::_1
            }
        }
        #[doc = "Write proxy for field `RE`"]
        pub struct RE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Receiver off."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RE_A::_0)
            }
            #[doc = "Receiver on."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Transmitter Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TE_A {
            #[doc = "0: Transmitter off."]
            _0 = 0,
            #[doc = "1: Transmitter on."]
            _1 = 1,
        }
        impl From<TE_A> for bool {
            #[inline(always)]
            fn from(variant: TE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TE`"]
        pub type TE_R = crate::R<bool, TE_A>;
        impl TE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TE_A {
                match self.bits {
                    false => TE_A::_0,
                    true => TE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TE_A::_1
            }
        }
        #[doc = "Write proxy for field `TE`"]
        pub struct TE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Transmitter off."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TE_A::_0)
            }
            #[doc = "Transmitter on."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u8) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Idle Line Interrupt Enable for IDLE\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ILIE_A {
            #[doc = "0: Hardware interrupts from S1\\[IDLE\\]
disabled; use polling."]
            _0 = 0,
            #[doc = "1: Hardware interrupt requested when S1\\[IDLE\\]
flag is 1."]
            _1 = 1,
        }
        impl From<ILIE_A> for bool {
            #[inline(always)]
            fn from(variant: ILIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ILIE`"]
        pub type ILIE_R = crate::R<bool, ILIE_A>;
        impl ILIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ILIE_A {
                match self.bits {
                    false => ILIE_A::_0,
                    true => ILIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ILIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ILIE_A::_1
            }
        }
        #[doc = "Write proxy for field `ILIE`"]
        pub struct ILIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ILIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ILIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Hardware interrupts from S1\\[IDLE\\]
disabled; use polling."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ILIE_A::_0)
            }
            #[doc = "Hardware interrupt requested when S1\\[IDLE\\]
flag is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ILIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Receiver Interrupt Enable for RDRF\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RIE_A {
            #[doc = "0: Hardware interrupts from S1\\[RDRF\\]
disabled; use polling."]
            _0 = 0,
            #[doc = "1: Hardware interrupt requested when S1\\[RDRF\\]
flag is 1."]
            _1 = 1,
        }
        impl From<RIE_A> for bool {
            #[inline(always)]
            fn from(variant: RIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RIE`"]
        pub type RIE_R = crate::R<bool, RIE_A>;
        impl RIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RIE_A {
                match self.bits {
                    false => RIE_A::_0,
                    true => RIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RIE_A::_1
            }
        }
        #[doc = "Write proxy for field `RIE`"]
        pub struct RIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Hardware interrupts from S1\\[RDRF\\]
disabled; use polling."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RIE_A::_0)
            }
            #[doc = "Hardware interrupt requested when S1\\[RDRF\\]
flag is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Transmission Complete Interrupt Enable for TC\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TCIE_A {
            #[doc = "0: Hardware interrupts from TC disabled; use polling."]
            _0 = 0,
            #[doc = "1: Hardware interrupt requested when TC flag is 1."]
            _1 = 1,
        }
        impl From<TCIE_A> for bool {
            #[inline(always)]
            fn from(variant: TCIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TCIE`"]
        pub type TCIE_R = crate::R<bool, TCIE_A>;
        impl TCIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TCIE_A {
                match self.bits {
                    false => TCIE_A::_0,
                    true => TCIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TCIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TCIE_A::_1
            }
        }
        #[doc = "Write proxy for field `TCIE`"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TCIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Hardware interrupts from TC disabled; use polling."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TCIE_A::_0)
            }
            #[doc = "Hardware interrupt requested when TC flag is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TCIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Transmit Interrupt Enable for TDRE\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TIE_A {
            #[doc = "0: Hardware interrupts from TDRE disabled; use polling."]
            _0 = 0,
            #[doc = "1: Hardware interrupt requested when TDRE flag is 1."]
            _1 = 1,
        }
        impl From<TIE_A> for bool {
            #[inline(always)]
            fn from(variant: TIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TIE`"]
        pub type TIE_R = crate::R<bool, TIE_A>;
        impl TIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TIE_A {
                match self.bits {
                    false => TIE_A::_0,
                    true => TIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TIE_A::_1
            }
        }
        #[doc = "Write proxy for field `TIE`"]
        pub struct TIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Hardware interrupts from TDRE disabled; use polling."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TIE_A::_0)
            }
            #[doc = "Hardware interrupt requested when TDRE flag is 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Send Break"]
            #[inline(always)]
            pub fn sbk(&self) -> SBK_R {
                SBK_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Receiver Wakeup Control"]
            #[inline(always)]
            pub fn rwu(&self) -> RWU_R {
                RWU_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Receiver Enable"]
            #[inline(always)]
            pub fn re(&self) -> RE_R {
                RE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Transmitter Enable"]
            #[inline(always)]
            pub fn te(&self) -> TE_R {
                TE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Idle Line Interrupt Enable for IDLE"]
            #[inline(always)]
            pub fn ilie(&self) -> ILIE_R {
                ILIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Receiver Interrupt Enable for RDRF"]
            #[inline(always)]
            pub fn rie(&self) -> RIE_R {
                RIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Transmission Complete Interrupt Enable for TC"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Transmit Interrupt Enable for TDRE"]
            #[inline(always)]
            pub fn tie(&self) -> TIE_R {
                TIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Send Break"]
            #[inline(always)]
            pub fn sbk(&mut self) -> SBK_W {
                SBK_W { w: self }
            }
            #[doc = "Bit 1 - Receiver Wakeup Control"]
            #[inline(always)]
            pub fn rwu(&mut self) -> RWU_W {
                RWU_W { w: self }
            }
            #[doc = "Bit 2 - Receiver Enable"]
            #[inline(always)]
            pub fn re(&mut self) -> RE_W {
                RE_W { w: self }
            }
            #[doc = "Bit 3 - Transmitter Enable"]
            #[inline(always)]
            pub fn te(&mut self) -> TE_W {
                TE_W { w: self }
            }
            #[doc = "Bit 4 - Idle Line Interrupt Enable for IDLE"]
            #[inline(always)]
            pub fn ilie(&mut self) -> ILIE_W {
                ILIE_W { w: self }
            }
            #[doc = "Bit 5 - Receiver Interrupt Enable for RDRF"]
            #[inline(always)]
            pub fn rie(&mut self) -> RIE_W {
                RIE_W { w: self }
            }
            #[doc = "Bit 6 - Transmission Complete Interrupt Enable for TC"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 7 - Transmit Interrupt Enable for TDRE"]
            #[inline(always)]
            pub fn tie(&mut self) -> TIE_W {
                TIE_W { w: self }
            }
        }
    }
    #[doc = "UART Status Register 1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s1](s1) module"]
    pub type S1 = crate::Reg<u8, _S1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _S1;
    #[doc = "`read()` method returns [s1::R](s1::R) reader structure"]
    impl crate::Readable for S1 {}
    #[doc = "UART Status Register 1"]
    pub mod s1 {
        #[doc = "Reader of register S1"]
        pub type R = crate::R<u8, super::S1>;
        #[doc = "Parity Error Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PF_A {
            #[doc = "0: No parity error."]
            _0 = 0,
            #[doc = "1: Parity error."]
            _1 = 1,
        }
        impl From<PF_A> for bool {
            #[inline(always)]
            fn from(variant: PF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PF`"]
        pub type PF_R = crate::R<bool, PF_A>;
        impl PF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PF_A {
                match self.bits {
                    false => PF_A::_0,
                    true => PF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PF_A::_1
            }
        }
        #[doc = "Framing Error Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FE_A {
            #[doc = "0: No framing error detected. This does not guarantee the framing is correct."]
            _0 = 0,
            #[doc = "1: Framing error."]
            _1 = 1,
        }
        impl From<FE_A> for bool {
            #[inline(always)]
            fn from(variant: FE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FE`"]
        pub type FE_R = crate::R<bool, FE_A>;
        impl FE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FE_A {
                match self.bits {
                    false => FE_A::_0,
                    true => FE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FE_A::_1
            }
        }
        #[doc = "Noise Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum NF_A {
            #[doc = "0: No noise detected."]
            _0 = 0,
            #[doc = "1: Noise detected in the received character in UART_D."]
            _1 = 1,
        }
        impl From<NF_A> for bool {
            #[inline(always)]
            fn from(variant: NF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `NF`"]
        pub type NF_R = crate::R<bool, NF_A>;
        impl NF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> NF_A {
                match self.bits {
                    false => NF_A::_0,
                    true => NF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == NF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == NF_A::_1
            }
        }
        #[doc = "Receiver Overrun Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum OR_A {
            #[doc = "0: No overrun."]
            _0 = 0,
            #[doc = "1: Receive overrun (new UART data lost)."]
            _1 = 1,
        }
        impl From<OR_A> for bool {
            #[inline(always)]
            fn from(variant: OR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `OR`"]
        pub type OR_R = crate::R<bool, OR_A>;
        impl OR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OR_A {
                match self.bits {
                    false => OR_A::_0,
                    true => OR_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == OR_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == OR_A::_1
            }
        }
        #[doc = "Idle Line Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IDLE_A {
            #[doc = "0: No idle line detected."]
            _0 = 0,
            #[doc = "1: Idle line was detected."]
            _1 = 1,
        }
        impl From<IDLE_A> for bool {
            #[inline(always)]
            fn from(variant: IDLE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IDLE`"]
        pub type IDLE_R = crate::R<bool, IDLE_A>;
        impl IDLE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IDLE_A {
                match self.bits {
                    false => IDLE_A::_0,
                    true => IDLE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == IDLE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == IDLE_A::_1
            }
        }
        #[doc = "Receive Data Register Full Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RDRF_A {
            #[doc = "0: Receive data register empty."]
            _0 = 0,
            #[doc = "1: Receive data register full."]
            _1 = 1,
        }
        impl From<RDRF_A> for bool {
            #[inline(always)]
            fn from(variant: RDRF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RDRF`"]
        pub type RDRF_R = crate::R<bool, RDRF_A>;
        impl RDRF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RDRF_A {
                match self.bits {
                    false => RDRF_A::_0,
                    true => RDRF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RDRF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RDRF_A::_1
            }
        }
        #[doc = "Transmission Complete Flag\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TC_A {
            #[doc = "0: Transmitter active (sending data, a preamble, or a break)."]
            _0 = 0,
            #[doc = "1: Transmitter idle (transmission activity complete)."]
            _1 = 1,
        }
        impl From<TC_A> for bool {
            #[inline(always)]
            fn from(variant: TC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TC`"]
        pub type TC_R = crate::R<bool, TC_A>;
        impl TC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TC_A {
                match self.bits {
                    false => TC_A::_0,
                    true => TC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TC_A::_1
            }
        }
        #[doc = "Transmit Data Register Empty Flag\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TDRE_A {
            #[doc = "0: Transmit data register (buffer) full."]
            _0 = 0,
            #[doc = "1: Transmit data register (buffer) empty."]
            _1 = 1,
        }
        impl From<TDRE_A> for bool {
            #[inline(always)]
            fn from(variant: TDRE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TDRE`"]
        pub type TDRE_R = crate::R<bool, TDRE_A>;
        impl TDRE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TDRE_A {
                match self.bits {
                    false => TDRE_A::_0,
                    true => TDRE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TDRE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TDRE_A::_1
            }
        }
        impl R {
            #[doc = "Bit 0 - Parity Error Flag"]
            #[inline(always)]
            pub fn pf(&self) -> PF_R {
                PF_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Framing Error Flag"]
            #[inline(always)]
            pub fn fe(&self) -> FE_R {
                FE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Noise Flag"]
            #[inline(always)]
            pub fn nf(&self) -> NF_R {
                NF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Receiver Overrun Flag"]
            #[inline(always)]
            pub fn or(&self) -> OR_R {
                OR_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Idle Line Flag"]
            #[inline(always)]
            pub fn idle(&self) -> IDLE_R {
                IDLE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Receive Data Register Full Flag"]
            #[inline(always)]
            pub fn rdrf(&self) -> RDRF_R {
                RDRF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Transmission Complete Flag"]
            #[inline(always)]
            pub fn tc(&self) -> TC_R {
                TC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Transmit Data Register Empty Flag"]
            #[inline(always)]
            pub fn tdre(&self) -> TDRE_R {
                TDRE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
    }
    #[doc = "UART Status Register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s2](s2) module"]
    pub type S2 = crate::Reg<u8, _S2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _S2;
    #[doc = "`read()` method returns [s2::R](s2::R) reader structure"]
    impl crate::Readable for S2 {}
    #[doc = "`write(|w| ..)` method takes [s2::W](s2::W) writer structure"]
    impl crate::Writable for S2 {}
    #[doc = "UART Status Register 2"]
    pub mod s2 {
        #[doc = "Reader of register S2"]
        pub type R = crate::R<u8, super::S2>;
        #[doc = "Writer for register S2"]
        pub type W = crate::W<u8, super::S2>;
        #[doc = "Register S2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::S2 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Receiver Active Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RAF_A {
            #[doc = "0: UART receiver idle waiting for a start bit."]
            _0 = 0,
            #[doc = "1: UART receiver active (RxD input not idle)."]
            _1 = 1,
        }
        impl From<RAF_A> for bool {
            #[inline(always)]
            fn from(variant: RAF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RAF`"]
        pub type RAF_R = crate::R<bool, RAF_A>;
        impl RAF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RAF_A {
                match self.bits {
                    false => RAF_A::_0,
                    true => RAF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RAF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RAF_A::_1
            }
        }
        #[doc = "LIN Break Detection Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LBKDE_A {
            #[doc = "0: Break detection is disabled."]
            _0 = 0,
            #[doc = "1: Break detection is enabled (Break character is detected at length 11 bit times (if C1\\[M\\]
= 0, BDH\\[SBNS\\]
= 0) or 12 (if C1\\[M\\]
= 1, BDH\\[SBNS\\]
= 0 or C1\\[M\\]
= 0, BDH\\[SBNS\\]
= 1) or 13 (if C1\\[M\\]
= 1, BDH\\[SBNS\\]
= 1))."]
            _1 = 1,
        }
        impl From<LBKDE_A> for bool {
            #[inline(always)]
            fn from(variant: LBKDE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LBKDE`"]
        pub type LBKDE_R = crate::R<bool, LBKDE_A>;
        impl LBKDE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LBKDE_A {
                match self.bits {
                    false => LBKDE_A::_0,
                    true => LBKDE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LBKDE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LBKDE_A::_1
            }
        }
        #[doc = "Write proxy for field `LBKDE`"]
        pub struct LBKDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBKDE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LBKDE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Break detection is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(LBKDE_A::_0)
            }
            #[doc = "Break detection is enabled (Break character is detected at length 11 bit times (if C1\\[M\\]
= 0, BDH\\[SBNS\\]
= 0) or 12 (if C1\\[M\\]
= 1, BDH\\[SBNS\\]
= 0 or C1\\[M\\]
= 0, BDH\\[SBNS\\]
= 1) or 13 (if C1\\[M\\]
= 1, BDH\\[SBNS\\]
= 1))."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(LBKDE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Break Character Generation Length\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BRK13_A {
            #[doc = "0: Break character is transmitted with length of 10 bit times (if M = 0, SBNS = 0) or 11 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 12 (if M = 1, SBNS = 1)."]
            _0 = 0,
            #[doc = "1: Break character is transmitted with length of 13 bit times (if M = 0, SBNS = 0) or 14 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 15 (if M = 1, SBNS = 1)."]
            _1 = 1,
        }
        impl From<BRK13_A> for bool {
            #[inline(always)]
            fn from(variant: BRK13_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BRK13`"]
        pub type BRK13_R = crate::R<bool, BRK13_A>;
        impl BRK13_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BRK13_A {
                match self.bits {
                    false => BRK13_A::_0,
                    true => BRK13_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == BRK13_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == BRK13_A::_1
            }
        }
        #[doc = "Write proxy for field `BRK13`"]
        pub struct BRK13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BRK13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BRK13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Break character is transmitted with length of 10 bit times (if M = 0, SBNS = 0) or 11 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 12 (if M = 1, SBNS = 1)."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(BRK13_A::_0)
            }
            #[doc = "Break character is transmitted with length of 13 bit times (if M = 0, SBNS = 0) or 14 (if M = 1, SBNS = 0 or M = 0, SBNS = 1) or 15 (if M = 1, SBNS = 1)."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(BRK13_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Receive Wake Up Idle Detect\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RWUID_A {
            #[doc = "0: During receive standby state (RWU = 1), S1\\[IDLE\\]
does not get set upon detection of an idle character."]
            _0 = 0,
            #[doc = "1: During receive standby state (RWU = 1), S1\\[IDLE\\]
gets set upon detection of an idle character."]
            _1 = 1,
        }
        impl From<RWUID_A> for bool {
            #[inline(always)]
            fn from(variant: RWUID_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RWUID`"]
        pub type RWUID_R = crate::R<bool, RWUID_A>;
        impl RWUID_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RWUID_A {
                match self.bits {
                    false => RWUID_A::_0,
                    true => RWUID_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RWUID_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RWUID_A::_1
            }
        }
        #[doc = "Write proxy for field `RWUID`"]
        pub struct RWUID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RWUID_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RWUID_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "During receive standby state (RWU = 1), S1\\[IDLE\\]
does not get set upon detection of an idle character."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RWUID_A::_0)
            }
            #[doc = "During receive standby state (RWU = 1), S1\\[IDLE\\]
gets set upon detection of an idle character."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RWUID_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u8) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Receive Data Inversion\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXINV_A {
            #[doc = "0: Receive data not inverted."]
            _0 = 0,
            #[doc = "1: Receive data inverted."]
            _1 = 1,
        }
        impl From<RXINV_A> for bool {
            #[inline(always)]
            fn from(variant: RXINV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXINV`"]
        pub type RXINV_R = crate::R<bool, RXINV_A>;
        impl RXINV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RXINV_A {
                match self.bits {
                    false => RXINV_A::_0,
                    true => RXINV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RXINV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RXINV_A::_1
            }
        }
        #[doc = "Write proxy for field `RXINV`"]
        pub struct RXINV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXINV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RXINV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Receive data not inverted."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RXINV_A::_0)
            }
            #[doc = "Receive data inverted."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RXINV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "RxD Pin Active Edge Interrupt Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RXEDGIF_A {
            #[doc = "0: No active edge on the receive pin has occurred."]
            _0 = 0,
            #[doc = "1: An active edge on the receive pin has occurred."]
            _1 = 1,
        }
        impl From<RXEDGIF_A> for bool {
            #[inline(always)]
            fn from(variant: RXEDGIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RXEDGIF`"]
        pub type RXEDGIF_R = crate::R<bool, RXEDGIF_A>;
        impl RXEDGIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RXEDGIF_A {
                match self.bits {
                    false => RXEDGIF_A::_0,
                    true => RXEDGIF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == RXEDGIF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == RXEDGIF_A::_1
            }
        }
        #[doc = "Write proxy for field `RXEDGIF`"]
        pub struct RXEDGIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXEDGIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RXEDGIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No active edge on the receive pin has occurred."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(RXEDGIF_A::_0)
            }
            #[doc = "An active edge on the receive pin has occurred."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(RXEDGIF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "LIN Break Detect Interrupt Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LBKDIF_A {
            #[doc = "0: No LIN break character has been detected."]
            _0 = 0,
            #[doc = "1: LIN break character has been detected."]
            _1 = 1,
        }
        impl From<LBKDIF_A> for bool {
            #[inline(always)]
            fn from(variant: LBKDIF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LBKDIF`"]
        pub type LBKDIF_R = crate::R<bool, LBKDIF_A>;
        impl LBKDIF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LBKDIF_A {
                match self.bits {
                    false => LBKDIF_A::_0,
                    true => LBKDIF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LBKDIF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LBKDIF_A::_1
            }
        }
        #[doc = "Write proxy for field `LBKDIF`"]
        pub struct LBKDIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBKDIF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LBKDIF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "No LIN break character has been detected."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(LBKDIF_A::_0)
            }
            #[doc = "LIN break character has been detected."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(LBKDIF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Receiver Active Flag"]
            #[inline(always)]
            pub fn raf(&self) -> RAF_R {
                RAF_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - LIN Break Detection Enable"]
            #[inline(always)]
            pub fn lbkde(&self) -> LBKDE_R {
                LBKDE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Break Character Generation Length"]
            #[inline(always)]
            pub fn brk13(&self) -> BRK13_R {
                BRK13_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Receive Wake Up Idle Detect"]
            #[inline(always)]
            pub fn rwuid(&self) -> RWUID_R {
                RWUID_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Receive Data Inversion"]
            #[inline(always)]
            pub fn rxinv(&self) -> RXINV_R {
                RXINV_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RxD Pin Active Edge Interrupt Flag"]
            #[inline(always)]
            pub fn rxedgif(&self) -> RXEDGIF_R {
                RXEDGIF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - LIN Break Detect Interrupt Flag"]
            #[inline(always)]
            pub fn lbkdif(&self) -> LBKDIF_R {
                LBKDIF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - LIN Break Detection Enable"]
            #[inline(always)]
            pub fn lbkde(&mut self) -> LBKDE_W {
                LBKDE_W { w: self }
            }
            #[doc = "Bit 2 - Break Character Generation Length"]
            #[inline(always)]
            pub fn brk13(&mut self) -> BRK13_W {
                BRK13_W { w: self }
            }
            #[doc = "Bit 3 - Receive Wake Up Idle Detect"]
            #[inline(always)]
            pub fn rwuid(&mut self) -> RWUID_W {
                RWUID_W { w: self }
            }
            #[doc = "Bit 4 - Receive Data Inversion"]
            #[inline(always)]
            pub fn rxinv(&mut self) -> RXINV_W {
                RXINV_W { w: self }
            }
            #[doc = "Bit 6 - RxD Pin Active Edge Interrupt Flag"]
            #[inline(always)]
            pub fn rxedgif(&mut self) -> RXEDGIF_W {
                RXEDGIF_W { w: self }
            }
            #[doc = "Bit 7 - LIN Break Detect Interrupt Flag"]
            #[inline(always)]
            pub fn lbkdif(&mut self) -> LBKDIF_W {
                LBKDIF_W { w: self }
            }
        }
    }
    #[doc = "UART Control Register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c3](c3) module"]
    pub type C3 = crate::Reg<u8, _C3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C3;
    #[doc = "`read()` method returns [c3::R](c3::R) reader structure"]
    impl crate::Readable for C3 {}
    #[doc = "`write(|w| ..)` method takes [c3::W](c3::W) writer structure"]
    impl crate::Writable for C3 {}
    #[doc = "UART Control Register 3"]
    pub mod c3 {
        #[doc = "Reader of register C3"]
        pub type R = crate::R<u8, super::C3>;
        #[doc = "Writer for register C3"]
        pub type W = crate::W<u8, super::C3>;
        #[doc = "Register C3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::C3 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Parity Error Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PEIE_A {
            #[doc = "0: PF interrupts disabled; use polling)."]
            _0 = 0,
            #[doc = "1: Hardware interrupt requested when PF is set."]
            _1 = 1,
        }
        impl From<PEIE_A> for bool {
            #[inline(always)]
            fn from(variant: PEIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PEIE`"]
        pub type PEIE_R = crate::R<bool, PEIE_A>;
        impl PEIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PEIE_A {
                match self.bits {
                    false => PEIE_A::_0,
                    true => PEIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PEIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PEIE_A::_1
            }
        }
        #[doc = "Write proxy for field `PEIE`"]
        pub struct PEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PEIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PEIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "PF interrupts disabled; use polling)."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PEIE_A::_0)
            }
            #[doc = "Hardware interrupt requested when PF is set."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PEIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        #[doc = "Framing Error Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FEIE_A {
            #[doc = "0: FE interrupts disabled; use polling)."]
            _0 = 0,
            #[doc = "1: Hardware interrupt requested when FE is set."]
            _1 = 1,
        }
        impl From<FEIE_A> for bool {
            #[inline(always)]
            fn from(variant: FEIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FEIE`"]
        pub type FEIE_R = crate::R<bool, FEIE_A>;
        impl FEIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FEIE_A {
                match self.bits {
                    false => FEIE_A::_0,
                    true => FEIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == FEIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == FEIE_A::_1
            }
        }
        #[doc = "Write proxy for field `FEIE`"]
        pub struct FEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FEIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "FE interrupts disabled; use polling)."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(FEIE_A::_0)
            }
            #[doc = "Hardware interrupt requested when FE is set."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(FEIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Noise Error Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum NEIE_A {
            #[doc = "0: NF interrupts disabled; use polling)."]
            _0 = 0,
            #[doc = "1: Hardware interrupt requested when NF is set."]
            _1 = 1,
        }
        impl From<NEIE_A> for bool {
            #[inline(always)]
            fn from(variant: NEIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `NEIE`"]
        pub type NEIE_R = crate::R<bool, NEIE_A>;
        impl NEIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> NEIE_A {
                match self.bits {
                    false => NEIE_A::_0,
                    true => NEIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == NEIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == NEIE_A::_1
            }
        }
        #[doc = "Write proxy for field `NEIE`"]
        pub struct NEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NEIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: NEIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "NF interrupts disabled; use polling)."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(NEIE_A::_0)
            }
            #[doc = "Hardware interrupt requested when NF is set."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(NEIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Overrun Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ORIE_A {
            #[doc = "0: OR interrupts disabled; use polling."]
            _0 = 0,
            #[doc = "1: Hardware interrupt requested when OR is set."]
            _1 = 1,
        }
        impl From<ORIE_A> for bool {
            #[inline(always)]
            fn from(variant: ORIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ORIE`"]
        pub type ORIE_R = crate::R<bool, ORIE_A>;
        impl ORIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ORIE_A {
                match self.bits {
                    false => ORIE_A::_0,
                    true => ORIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ORIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ORIE_A::_1
            }
        }
        #[doc = "Write proxy for field `ORIE`"]
        pub struct ORIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ORIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ORIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "OR interrupts disabled; use polling."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ORIE_A::_0)
            }
            #[doc = "Hardware interrupt requested when OR is set."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ORIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u8) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Transmit Data Inversion\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TXINV_A {
            #[doc = "0: Transmit data not inverted."]
            _0 = 0,
            #[doc = "1: Transmit data inverted."]
            _1 = 1,
        }
        impl From<TXINV_A> for bool {
            #[inline(always)]
            fn from(variant: TXINV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TXINV`"]
        pub type TXINV_R = crate::R<bool, TXINV_A>;
        impl TXINV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TXINV_A {
                match self.bits {
                    false => TXINV_A::_0,
                    true => TXINV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TXINV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TXINV_A::_1
            }
        }
        #[doc = "Write proxy for field `TXINV`"]
        pub struct TXINV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXINV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TXINV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Transmit data not inverted."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TXINV_A::_0)
            }
            #[doc = "Transmit data inverted."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TXINV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "TxD Pin Direction in Single-Wire Mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TXDIR_A {
            #[doc = "0: TxD pin is an input in single-wire mode."]
            _0 = 0,
            #[doc = "1: TxD pin is an output in single-wire mode."]
            _1 = 1,
        }
        impl From<TXDIR_A> for bool {
            #[inline(always)]
            fn from(variant: TXDIR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TXDIR`"]
        pub type TXDIR_R = crate::R<bool, TXDIR_A>;
        impl TXDIR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TXDIR_A {
                match self.bits {
                    false => TXDIR_A::_0,
                    true => TXDIR_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == TXDIR_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == TXDIR_A::_1
            }
        }
        #[doc = "Write proxy for field `TXDIR`"]
        pub struct TXDIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXDIR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TXDIR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "TxD pin is an input in single-wire mode."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(TXDIR_A::_0)
            }
            #[doc = "TxD pin is an output in single-wire mode."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(TXDIR_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `T8`"]
        pub type T8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `T8`"]
        pub struct T8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> T8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `R8`"]
        pub type R8_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - Parity Error Interrupt Enable"]
            #[inline(always)]
            pub fn peie(&self) -> PEIE_R {
                PEIE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Framing Error Interrupt Enable"]
            #[inline(always)]
            pub fn feie(&self) -> FEIE_R {
                FEIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Noise Error Interrupt Enable"]
            #[inline(always)]
            pub fn neie(&self) -> NEIE_R {
                NEIE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Overrun Interrupt Enable"]
            #[inline(always)]
            pub fn orie(&self) -> ORIE_R {
                ORIE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Transmit Data Inversion"]
            #[inline(always)]
            pub fn txinv(&self) -> TXINV_R {
                TXINV_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TxD Pin Direction in Single-Wire Mode"]
            #[inline(always)]
            pub fn txdir(&self) -> TXDIR_R {
                TXDIR_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Ninth Data Bit for Transmitter"]
            #[inline(always)]
            pub fn t8(&self) -> T8_R {
                T8_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Ninth Data Bit for Receiver"]
            #[inline(always)]
            pub fn r8(&self) -> R8_R {
                R8_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Parity Error Interrupt Enable"]
            #[inline(always)]
            pub fn peie(&mut self) -> PEIE_W {
                PEIE_W { w: self }
            }
            #[doc = "Bit 1 - Framing Error Interrupt Enable"]
            #[inline(always)]
            pub fn feie(&mut self) -> FEIE_W {
                FEIE_W { w: self }
            }
            #[doc = "Bit 2 - Noise Error Interrupt Enable"]
            #[inline(always)]
            pub fn neie(&mut self) -> NEIE_W {
                NEIE_W { w: self }
            }
            #[doc = "Bit 3 - Overrun Interrupt Enable"]
            #[inline(always)]
            pub fn orie(&mut self) -> ORIE_W {
                ORIE_W { w: self }
            }
            #[doc = "Bit 4 - Transmit Data Inversion"]
            #[inline(always)]
            pub fn txinv(&mut self) -> TXINV_W {
                TXINV_W { w: self }
            }
            #[doc = "Bit 5 - TxD Pin Direction in Single-Wire Mode"]
            #[inline(always)]
            pub fn txdir(&mut self) -> TXDIR_W {
                TXDIR_W { w: self }
            }
            #[doc = "Bit 6 - Ninth Data Bit for Transmitter"]
            #[inline(always)]
            pub fn t8(&mut self) -> T8_W {
                T8_W { w: self }
            }
        }
    }
    #[doc = "UART Data Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [d](d) module"]
    pub type D = crate::Reg<u8, _D>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _D;
    #[doc = "`read()` method returns [d::R](d::R) reader structure"]
    impl crate::Readable for D {}
    #[doc = "`write(|w| ..)` method takes [d::W](d::W) writer structure"]
    impl crate::Writable for D {}
    #[doc = "UART Data Register"]
    pub mod d {
        #[doc = "Reader of register D"]
        pub type R = crate::R<u8, super::D>;
        #[doc = "Writer for register D"]
        pub type W = crate::W<u8, super::D>;
        #[doc = "Register D `reset()`'s with value 0"]
        impl crate::ResetValue for super::D {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `R0T0`"]
        pub type R0T0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `R0T0`"]
        pub struct R0T0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> R0T0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `R1T1`"]
        pub type R1T1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `R1T1`"]
        pub struct R1T1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> R1T1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `R2T2`"]
        pub type R2T2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `R2T2`"]
        pub struct R2T2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> R2T2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `R3T3`"]
        pub type R3T3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `R3T3`"]
        pub struct R3T3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> R3T3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u8) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `R4T4`"]
        pub type R4T4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `R4T4`"]
        pub struct R4T4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> R4T4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `R5T5`"]
        pub type R5T5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `R5T5`"]
        pub struct R5T5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> R5T5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `R6T6`"]
        pub type R6T6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `R6T6`"]
        pub struct R6T6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> R6T6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `R7T7`"]
        pub type R7T7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `R7T7`"]
        pub struct R7T7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> R7T7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Read receive data buffer 0 or write transmit data buffer 0."]
            #[inline(always)]
            pub fn r0t0(&self) -> R0T0_R {
                R0T0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Read receive data buffer 1 or write transmit data buffer 1."]
            #[inline(always)]
            pub fn r1t1(&self) -> R1T1_R {
                R1T1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Read receive data buffer 2 or write transmit data buffer 2."]
            #[inline(always)]
            pub fn r2t2(&self) -> R2T2_R {
                R2T2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Read receive data buffer 3 or write transmit data buffer 3."]
            #[inline(always)]
            pub fn r3t3(&self) -> R3T3_R {
                R3T3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Read receive data buffer 4 or write transmit data buffer 4."]
            #[inline(always)]
            pub fn r4t4(&self) -> R4T4_R {
                R4T4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Read receive data buffer 5 or write transmit data buffer 5."]
            #[inline(always)]
            pub fn r5t5(&self) -> R5T5_R {
                R5T5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Read receive data buffer 6 or write transmit data buffer 6."]
            #[inline(always)]
            pub fn r6t6(&self) -> R6T6_R {
                R6T6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Read receive data buffer 7 or write transmit data buffer 7."]
            #[inline(always)]
            pub fn r7t7(&self) -> R7T7_R {
                R7T7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Read receive data buffer 0 or write transmit data buffer 0."]
            #[inline(always)]
            pub fn r0t0(&mut self) -> R0T0_W {
                R0T0_W { w: self }
            }
            #[doc = "Bit 1 - Read receive data buffer 1 or write transmit data buffer 1."]
            #[inline(always)]
            pub fn r1t1(&mut self) -> R1T1_W {
                R1T1_W { w: self }
            }
            #[doc = "Bit 2 - Read receive data buffer 2 or write transmit data buffer 2."]
            #[inline(always)]
            pub fn r2t2(&mut self) -> R2T2_W {
                R2T2_W { w: self }
            }
            #[doc = "Bit 3 - Read receive data buffer 3 or write transmit data buffer 3."]
            #[inline(always)]
            pub fn r3t3(&mut self) -> R3T3_W {
                R3T3_W { w: self }
            }
            #[doc = "Bit 4 - Read receive data buffer 4 or write transmit data buffer 4."]
            #[inline(always)]
            pub fn r4t4(&mut self) -> R4T4_W {
                R4T4_W { w: self }
            }
            #[doc = "Bit 5 - Read receive data buffer 5 or write transmit data buffer 5."]
            #[inline(always)]
            pub fn r5t5(&mut self) -> R5T5_W {
                R5T5_W { w: self }
            }
            #[doc = "Bit 6 - Read receive data buffer 6 or write transmit data buffer 6."]
            #[inline(always)]
            pub fn r6t6(&mut self) -> R6T6_W {
                R6T6_W { w: self }
            }
            #[doc = "Bit 7 - Read receive data buffer 7 or write transmit data buffer 7."]
            #[inline(always)]
            pub fn r7t7(&mut self) -> R7T7_W {
                R7T7_W { w: self }
            }
        }
    }
}
#[doc = "Analog comparator"]
pub struct ACMP0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ACMP0 {}
impl ACMP0 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const acmp0::RegisterBlock {
        0x4007_3000 as *const _
    }
}
impl Deref for ACMP0 {
    type Target = acmp0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*ACMP0::ptr() }
    }
}
#[doc = "Analog comparator"]
pub mod acmp0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - ACMP Control and Status Register"]
        pub cs: CS,
        #[doc = "0x01 - ACMP Control Register 0"]
        pub c0: C0,
        #[doc = "0x02 - ACMP Control Register 1"]
        pub c1: C1,
        #[doc = "0x03 - ACMP Control Register 2"]
        pub c2: C2,
    }
    #[doc = "ACMP Control and Status Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cs](cs) module"]
    pub type CS = crate::Reg<u8, _CS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CS;
    #[doc = "`read()` method returns [cs::R](cs::R) reader structure"]
    impl crate::Readable for CS {}
    #[doc = "`write(|w| ..)` method takes [cs::W](cs::W) writer structure"]
    impl crate::Writable for CS {}
    #[doc = "ACMP Control and Status Register"]
    pub mod cs {
        #[doc = "Reader of register CS"]
        pub type R = crate::R<u8, super::CS>;
        #[doc = "Writer for register CS"]
        pub type W = crate::W<u8, super::CS>;
        #[doc = "Register CS `reset()`'s with value 0"]
        impl crate::ResetValue for super::CS {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "ACMP MOD\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ACMOD_A {
            #[doc = "0: ACMP interrupt on output falling edge."]
            _00 = 0,
            #[doc = "1: ACMP interrupt on output rising edge."]
            _01 = 1,
            #[doc = "2: ACMP interrupt on output falling edge."]
            _10 = 2,
            #[doc = "3: ACMP interrupt on output falling or rising edge."]
            _11 = 3,
        }
        impl From<ACMOD_A> for u8 {
            #[inline(always)]
            fn from(variant: ACMOD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ACMOD`"]
        pub type ACMOD_R = crate::R<u8, ACMOD_A>;
        impl ACMOD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACMOD_A {
                match self.bits {
                    0 => ACMOD_A::_00,
                    1 => ACMOD_A::_01,
                    2 => ACMOD_A::_10,
                    3 => ACMOD_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == ACMOD_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == ACMOD_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == ACMOD_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == ACMOD_A::_11
            }
        }
        #[doc = "Write proxy for field `ACMOD`"]
        pub struct ACMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACMOD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACMOD_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "ACMP interrupt on output falling edge."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(ACMOD_A::_00)
            }
            #[doc = "ACMP interrupt on output rising edge."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(ACMOD_A::_01)
            }
            #[doc = "ACMP interrupt on output falling edge."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(ACMOD_A::_10)
            }
            #[doc = "ACMP interrupt on output falling or rising edge."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(ACMOD_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u8) & 0x03);
                self.w
            }
        }
        #[doc = "ACMP Output Pin Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ACOPE_A {
            #[doc = "0: ACMP output cannot be placed onto external pin."]
            _0 = 0,
            #[doc = "1: ACMP output can be placed onto external pin."]
            _1 = 1,
        }
        impl From<ACOPE_A> for bool {
            #[inline(always)]
            fn from(variant: ACOPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ACOPE`"]
        pub type ACOPE_R = crate::R<bool, ACOPE_A>;
        impl ACOPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACOPE_A {
                match self.bits {
                    false => ACOPE_A::_0,
                    true => ACOPE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ACOPE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ACOPE_A::_1
            }
        }
        #[doc = "Write proxy for field `ACOPE`"]
        pub struct ACOPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACOPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACOPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ACMP output cannot be placed onto external pin."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ACOPE_A::_0)
            }
            #[doc = "ACMP output can be placed onto external pin."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ACOPE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `ACO`"]
        pub type ACO_R = crate::R<bool, bool>;
        #[doc = "ACMP Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ACIE_A {
            #[doc = "0: Disable the ACMP Interrupt."]
            _0 = 0,
            #[doc = "1: Enable the ACMP Interrupt."]
            _1 = 1,
        }
        impl From<ACIE_A> for bool {
            #[inline(always)]
            fn from(variant: ACIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ACIE`"]
        pub type ACIE_R = crate::R<bool, ACIE_A>;
        impl ACIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACIE_A {
                match self.bits {
                    false => ACIE_A::_0,
                    true => ACIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ACIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ACIE_A::_1
            }
        }
        #[doc = "Write proxy for field `ACIE`"]
        pub struct ACIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Disable the ACMP Interrupt."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ACIE_A::_0)
            }
            #[doc = "Enable the ACMP Interrupt."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ACIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `ACF`"]
        pub type ACF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ACF`"]
        pub struct ACF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Analog Comparator Hysterisis Selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HYST_A {
            #[doc = "0: 20 mV."]
            _0 = 0,
            #[doc = "1: 30 mV."]
            _1 = 1,
        }
        impl From<HYST_A> for bool {
            #[inline(always)]
            fn from(variant: HYST_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HYST`"]
        pub type HYST_R = crate::R<bool, HYST_A>;
        impl HYST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HYST_A {
                match self.bits {
                    false => HYST_A::_0,
                    true => HYST_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HYST_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HYST_A::_1
            }
        }
        #[doc = "Write proxy for field `HYST`"]
        pub struct HYST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HYST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "20 mV."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HYST_A::_0)
            }
            #[doc = "30 mV."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HYST_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Analog Comparator Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ACE_A {
            #[doc = "0: The ACMP is disabled."]
            _0 = 0,
            #[doc = "1: The ACMP is enabled."]
            _1 = 1,
        }
        impl From<ACE_A> for bool {
            #[inline(always)]
            fn from(variant: ACE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ACE`"]
        pub type ACE_R = crate::R<bool, ACE_A>;
        impl ACE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACE_A {
                match self.bits {
                    false => ACE_A::_0,
                    true => ACE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ACE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ACE_A::_1
            }
        }
        #[doc = "Write proxy for field `ACE`"]
        pub struct ACE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The ACMP is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ACE_A::_0)
            }
            #[doc = "The ACMP is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ACE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - ACMP MOD"]
            #[inline(always)]
            pub fn acmod(&self) -> ACMOD_R {
                ACMOD_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 2 - ACMP Output Pin Enable"]
            #[inline(always)]
            pub fn acope(&self) -> ACOPE_R {
                ACOPE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - ACMP Output"]
            #[inline(always)]
            pub fn aco(&self) -> ACO_R {
                ACO_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - ACMP Interrupt Enable"]
            #[inline(always)]
            pub fn acie(&self) -> ACIE_R {
                ACIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - ACMP Interrupt Flag Bit"]
            #[inline(always)]
            pub fn acf(&self) -> ACF_R {
                ACF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Analog Comparator Hysterisis Selection"]
            #[inline(always)]
            pub fn hyst(&self) -> HYST_R {
                HYST_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Analog Comparator Enable"]
            #[inline(always)]
            pub fn ace(&self) -> ACE_R {
                ACE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - ACMP MOD"]
            #[inline(always)]
            pub fn acmod(&mut self) -> ACMOD_W {
                ACMOD_W { w: self }
            }
            #[doc = "Bit 2 - ACMP Output Pin Enable"]
            #[inline(always)]
            pub fn acope(&mut self) -> ACOPE_W {
                ACOPE_W { w: self }
            }
            #[doc = "Bit 4 - ACMP Interrupt Enable"]
            #[inline(always)]
            pub fn acie(&mut self) -> ACIE_W {
                ACIE_W { w: self }
            }
            #[doc = "Bit 5 - ACMP Interrupt Flag Bit"]
            #[inline(always)]
            pub fn acf(&mut self) -> ACF_W {
                ACF_W { w: self }
            }
            #[doc = "Bit 6 - Analog Comparator Hysterisis Selection"]
            #[inline(always)]
            pub fn hyst(&mut self) -> HYST_W {
                HYST_W { w: self }
            }
            #[doc = "Bit 7 - Analog Comparator Enable"]
            #[inline(always)]
            pub fn ace(&mut self) -> ACE_W {
                ACE_W { w: self }
            }
        }
    }
    #[doc = "ACMP Control Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c0](c0) module"]
    pub type C0 = crate::Reg<u8, _C0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C0;
    #[doc = "`read()` method returns [c0::R](c0::R) reader structure"]
    impl crate::Readable for C0 {}
    #[doc = "`write(|w| ..)` method takes [c0::W](c0::W) writer structure"]
    impl crate::Writable for C0 {}
    #[doc = "ACMP Control Register 0"]
    pub mod c0 {
        #[doc = "Reader of register C0"]
        pub type R = crate::R<u8, super::C0>;
        #[doc = "Writer for register C0"]
        pub type W = crate::W<u8, super::C0>;
        #[doc = "Register C0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::C0 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "ACMP Negative Input Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ACNSEL_A {
            #[doc = "0: External reference 0"]
            _00 = 0,
            #[doc = "1: External reference 1"]
            _01 = 1,
            #[doc = "2: External reference 2"]
            _10 = 2,
            #[doc = "3: DAC output"]
            _11 = 3,
        }
        impl From<ACNSEL_A> for u8 {
            #[inline(always)]
            fn from(variant: ACNSEL_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ACNSEL`"]
        pub type ACNSEL_R = crate::R<u8, ACNSEL_A>;
        impl ACNSEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACNSEL_A {
                match self.bits {
                    0 => ACNSEL_A::_00,
                    1 => ACNSEL_A::_01,
                    2 => ACNSEL_A::_10,
                    3 => ACNSEL_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == ACNSEL_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == ACNSEL_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == ACNSEL_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == ACNSEL_A::_11
            }
        }
        #[doc = "Write proxy for field `ACNSEL`"]
        pub struct ACNSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACNSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACNSEL_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "External reference 0"]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(ACNSEL_A::_00)
            }
            #[doc = "External reference 1"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(ACNSEL_A::_01)
            }
            #[doc = "External reference 2"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(ACNSEL_A::_10)
            }
            #[doc = "DAC output"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(ACNSEL_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u8) & 0x03);
                self.w
            }
        }
        #[doc = "ACMP Positive Input Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ACPSEL_A {
            #[doc = "0: External reference 0"]
            _00 = 0,
            #[doc = "1: External reference 1"]
            _01 = 1,
            #[doc = "2: External reference 2"]
            _10 = 2,
            #[doc = "3: DAC output"]
            _11 = 3,
        }
        impl From<ACPSEL_A> for u8 {
            #[inline(always)]
            fn from(variant: ACPSEL_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ACPSEL`"]
        pub type ACPSEL_R = crate::R<u8, ACPSEL_A>;
        impl ACPSEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACPSEL_A {
                match self.bits {
                    0 => ACPSEL_A::_00,
                    1 => ACPSEL_A::_01,
                    2 => ACPSEL_A::_10,
                    3 => ACPSEL_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == ACPSEL_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == ACPSEL_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == ACPSEL_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == ACPSEL_A::_11
            }
        }
        #[doc = "Write proxy for field `ACPSEL`"]
        pub struct ACPSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACPSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACPSEL_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "External reference 0"]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(ACPSEL_A::_00)
            }
            #[doc = "External reference 1"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(ACPSEL_A::_01)
            }
            #[doc = "External reference 2"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(ACPSEL_A::_10)
            }
            #[doc = "DAC output"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(ACPSEL_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u8) & 0x03) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - ACMP Negative Input Select"]
            #[inline(always)]
            pub fn acnsel(&self) -> ACNSEL_R {
                ACNSEL_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - ACMP Positive Input Select"]
            #[inline(always)]
            pub fn acpsel(&self) -> ACPSEL_R {
                ACPSEL_R::new(((self.bits >> 4) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - ACMP Negative Input Select"]
            #[inline(always)]
            pub fn acnsel(&mut self) -> ACNSEL_W {
                ACNSEL_W { w: self }
            }
            #[doc = "Bits 4:5 - ACMP Positive Input Select"]
            #[inline(always)]
            pub fn acpsel(&mut self) -> ACPSEL_W {
                ACPSEL_W { w: self }
            }
        }
    }
    #[doc = "ACMP Control Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c1](c1) module"]
    pub type C1 = crate::Reg<u8, _C1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C1;
    #[doc = "`read()` method returns [c1::R](c1::R) reader structure"]
    impl crate::Readable for C1 {}
    #[doc = "`write(|w| ..)` method takes [c1::W](c1::W) writer structure"]
    impl crate::Writable for C1 {}
    #[doc = "ACMP Control Register 1"]
    pub mod c1 {
        #[doc = "Reader of register C1"]
        pub type R = crate::R<u8, super::C1>;
        #[doc = "Writer for register C1"]
        pub type W = crate::W<u8, super::C1>;
        #[doc = "Register C1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::C1 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DACVAL`"]
        pub type DACVAL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DACVAL`"]
        pub struct DACVAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACVAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u8) & 0x3f);
                self.w
            }
        }
        #[doc = "DAC Reference Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DACREF_A {
            #[doc = "0: The DAC selects Bandgap as the reference."]
            _0 = 0,
            #[doc = "1: The DAC selects VDDA as the reference."]
            _1 = 1,
        }
        impl From<DACREF_A> for bool {
            #[inline(always)]
            fn from(variant: DACREF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DACREF`"]
        pub type DACREF_R = crate::R<bool, DACREF_A>;
        impl DACREF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DACREF_A {
                match self.bits {
                    false => DACREF_A::_0,
                    true => DACREF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DACREF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DACREF_A::_1
            }
        }
        #[doc = "Write proxy for field `DACREF`"]
        pub struct DACREF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACREF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DACREF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The DAC selects Bandgap as the reference."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DACREF_A::_0)
            }
            #[doc = "The DAC selects VDDA as the reference."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DACREF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "DAC Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DACEN_A {
            #[doc = "0: The DAC is disabled."]
            _0 = 0,
            #[doc = "1: The DAC is enabled."]
            _1 = 1,
        }
        impl From<DACEN_A> for bool {
            #[inline(always)]
            fn from(variant: DACEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DACEN`"]
        pub type DACEN_R = crate::R<bool, DACEN_A>;
        impl DACEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DACEN_A {
                match self.bits {
                    false => DACEN_A::_0,
                    true => DACEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DACEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DACEN_A::_1
            }
        }
        #[doc = "Write proxy for field `DACEN`"]
        pub struct DACEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DACEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The DAC is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DACEN_A::_0)
            }
            #[doc = "The DAC is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DACEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - DAC Output Level Selection"]
            #[inline(always)]
            pub fn dacval(&self) -> DACVAL_R {
                DACVAL_R::new((self.bits & 0x3f) as u8)
            }
            #[doc = "Bit 6 - DAC Reference Select"]
            #[inline(always)]
            pub fn dacref(&self) -> DACREF_R {
                DACREF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - DAC Enable"]
            #[inline(always)]
            pub fn dacen(&self) -> DACEN_R {
                DACEN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - DAC Output Level Selection"]
            #[inline(always)]
            pub fn dacval(&mut self) -> DACVAL_W {
                DACVAL_W { w: self }
            }
            #[doc = "Bit 6 - DAC Reference Select"]
            #[inline(always)]
            pub fn dacref(&mut self) -> DACREF_W {
                DACREF_W { w: self }
            }
            #[doc = "Bit 7 - DAC Enable"]
            #[inline(always)]
            pub fn dacen(&mut self) -> DACEN_W {
                DACEN_W { w: self }
            }
        }
    }
    #[doc = "ACMP Control Register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c2](c2) module"]
    pub type C2 = crate::Reg<u8, _C2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C2;
    #[doc = "`read()` method returns [c2::R](c2::R) reader structure"]
    impl crate::Readable for C2 {}
    #[doc = "`write(|w| ..)` method takes [c2::W](c2::W) writer structure"]
    impl crate::Writable for C2 {}
    #[doc = "ACMP Control Register 2"]
    pub mod c2 {
        #[doc = "Reader of register C2"]
        pub type R = crate::R<u8, super::C2>;
        #[doc = "Writer for register C2"]
        pub type W = crate::W<u8, super::C2>;
        #[doc = "Register C2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::C2 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "ACMP Input Pin Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ACIPE_A {
            #[doc = "0: The corresponding external analog input is not allowed."]
            _0 = 0,
            #[doc = "1: The corresponding external analog input is allowed."]
            _1 = 1,
        }
        impl From<ACIPE_A> for u8 {
            #[inline(always)]
            fn from(variant: ACIPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ACIPE`"]
        pub type ACIPE_R = crate::R<u8, ACIPE_A>;
        impl ACIPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, ACIPE_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(ACIPE_A::_0),
                    1 => Val(ACIPE_A::_1),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ACIPE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ACIPE_A::_1
            }
        }
        #[doc = "Write proxy for field `ACIPE`"]
        pub struct ACIPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACIPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACIPE_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "The corresponding external analog input is not allowed."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ACIPE_A::_0)
            }
            #[doc = "The corresponding external analog input is allowed."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ACIPE_A::_1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u8) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - ACMP Input Pin Enable"]
            #[inline(always)]
            pub fn acipe(&self) -> ACIPE_R {
                ACIPE_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - ACMP Input Pin Enable"]
            #[inline(always)]
            pub fn acipe(&mut self) -> ACIPE_W {
                ACIPE_W { w: self }
            }
        }
    }
}
#[doc = "Analog comparator"]
pub struct ACMP1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ACMP1 {}
impl ACMP1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const acmp1::RegisterBlock {
        0x4007_4000 as *const _
    }
}
impl Deref for ACMP1 {
    type Target = acmp1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*ACMP1::ptr() }
    }
}
#[doc = "Analog comparator"]
pub mod acmp1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - ACMP Control and Status Register"]
        pub cs: CS,
        #[doc = "0x01 - ACMP Control Register 0"]
        pub c0: C0,
        #[doc = "0x02 - ACMP Control Register 1"]
        pub c1: C1,
        #[doc = "0x03 - ACMP Control Register 2"]
        pub c2: C2,
    }
    #[doc = "ACMP Control and Status Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cs](cs) module"]
    pub type CS = crate::Reg<u8, _CS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CS;
    #[doc = "`read()` method returns [cs::R](cs::R) reader structure"]
    impl crate::Readable for CS {}
    #[doc = "`write(|w| ..)` method takes [cs::W](cs::W) writer structure"]
    impl crate::Writable for CS {}
    #[doc = "ACMP Control and Status Register"]
    pub mod cs {
        #[doc = "Reader of register CS"]
        pub type R = crate::R<u8, super::CS>;
        #[doc = "Writer for register CS"]
        pub type W = crate::W<u8, super::CS>;
        #[doc = "Register CS `reset()`'s with value 0"]
        impl crate::ResetValue for super::CS {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "ACMP MOD\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ACMOD_A {
            #[doc = "0: ACMP interrupt on output falling edge."]
            _00 = 0,
            #[doc = "1: ACMP interrupt on output rising edge."]
            _01 = 1,
            #[doc = "2: ACMP interrupt on output falling edge."]
            _10 = 2,
            #[doc = "3: ACMP interrupt on output falling or rising edge."]
            _11 = 3,
        }
        impl From<ACMOD_A> for u8 {
            #[inline(always)]
            fn from(variant: ACMOD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ACMOD`"]
        pub type ACMOD_R = crate::R<u8, ACMOD_A>;
        impl ACMOD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACMOD_A {
                match self.bits {
                    0 => ACMOD_A::_00,
                    1 => ACMOD_A::_01,
                    2 => ACMOD_A::_10,
                    3 => ACMOD_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == ACMOD_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == ACMOD_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == ACMOD_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == ACMOD_A::_11
            }
        }
        #[doc = "Write proxy for field `ACMOD`"]
        pub struct ACMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACMOD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACMOD_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "ACMP interrupt on output falling edge."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(ACMOD_A::_00)
            }
            #[doc = "ACMP interrupt on output rising edge."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(ACMOD_A::_01)
            }
            #[doc = "ACMP interrupt on output falling edge."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(ACMOD_A::_10)
            }
            #[doc = "ACMP interrupt on output falling or rising edge."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(ACMOD_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u8) & 0x03);
                self.w
            }
        }
        #[doc = "ACMP Output Pin Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ACOPE_A {
            #[doc = "0: ACMP output cannot be placed onto external pin."]
            _0 = 0,
            #[doc = "1: ACMP output can be placed onto external pin."]
            _1 = 1,
        }
        impl From<ACOPE_A> for bool {
            #[inline(always)]
            fn from(variant: ACOPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ACOPE`"]
        pub type ACOPE_R = crate::R<bool, ACOPE_A>;
        impl ACOPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACOPE_A {
                match self.bits {
                    false => ACOPE_A::_0,
                    true => ACOPE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ACOPE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ACOPE_A::_1
            }
        }
        #[doc = "Write proxy for field `ACOPE`"]
        pub struct ACOPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACOPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACOPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "ACMP output cannot be placed onto external pin."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ACOPE_A::_0)
            }
            #[doc = "ACMP output can be placed onto external pin."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ACOPE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `ACO`"]
        pub type ACO_R = crate::R<bool, bool>;
        #[doc = "ACMP Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ACIE_A {
            #[doc = "0: Disable the ACMP Interrupt."]
            _0 = 0,
            #[doc = "1: Enable the ACMP Interrupt."]
            _1 = 1,
        }
        impl From<ACIE_A> for bool {
            #[inline(always)]
            fn from(variant: ACIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ACIE`"]
        pub type ACIE_R = crate::R<bool, ACIE_A>;
        impl ACIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACIE_A {
                match self.bits {
                    false => ACIE_A::_0,
                    true => ACIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ACIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ACIE_A::_1
            }
        }
        #[doc = "Write proxy for field `ACIE`"]
        pub struct ACIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Disable the ACMP Interrupt."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ACIE_A::_0)
            }
            #[doc = "Enable the ACMP Interrupt."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ACIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `ACF`"]
        pub type ACF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ACF`"]
        pub struct ACF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Analog Comparator Hysterisis Selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum HYST_A {
            #[doc = "0: 20 mV."]
            _0 = 0,
            #[doc = "1: 30 mV."]
            _1 = 1,
        }
        impl From<HYST_A> for bool {
            #[inline(always)]
            fn from(variant: HYST_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `HYST`"]
        pub type HYST_R = crate::R<bool, HYST_A>;
        impl HYST_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> HYST_A {
                match self.bits {
                    false => HYST_A::_0,
                    true => HYST_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == HYST_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == HYST_A::_1
            }
        }
        #[doc = "Write proxy for field `HYST`"]
        pub struct HYST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: HYST_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "20 mV."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(HYST_A::_0)
            }
            #[doc = "30 mV."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(HYST_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Analog Comparator Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ACE_A {
            #[doc = "0: The ACMP is disabled."]
            _0 = 0,
            #[doc = "1: The ACMP is enabled."]
            _1 = 1,
        }
        impl From<ACE_A> for bool {
            #[inline(always)]
            fn from(variant: ACE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ACE`"]
        pub type ACE_R = crate::R<bool, ACE_A>;
        impl ACE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACE_A {
                match self.bits {
                    false => ACE_A::_0,
                    true => ACE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ACE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ACE_A::_1
            }
        }
        #[doc = "Write proxy for field `ACE`"]
        pub struct ACE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The ACMP is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ACE_A::_0)
            }
            #[doc = "The ACMP is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ACE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - ACMP MOD"]
            #[inline(always)]
            pub fn acmod(&self) -> ACMOD_R {
                ACMOD_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 2 - ACMP Output Pin Enable"]
            #[inline(always)]
            pub fn acope(&self) -> ACOPE_R {
                ACOPE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - ACMP Output"]
            #[inline(always)]
            pub fn aco(&self) -> ACO_R {
                ACO_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - ACMP Interrupt Enable"]
            #[inline(always)]
            pub fn acie(&self) -> ACIE_R {
                ACIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - ACMP Interrupt Flag Bit"]
            #[inline(always)]
            pub fn acf(&self) -> ACF_R {
                ACF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Analog Comparator Hysterisis Selection"]
            #[inline(always)]
            pub fn hyst(&self) -> HYST_R {
                HYST_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Analog Comparator Enable"]
            #[inline(always)]
            pub fn ace(&self) -> ACE_R {
                ACE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - ACMP MOD"]
            #[inline(always)]
            pub fn acmod(&mut self) -> ACMOD_W {
                ACMOD_W { w: self }
            }
            #[doc = "Bit 2 - ACMP Output Pin Enable"]
            #[inline(always)]
            pub fn acope(&mut self) -> ACOPE_W {
                ACOPE_W { w: self }
            }
            #[doc = "Bit 4 - ACMP Interrupt Enable"]
            #[inline(always)]
            pub fn acie(&mut self) -> ACIE_W {
                ACIE_W { w: self }
            }
            #[doc = "Bit 5 - ACMP Interrupt Flag Bit"]
            #[inline(always)]
            pub fn acf(&mut self) -> ACF_W {
                ACF_W { w: self }
            }
            #[doc = "Bit 6 - Analog Comparator Hysterisis Selection"]
            #[inline(always)]
            pub fn hyst(&mut self) -> HYST_W {
                HYST_W { w: self }
            }
            #[doc = "Bit 7 - Analog Comparator Enable"]
            #[inline(always)]
            pub fn ace(&mut self) -> ACE_W {
                ACE_W { w: self }
            }
        }
    }
    #[doc = "ACMP Control Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c0](c0) module"]
    pub type C0 = crate::Reg<u8, _C0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C0;
    #[doc = "`read()` method returns [c0::R](c0::R) reader structure"]
    impl crate::Readable for C0 {}
    #[doc = "`write(|w| ..)` method takes [c0::W](c0::W) writer structure"]
    impl crate::Writable for C0 {}
    #[doc = "ACMP Control Register 0"]
    pub mod c0 {
        #[doc = "Reader of register C0"]
        pub type R = crate::R<u8, super::C0>;
        #[doc = "Writer for register C0"]
        pub type W = crate::W<u8, super::C0>;
        #[doc = "Register C0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::C0 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "ACMP Negative Input Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ACNSEL_A {
            #[doc = "0: External reference 0"]
            _00 = 0,
            #[doc = "1: External reference 1"]
            _01 = 1,
            #[doc = "2: External reference 2"]
            _10 = 2,
            #[doc = "3: DAC output"]
            _11 = 3,
        }
        impl From<ACNSEL_A> for u8 {
            #[inline(always)]
            fn from(variant: ACNSEL_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ACNSEL`"]
        pub type ACNSEL_R = crate::R<u8, ACNSEL_A>;
        impl ACNSEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACNSEL_A {
                match self.bits {
                    0 => ACNSEL_A::_00,
                    1 => ACNSEL_A::_01,
                    2 => ACNSEL_A::_10,
                    3 => ACNSEL_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == ACNSEL_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == ACNSEL_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == ACNSEL_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == ACNSEL_A::_11
            }
        }
        #[doc = "Write proxy for field `ACNSEL`"]
        pub struct ACNSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACNSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACNSEL_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "External reference 0"]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(ACNSEL_A::_00)
            }
            #[doc = "External reference 1"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(ACNSEL_A::_01)
            }
            #[doc = "External reference 2"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(ACNSEL_A::_10)
            }
            #[doc = "DAC output"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(ACNSEL_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u8) & 0x03);
                self.w
            }
        }
        #[doc = "ACMP Positive Input Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ACPSEL_A {
            #[doc = "0: External reference 0"]
            _00 = 0,
            #[doc = "1: External reference 1"]
            _01 = 1,
            #[doc = "2: External reference 2"]
            _10 = 2,
            #[doc = "3: DAC output"]
            _11 = 3,
        }
        impl From<ACPSEL_A> for u8 {
            #[inline(always)]
            fn from(variant: ACPSEL_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ACPSEL`"]
        pub type ACPSEL_R = crate::R<u8, ACPSEL_A>;
        impl ACPSEL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ACPSEL_A {
                match self.bits {
                    0 => ACPSEL_A::_00,
                    1 => ACPSEL_A::_01,
                    2 => ACPSEL_A::_10,
                    3 => ACPSEL_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == ACPSEL_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == ACPSEL_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == ACPSEL_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == ACPSEL_A::_11
            }
        }
        #[doc = "Write proxy for field `ACPSEL`"]
        pub struct ACPSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACPSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACPSEL_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "External reference 0"]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(ACPSEL_A::_00)
            }
            #[doc = "External reference 1"]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(ACPSEL_A::_01)
            }
            #[doc = "External reference 2"]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(ACPSEL_A::_10)
            }
            #[doc = "DAC output"]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(ACPSEL_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u8) & 0x03) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - ACMP Negative Input Select"]
            #[inline(always)]
            pub fn acnsel(&self) -> ACNSEL_R {
                ACNSEL_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - ACMP Positive Input Select"]
            #[inline(always)]
            pub fn acpsel(&self) -> ACPSEL_R {
                ACPSEL_R::new(((self.bits >> 4) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - ACMP Negative Input Select"]
            #[inline(always)]
            pub fn acnsel(&mut self) -> ACNSEL_W {
                ACNSEL_W { w: self }
            }
            #[doc = "Bits 4:5 - ACMP Positive Input Select"]
            #[inline(always)]
            pub fn acpsel(&mut self) -> ACPSEL_W {
                ACPSEL_W { w: self }
            }
        }
    }
    #[doc = "ACMP Control Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c1](c1) module"]
    pub type C1 = crate::Reg<u8, _C1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C1;
    #[doc = "`read()` method returns [c1::R](c1::R) reader structure"]
    impl crate::Readable for C1 {}
    #[doc = "`write(|w| ..)` method takes [c1::W](c1::W) writer structure"]
    impl crate::Writable for C1 {}
    #[doc = "ACMP Control Register 1"]
    pub mod c1 {
        #[doc = "Reader of register C1"]
        pub type R = crate::R<u8, super::C1>;
        #[doc = "Writer for register C1"]
        pub type W = crate::W<u8, super::C1>;
        #[doc = "Register C1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::C1 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DACVAL`"]
        pub type DACVAL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DACVAL`"]
        pub struct DACVAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACVAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u8) & 0x3f);
                self.w
            }
        }
        #[doc = "DAC Reference Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DACREF_A {
            #[doc = "0: The DAC selects Bandgap as the reference."]
            _0 = 0,
            #[doc = "1: The DAC selects VDDA as the reference."]
            _1 = 1,
        }
        impl From<DACREF_A> for bool {
            #[inline(always)]
            fn from(variant: DACREF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DACREF`"]
        pub type DACREF_R = crate::R<bool, DACREF_A>;
        impl DACREF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DACREF_A {
                match self.bits {
                    false => DACREF_A::_0,
                    true => DACREF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DACREF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DACREF_A::_1
            }
        }
        #[doc = "Write proxy for field `DACREF`"]
        pub struct DACREF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACREF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DACREF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The DAC selects Bandgap as the reference."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DACREF_A::_0)
            }
            #[doc = "The DAC selects VDDA as the reference."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DACREF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "DAC Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DACEN_A {
            #[doc = "0: The DAC is disabled."]
            _0 = 0,
            #[doc = "1: The DAC is enabled."]
            _1 = 1,
        }
        impl From<DACEN_A> for bool {
            #[inline(always)]
            fn from(variant: DACEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DACEN`"]
        pub type DACEN_R = crate::R<bool, DACEN_A>;
        impl DACEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DACEN_A {
                match self.bits {
                    false => DACEN_A::_0,
                    true => DACEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DACEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DACEN_A::_1
            }
        }
        #[doc = "Write proxy for field `DACEN`"]
        pub struct DACEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DACEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DACEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "The DAC is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DACEN_A::_0)
            }
            #[doc = "The DAC is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DACEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - DAC Output Level Selection"]
            #[inline(always)]
            pub fn dacval(&self) -> DACVAL_R {
                DACVAL_R::new((self.bits & 0x3f) as u8)
            }
            #[doc = "Bit 6 - DAC Reference Select"]
            #[inline(always)]
            pub fn dacref(&self) -> DACREF_R {
                DACREF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - DAC Enable"]
            #[inline(always)]
            pub fn dacen(&self) -> DACEN_R {
                DACEN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - DAC Output Level Selection"]
            #[inline(always)]
            pub fn dacval(&mut self) -> DACVAL_W {
                DACVAL_W { w: self }
            }
            #[doc = "Bit 6 - DAC Reference Select"]
            #[inline(always)]
            pub fn dacref(&mut self) -> DACREF_W {
                DACREF_W { w: self }
            }
            #[doc = "Bit 7 - DAC Enable"]
            #[inline(always)]
            pub fn dacen(&mut self) -> DACEN_W {
                DACEN_W { w: self }
            }
        }
    }
    #[doc = "ACMP Control Register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c2](c2) module"]
    pub type C2 = crate::Reg<u8, _C2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C2;
    #[doc = "`read()` method returns [c2::R](c2::R) reader structure"]
    impl crate::Readable for C2 {}
    #[doc = "`write(|w| ..)` method takes [c2::W](c2::W) writer structure"]
    impl crate::Writable for C2 {}
    #[doc = "ACMP Control Register 2"]
    pub mod c2 {
        #[doc = "Reader of register C2"]
        pub type R = crate::R<u8, super::C2>;
        #[doc = "Writer for register C2"]
        pub type W = crate::W<u8, super::C2>;
        #[doc = "Register C2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::C2 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "ACMP Input Pin Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ACIPE_A {
            #[doc = "0: The corresponding external analog input is not allowed."]
            _0 = 0,
            #[doc = "1: The corresponding external analog input is allowed."]
            _1 = 1,
        }
        impl From<ACIPE_A> for u8 {
            #[inline(always)]
            fn from(variant: ACIPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ACIPE`"]
        pub type ACIPE_R = crate::R<u8, ACIPE_A>;
        impl ACIPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, ACIPE_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(ACIPE_A::_0),
                    1 => Val(ACIPE_A::_1),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ACIPE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ACIPE_A::_1
            }
        }
        #[doc = "Write proxy for field `ACIPE`"]
        pub struct ACIPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACIPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ACIPE_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "The corresponding external analog input is not allowed."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ACIPE_A::_0)
            }
            #[doc = "The corresponding external analog input is allowed."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ACIPE_A::_1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u8) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - ACMP Input Pin Enable"]
            #[inline(always)]
            pub fn acipe(&self) -> ACIPE_R {
                ACIPE_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - ACMP Input Pin Enable"]
            #[inline(always)]
            pub fn acipe(&mut self) -> ACIPE_W {
                ACIPE_W { w: self }
            }
        }
    }
}
#[doc = "Serial Peripheral Interface"]
pub struct SPI0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI0 {}
impl SPI0 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi0::RegisterBlock {
        0x4007_6000 as *const _
    }
}
impl Deref for SPI0 {
    type Target = spi0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SPI0::ptr() }
    }
}
#[doc = "Serial Peripheral Interface"]
pub mod spi0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - SPI Control Register 1"]
        pub c1: C1,
        #[doc = "0x01 - SPI Control Register 2"]
        pub c2: C2,
        #[doc = "0x02 - SPI Baud Rate Register"]
        pub br: BR,
        #[doc = "0x03 - SPI Status Register"]
        pub s: S,
        _reserved4: [u8; 1usize],
        #[doc = "0x05 - SPI Data Register"]
        pub d: D,
        _reserved5: [u8; 1usize],
        #[doc = "0x07 - SPI Match Register"]
        pub m: M,
    }
    #[doc = "SPI Control Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c1](c1) module"]
    pub type C1 = crate::Reg<u8, _C1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C1;
    #[doc = "`read()` method returns [c1::R](c1::R) reader structure"]
    impl crate::Readable for C1 {}
    #[doc = "`write(|w| ..)` method takes [c1::W](c1::W) writer structure"]
    impl crate::Writable for C1 {}
    #[doc = "SPI Control Register 1"]
    pub mod c1 {
        #[doc = "Reader of register C1"]
        pub type R = crate::R<u8, super::C1>;
        #[doc = "Writer for register C1"]
        pub type W = crate::W<u8, super::C1>;
        #[doc = "Register C1 `reset()`'s with value 0x04"]
        impl crate::ResetValue for super::C1 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x04
            }
        }
        #[doc = "LSB First (shifter direction)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LSBFE_A {
            #[doc = "0: SPI serial data transfers start with the most significant bit."]
            _0 = 0,
            #[doc = "1: SPI serial data transfers start with the least significant bit."]
            _1 = 1,
        }
        impl From<LSBFE_A> for bool {
            #[inline(always)]
            fn from(variant: LSBFE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LSBFE`"]
        pub type LSBFE_R = crate::R<bool, LSBFE_A>;
        impl LSBFE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LSBFE_A {
                match self.bits {
                    false => LSBFE_A::_0,
                    true => LSBFE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LSBFE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LSBFE_A::_1
            }
        }
        #[doc = "Write proxy for field `LSBFE`"]
        pub struct LSBFE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSBFE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LSBFE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SPI serial data transfers start with the most significant bit."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(LSBFE_A::_0)
            }
            #[doc = "SPI serial data transfers start with the least significant bit."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(LSBFE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        #[doc = "Slave Select Output Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SSOE_A {
            #[doc = "0: When C2\\[MODFEN\\]
is 0: In master mode, SS pin function is general-purpose I/O (not SPI). In slave mode, SS pin function is slave select input. When C2\\[MODFEN\\]
is 1: In master mode, SS pin function is SS input for mode fault. In slave mode, SS pin function is slave select input."]
            _0 = 0,
            #[doc = "1: When C2\\[MODFEN\\]
is 0: In master mode, SS pin function is general-purpose I/O (not SPI). In slave mode, SS pin function is slave select input. When C2\\[MODFEN\\]
is 1: In master mode, SS pin function is automatic SS output. In slave mode: SS pin function is slave select input."]
            _1 = 1,
        }
        impl From<SSOE_A> for bool {
            #[inline(always)]
            fn from(variant: SSOE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SSOE`"]
        pub type SSOE_R = crate::R<bool, SSOE_A>;
        impl SSOE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SSOE_A {
                match self.bits {
                    false => SSOE_A::_0,
                    true => SSOE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SSOE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SSOE_A::_1
            }
        }
        #[doc = "Write proxy for field `SSOE`"]
        pub struct SSOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSOE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SSOE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "When C2\\[MODFEN\\]
is 0: In master mode, SS pin function is general-purpose I/O (not SPI). In slave mode, SS pin function is slave select input. When C2\\[MODFEN\\]
is 1: In master mode, SS pin function is SS input for mode fault. In slave mode, SS pin function is slave select input."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SSOE_A::_0)
            }
            #[doc = "When C2\\[MODFEN\\]
is 0: In master mode, SS pin function is general-purpose I/O (not SPI). In slave mode, SS pin function is slave select input. When C2\\[MODFEN\\]
is 1: In master mode, SS pin function is automatic SS output. In slave mode: SS pin function is slave select input."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SSOE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Clock Phase\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CPHA_A {
            #[doc = "0: First edge on SPSCK occurs at the middle of the first cycle of a data transfer."]
            _0 = 0,
            #[doc = "1: First edge on SPSCK occurs at the start of the first cycle of a data transfer."]
            _1 = 1,
        }
        impl From<CPHA_A> for bool {
            #[inline(always)]
            fn from(variant: CPHA_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CPHA`"]
        pub type CPHA_R = crate::R<bool, CPHA_A>;
        impl CPHA_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CPHA_A {
                match self.bits {
                    false => CPHA_A::_0,
                    true => CPHA_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CPHA_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CPHA_A::_1
            }
        }
        #[doc = "Write proxy for field `CPHA`"]
        pub struct CPHA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPHA_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CPHA_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "First edge on SPSCK occurs at the middle of the first cycle of a data transfer."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CPHA_A::_0)
            }
            #[doc = "First edge on SPSCK occurs at the start of the first cycle of a data transfer."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CPHA_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Clock Polarity\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum CPOL_A {
            #[doc = "0: Active-high SPI clock (idles low)"]
            _0 = 0,
            #[doc = "1: Active-low SPI clock (idles high)"]
            _1 = 1,
        }
        impl From<CPOL_A> for bool {
            #[inline(always)]
            fn from(variant: CPOL_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `CPOL`"]
        pub type CPOL_R = crate::R<bool, CPOL_A>;
        impl CPOL_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CPOL_A {
                match self.bits {
                    false => CPOL_A::_0,
                    true => CPOL_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == CPOL_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == CPOL_A::_1
            }
        }
        #[doc = "Write proxy for field `CPOL`"]
        pub struct CPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPOL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CPOL_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Active-high SPI clock (idles low)"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(CPOL_A::_0)
            }
            #[doc = "Active-low SPI clock (idles high)"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(CPOL_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u8) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Master/Slave Mode Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MSTR_A {
            #[doc = "0: SPI module configured as a slave SPI device"]
            _0 = 0,
            #[doc = "1: SPI module configured as a master SPI device"]
            _1 = 1,
        }
        impl From<MSTR_A> for bool {
            #[inline(always)]
            fn from(variant: MSTR_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MSTR`"]
        pub type MSTR_R = crate::R<bool, MSTR_A>;
        impl MSTR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MSTR_A {
                match self.bits {
                    false => MSTR_A::_0,
                    true => MSTR_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == MSTR_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == MSTR_A::_1
            }
        }
        #[doc = "Write proxy for field `MSTR`"]
        pub struct MSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSTR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MSTR_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SPI module configured as a slave SPI device"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(MSTR_A::_0)
            }
            #[doc = "SPI module configured as a master SPI device"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(MSTR_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "SPI Transmit Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SPTIE_A {
            #[doc = "0: Interrupts from SPTEF inhibited (use polling)"]
            _0 = 0,
            #[doc = "1: When SPTEF is 1, hardware interrupt requested"]
            _1 = 1,
        }
        impl From<SPTIE_A> for bool {
            #[inline(always)]
            fn from(variant: SPTIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SPTIE`"]
        pub type SPTIE_R = crate::R<bool, SPTIE_A>;
        impl SPTIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SPTIE_A {
                match self.bits {
                    false => SPTIE_A::_0,
                    true => SPTIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SPTIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SPTIE_A::_1
            }
        }
        #[doc = "Write proxy for field `SPTIE`"]
        pub struct SPTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPTIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SPTIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupts from SPTEF inhibited (use polling)"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SPTIE_A::_0)
            }
            #[doc = "When SPTEF is 1, hardware interrupt requested"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SPTIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "SPI System Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SPE_A {
            #[doc = "0: SPI system inactive"]
            _0 = 0,
            #[doc = "1: SPI system enabled"]
            _1 = 1,
        }
        impl From<SPE_A> for bool {
            #[inline(always)]
            fn from(variant: SPE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SPE`"]
        pub type SPE_R = crate::R<bool, SPE_A>;
        impl SPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SPE_A {
                match self.bits {
                    false => SPE_A::_0,
                    true => SPE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SPE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SPE_A::_1
            }
        }
        #[doc = "Write proxy for field `SPE`"]
        pub struct SPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SPE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SPI system inactive"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SPE_A::_0)
            }
            #[doc = "SPI system enabled"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SPE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "SPI Interrupt Enable: for SPRF and MODF\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SPIE_A {
            #[doc = "0: Interrupts from SPRF and MODF are inhibited-use polling"]
            _0 = 0,
            #[doc = "1: Request a hardware interrupt when SPRF or MODF is 1"]
            _1 = 1,
        }
        impl From<SPIE_A> for bool {
            #[inline(always)]
            fn from(variant: SPIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SPIE`"]
        pub type SPIE_R = crate::R<bool, SPIE_A>;
        impl SPIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SPIE_A {
                match self.bits {
                    false => SPIE_A::_0,
                    true => SPIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SPIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SPIE_A::_1
            }
        }
        #[doc = "Write proxy for field `SPIE`"]
        pub struct SPIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SPIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupts from SPRF and MODF are inhibited-use polling"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SPIE_A::_0)
            }
            #[doc = "Request a hardware interrupt when SPRF or MODF is 1"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SPIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - LSB First (shifter direction)"]
            #[inline(always)]
            pub fn lsbfe(&self) -> LSBFE_R {
                LSBFE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Slave Select Output Enable"]
            #[inline(always)]
            pub fn ssoe(&self) -> SSOE_R {
                SSOE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Clock Phase"]
            #[inline(always)]
            pub fn cpha(&self) -> CPHA_R {
                CPHA_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Clock Polarity"]
            #[inline(always)]
            pub fn cpol(&self) -> CPOL_R {
                CPOL_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Master/Slave Mode Select"]
            #[inline(always)]
            pub fn mstr(&self) -> MSTR_R {
                MSTR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - SPI Transmit Interrupt Enable"]
            #[inline(always)]
            pub fn sptie(&self) -> SPTIE_R {
                SPTIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SPI System Enable"]
            #[inline(always)]
            pub fn spe(&self) -> SPE_R {
                SPE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - SPI Interrupt Enable: for SPRF and MODF"]
            #[inline(always)]
            pub fn spie(&self) -> SPIE_R {
                SPIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - LSB First (shifter direction)"]
            #[inline(always)]
            pub fn lsbfe(&mut self) -> LSBFE_W {
                LSBFE_W { w: self }
            }
            #[doc = "Bit 1 - Slave Select Output Enable"]
            #[inline(always)]
            pub fn ssoe(&mut self) -> SSOE_W {
                SSOE_W { w: self }
            }
            #[doc = "Bit 2 - Clock Phase"]
            #[inline(always)]
            pub fn cpha(&mut self) -> CPHA_W {
                CPHA_W { w: self }
            }
            #[doc = "Bit 3 - Clock Polarity"]
            #[inline(always)]
            pub fn cpol(&mut self) -> CPOL_W {
                CPOL_W { w: self }
            }
            #[doc = "Bit 4 - Master/Slave Mode Select"]
            #[inline(always)]
            pub fn mstr(&mut self) -> MSTR_W {
                MSTR_W { w: self }
            }
            #[doc = "Bit 5 - SPI Transmit Interrupt Enable"]
            #[inline(always)]
            pub fn sptie(&mut self) -> SPTIE_W {
                SPTIE_W { w: self }
            }
            #[doc = "Bit 6 - SPI System Enable"]
            #[inline(always)]
            pub fn spe(&mut self) -> SPE_W {
                SPE_W { w: self }
            }
            #[doc = "Bit 7 - SPI Interrupt Enable: for SPRF and MODF"]
            #[inline(always)]
            pub fn spie(&mut self) -> SPIE_W {
                SPIE_W { w: self }
            }
        }
    }
    #[doc = "SPI Control Register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c2](c2) module"]
    pub type C2 = crate::Reg<u8, _C2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C2;
    #[doc = "`read()` method returns [c2::R](c2::R) reader structure"]
    impl crate::Readable for C2 {}
    #[doc = "`write(|w| ..)` method takes [c2::W](c2::W) writer structure"]
    impl crate::Writable for C2 {}
    #[doc = "SPI Control Register 2"]
    pub mod c2 {
        #[doc = "Reader of register C2"]
        pub type R = crate::R<u8, super::C2>;
        #[doc = "Writer for register C2"]
        pub type W = crate::W<u8, super::C2>;
        #[doc = "Register C2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::C2 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "SPI Pin Control 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SPC0_A {
            #[doc = "0: SPI uses separate pins for data input and data output (pin mode is normal). In master mode of operation: MISO is master in and MOSI is master out. In slave mode of operation: MISO is slave out and MOSI is slave in."]
            _0 = 0,
            #[doc = "1: SPI configured for single-wire bidirectional operation (pin mode is bidirectional). In master mode of operation: MISO is not used by SPI; MOSI is master in when BIDIROE is 0 or master I/O when BIDIROE is 1. In slave mode of operation: MISO is slave in when BIDIROE is 0 or slave I/O when BIDIROE is 1; MOSI is not used by SPI."]
            _1 = 1,
        }
        impl From<SPC0_A> for bool {
            #[inline(always)]
            fn from(variant: SPC0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SPC0`"]
        pub type SPC0_R = crate::R<bool, SPC0_A>;
        impl SPC0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SPC0_A {
                match self.bits {
                    false => SPC0_A::_0,
                    true => SPC0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SPC0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SPC0_A::_1
            }
        }
        #[doc = "Write proxy for field `SPC0`"]
        pub struct SPC0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPC0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SPC0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SPI uses separate pins for data input and data output (pin mode is normal). In master mode of operation: MISO is master in and MOSI is master out. In slave mode of operation: MISO is slave out and MOSI is slave in."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SPC0_A::_0)
            }
            #[doc = "SPI configured for single-wire bidirectional operation (pin mode is bidirectional). In master mode of operation: MISO is not used by SPI; MOSI is master in when BIDIROE is 0 or master I/O when BIDIROE is 1. In slave mode of operation: MISO is slave in when BIDIROE is 0 or slave I/O when BIDIROE is 1; MOSI is not used by SPI."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SPC0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        #[doc = "SPI Stop in Wait Mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SPISWAI_A {
            #[doc = "0: SPI clocks continue to operate in Wait mode."]
            _0 = 0,
            #[doc = "1: SPI clocks stop when the MCU enters Wait mode."]
            _1 = 1,
        }
        impl From<SPISWAI_A> for bool {
            #[inline(always)]
            fn from(variant: SPISWAI_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SPISWAI`"]
        pub type SPISWAI_R = crate::R<bool, SPISWAI_A>;
        impl SPISWAI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SPISWAI_A {
                match self.bits {
                    false => SPISWAI_A::_0,
                    true => SPISWAI_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SPISWAI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SPISWAI_A::_1
            }
        }
        #[doc = "Write proxy for field `SPISWAI`"]
        pub struct SPISWAI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPISWAI_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SPISWAI_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "SPI clocks continue to operate in Wait mode."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SPISWAI_A::_0)
            }
            #[doc = "SPI clocks stop when the MCU enters Wait mode."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SPISWAI_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Bidirectional Mode Output Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BIDIROE_A {
            #[doc = "0: Output driver disabled so SPI data I/O pin acts as an input"]
            _0 = 0,
            #[doc = "1: SPI I/O pin enabled as an output"]
            _1 = 1,
        }
        impl From<BIDIROE_A> for bool {
            #[inline(always)]
            fn from(variant: BIDIROE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BIDIROE`"]
        pub type BIDIROE_R = crate::R<bool, BIDIROE_A>;
        impl BIDIROE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BIDIROE_A {
                match self.bits {
                    false => BIDIROE_A::_0,
                    true => BIDIROE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == BIDIROE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == BIDIROE_A::_1
            }
        }
        #[doc = "Write proxy for field `BIDIROE`"]
        pub struct BIDIROE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIDIROE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BIDIROE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Output driver disabled so SPI data I/O pin acts as an input"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(BIDIROE_A::_0)
            }
            #[doc = "SPI I/O pin enabled as an output"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(BIDIROE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u8) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Master Mode-Fault Function Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MODFEN_A {
            #[doc = "0: Mode fault function disabled, master SS pin reverts to general-purpose I/O not controlled by SPI"]
            _0 = 0,
            #[doc = "1: Mode fault function enabled, master SS pin acts as the mode fault input or the slave select output"]
            _1 = 1,
        }
        impl From<MODFEN_A> for bool {
            #[inline(always)]
            fn from(variant: MODFEN_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MODFEN`"]
        pub type MODFEN_R = crate::R<bool, MODFEN_A>;
        impl MODFEN_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MODFEN_A {
                match self.bits {
                    false => MODFEN_A::_0,
                    true => MODFEN_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == MODFEN_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == MODFEN_A::_1
            }
        }
        #[doc = "Write proxy for field `MODFEN`"]
        pub struct MODFEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODFEN_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MODFEN_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Mode fault function disabled, master SS pin reverts to general-purpose I/O not controlled by SPI"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(MODFEN_A::_0)
            }
            #[doc = "Mode fault function enabled, master SS pin acts as the mode fault input or the slave select output"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(MODFEN_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "SPI Match Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SPMIE_A {
            #[doc = "0: Interrupts from SPMF inhibited (use polling)"]
            _0 = 0,
            #[doc = "1: When SPMF is 1, requests a hardware interrupt"]
            _1 = 1,
        }
        impl From<SPMIE_A> for bool {
            #[inline(always)]
            fn from(variant: SPMIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SPMIE`"]
        pub type SPMIE_R = crate::R<bool, SPMIE_A>;
        impl SPMIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SPMIE_A {
                match self.bits {
                    false => SPMIE_A::_0,
                    true => SPMIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SPMIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SPMIE_A::_1
            }
        }
        #[doc = "Write proxy for field `SPMIE`"]
        pub struct SPMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPMIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SPMIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupts from SPMF inhibited (use polling)"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SPMIE_A::_0)
            }
            #[doc = "When SPMF is 1, requests a hardware interrupt"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SPMIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - SPI Pin Control 0"]
            #[inline(always)]
            pub fn spc0(&self) -> SPC0_R {
                SPC0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - SPI Stop in Wait Mode"]
            #[inline(always)]
            pub fn spiswai(&self) -> SPISWAI_R {
                SPISWAI_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Bidirectional Mode Output Enable"]
            #[inline(always)]
            pub fn bidiroe(&self) -> BIDIROE_R {
                BIDIROE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Master Mode-Fault Function Enable"]
            #[inline(always)]
            pub fn modfen(&self) -> MODFEN_R {
                MODFEN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 7 - SPI Match Interrupt Enable"]
            #[inline(always)]
            pub fn spmie(&self) -> SPMIE_R {
                SPMIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - SPI Pin Control 0"]
            #[inline(always)]
            pub fn spc0(&mut self) -> SPC0_W {
                SPC0_W { w: self }
            }
            #[doc = "Bit 1 - SPI Stop in Wait Mode"]
            #[inline(always)]
            pub fn spiswai(&mut self) -> SPISWAI_W {
                SPISWAI_W { w: self }
            }
            #[doc = "Bit 3 - Bidirectional Mode Output Enable"]
            #[inline(always)]
            pub fn bidiroe(&mut self) -> BIDIROE_W {
                BIDIROE_W { w: self }
            }
            #[doc = "Bit 4 - Master Mode-Fault Function Enable"]
            #[inline(always)]
            pub fn modfen(&mut self) -> MODFEN_W {
                MODFEN_W { w: self }
            }
            #[doc = "Bit 7 - SPI Match Interrupt Enable"]
            #[inline(always)]
            pub fn spmie(&mut self) -> SPMIE_W {
                SPMIE_W { w: self }
            }
        }
    }
    #[doc = "SPI Baud Rate Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [br](br) module"]
    pub type BR = crate::Reg<u8, _BR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BR;
    #[doc = "`read()` method returns [br::R](br::R) reader structure"]
    impl crate::Readable for BR {}
    #[doc = "`write(|w| ..)` method takes [br::W](br::W) writer structure"]
    impl crate::Writable for BR {}
    #[doc = "SPI Baud Rate Register"]
    pub mod br {
        #[doc = "Reader of register BR"]
        pub type R = crate::R<u8, super::BR>;
        #[doc = "Writer for register BR"]
        pub type W = crate::W<u8, super::BR>;
        #[doc = "Register BR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BR {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "SPI Baud Rate Divisor\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum SPR_A {
            #[doc = "0: Baud rate divisor is 2."]
            _0000 = 0,
            #[doc = "1: Baud rate divisor is 4."]
            _0001 = 1,
            #[doc = "2: Baud rate divisor is 8."]
            _0010 = 2,
            #[doc = "3: Baud rate divisor is 16."]
            _0011 = 3,
            #[doc = "4: Baud rate divisor is 32."]
            _0100 = 4,
            #[doc = "5: Baud rate divisor is 64."]
            _0101 = 5,
            #[doc = "6: Baud rate divisor is 128."]
            _0110 = 6,
            #[doc = "7: Baud rate divisor is 256."]
            _0111 = 7,
            #[doc = "8: Baud rate divisor is 512."]
            _1000 = 8,
        }
        impl From<SPR_A> for u8 {
            #[inline(always)]
            fn from(variant: SPR_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `SPR`"]
        pub type SPR_R = crate::R<u8, SPR_A>;
        impl SPR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, SPR_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(SPR_A::_0000),
                    1 => Val(SPR_A::_0001),
                    2 => Val(SPR_A::_0010),
                    3 => Val(SPR_A::_0011),
                    4 => Val(SPR_A::_0100),
                    5 => Val(SPR_A::_0101),
                    6 => Val(SPR_A::_0110),
                    7 => Val(SPR_A::_0111),
                    8 => Val(SPR_A::_1000),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0000`"]
            #[inline(always)]
            pub fn is_0000(&self) -> bool {
                *self == SPR_A::_0000
            }
            #[doc = "Checks if the value of the field is `_0001`"]
            #[inline(always)]
            pub fn is_0001(&self) -> bool {
                *self == SPR_A::_0001
            }
            #[doc = "Checks if the value of the field is `_0010`"]
            #[inline(always)]
            pub fn is_0010(&self) -> bool {
                *self == SPR_A::_0010
            }
            #[doc = "Checks if the value of the field is `_0011`"]
            #[inline(always)]
            pub fn is_0011(&self) -> bool {
                *self == SPR_A::_0011
            }
            #[doc = "Checks if the value of the field is `_0100`"]
            #[inline(always)]
            pub fn is_0100(&self) -> bool {
                *self == SPR_A::_0100
            }
            #[doc = "Checks if the value of the field is `_0101`"]
            #[inline(always)]
            pub fn is_0101(&self) -> bool {
                *self == SPR_A::_0101
            }
            #[doc = "Checks if the value of the field is `_0110`"]
            #[inline(always)]
            pub fn is_0110(&self) -> bool {
                *self == SPR_A::_0110
            }
            #[doc = "Checks if the value of the field is `_0111`"]
            #[inline(always)]
            pub fn is_0111(&self) -> bool {
                *self == SPR_A::_0111
            }
            #[doc = "Checks if the value of the field is `_1000`"]
            #[inline(always)]
            pub fn is_1000(&self) -> bool {
                *self == SPR_A::_1000
            }
        }
        #[doc = "Write proxy for field `SPR`"]
        pub struct SPR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SPR_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Baud rate divisor is 2."]
            #[inline(always)]
            pub fn _0000(self) -> &'a mut W {
                self.variant(SPR_A::_0000)
            }
            #[doc = "Baud rate divisor is 4."]
            #[inline(always)]
            pub fn _0001(self) -> &'a mut W {
                self.variant(SPR_A::_0001)
            }
            #[doc = "Baud rate divisor is 8."]
            #[inline(always)]
            pub fn _0010(self) -> &'a mut W {
                self.variant(SPR_A::_0010)
            }
            #[doc = "Baud rate divisor is 16."]
            #[inline(always)]
            pub fn _0011(self) -> &'a mut W {
                self.variant(SPR_A::_0011)
            }
            #[doc = "Baud rate divisor is 32."]
            #[inline(always)]
            pub fn _0100(self) -> &'a mut W {
                self.variant(SPR_A::_0100)
            }
            #[doc = "Baud rate divisor is 64."]
            #[inline(always)]
            pub fn _0101(self) -> &'a mut W {
                self.variant(SPR_A::_0101)
            }
            #[doc = "Baud rate divisor is 128."]
            #[inline(always)]
            pub fn _0110(self) -> &'a mut W {
                self.variant(SPR_A::_0110)
            }
            #[doc = "Baud rate divisor is 256."]
            #[inline(always)]
            pub fn _0111(self) -> &'a mut W {
                self.variant(SPR_A::_0111)
            }
            #[doc = "Baud rate divisor is 512."]
            #[inline(always)]
            pub fn _1000(self) -> &'a mut W {
                self.variant(SPR_A::_1000)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u8) & 0x0f);
                self.w
            }
        }
        #[doc = "SPI Baud Rate Prescale Divisor\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum SPPR_A {
            #[doc = "0: Baud rate prescaler divisor is 1."]
            _000 = 0,
            #[doc = "1: Baud rate prescaler divisor is 2."]
            _001 = 1,
            #[doc = "2: Baud rate prescaler divisor is 3."]
            _010 = 2,
            #[doc = "3: Baud rate prescaler divisor is 4."]
            _011 = 3,
            #[doc = "4: Baud rate prescaler divisor is 5."]
            _100 = 4,
            #[doc = "5: Baud rate prescaler divisor is 6."]
            _101 = 5,
            #[doc = "6: Baud rate prescaler divisor is 7."]
            _110 = 6,
            #[doc = "7: Baud rate prescaler divisor is 8."]
            _111 = 7,
        }
        impl From<SPPR_A> for u8 {
            #[inline(always)]
            fn from(variant: SPPR_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `SPPR`"]
        pub type SPPR_R = crate::R<u8, SPPR_A>;
        impl SPPR_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SPPR_A {
                match self.bits {
                    0 => SPPR_A::_000,
                    1 => SPPR_A::_001,
                    2 => SPPR_A::_010,
                    3 => SPPR_A::_011,
                    4 => SPPR_A::_100,
                    5 => SPPR_A::_101,
                    6 => SPPR_A::_110,
                    7 => SPPR_A::_111,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_000`"]
            #[inline(always)]
            pub fn is_000(&self) -> bool {
                *self == SPPR_A::_000
            }
            #[doc = "Checks if the value of the field is `_001`"]
            #[inline(always)]
            pub fn is_001(&self) -> bool {
                *self == SPPR_A::_001
            }
            #[doc = "Checks if the value of the field is `_010`"]
            #[inline(always)]
            pub fn is_010(&self) -> bool {
                *self == SPPR_A::_010
            }
            #[doc = "Checks if the value of the field is `_011`"]
            #[inline(always)]
            pub fn is_011(&self) -> bool {
                *self == SPPR_A::_011
            }
            #[doc = "Checks if the value of the field is `_100`"]
            #[inline(always)]
            pub fn is_100(&self) -> bool {
                *self == SPPR_A::_100
            }
            #[doc = "Checks if the value of the field is `_101`"]
            #[inline(always)]
            pub fn is_101(&self) -> bool {
                *self == SPPR_A::_101
            }
            #[doc = "Checks if the value of the field is `_110`"]
            #[inline(always)]
            pub fn is_110(&self) -> bool {
                *self == SPPR_A::_110
            }
            #[doc = "Checks if the value of the field is `_111`"]
            #[inline(always)]
            pub fn is_111(&self) -> bool {
                *self == SPPR_A::_111
            }
        }
        #[doc = "Write proxy for field `SPPR`"]
        pub struct SPPR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPPR_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SPPR_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Baud rate prescaler divisor is 1."]
            #[inline(always)]
            pub fn _000(self) -> &'a mut W {
                self.variant(SPPR_A::_000)
            }
            #[doc = "Baud rate prescaler divisor is 2."]
            #[inline(always)]
            pub fn _001(self) -> &'a mut W {
                self.variant(SPPR_A::_001)
            }
            #[doc = "Baud rate prescaler divisor is 3."]
            #[inline(always)]
            pub fn _010(self) -> &'a mut W {
                self.variant(SPPR_A::_010)
            }
            #[doc = "Baud rate prescaler divisor is 4."]
            #[inline(always)]
            pub fn _011(self) -> &'a mut W {
                self.variant(SPPR_A::_011)
            }
            #[doc = "Baud rate prescaler divisor is 5."]
            #[inline(always)]
            pub fn _100(self) -> &'a mut W {
                self.variant(SPPR_A::_100)
            }
            #[doc = "Baud rate prescaler divisor is 6."]
            #[inline(always)]
            pub fn _101(self) -> &'a mut W {
                self.variant(SPPR_A::_101)
            }
            #[doc = "Baud rate prescaler divisor is 7."]
            #[inline(always)]
            pub fn _110(self) -> &'a mut W {
                self.variant(SPPR_A::_110)
            }
            #[doc = "Baud rate prescaler divisor is 8."]
            #[inline(always)]
            pub fn _111(self) -> &'a mut W {
                self.variant(SPPR_A::_111)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u8) & 0x07) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - SPI Baud Rate Divisor"]
            #[inline(always)]
            pub fn spr(&self) -> SPR_R {
                SPR_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:6 - SPI Baud Rate Prescale Divisor"]
            #[inline(always)]
            pub fn sppr(&self) -> SPPR_R {
                SPPR_R::new(((self.bits >> 4) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - SPI Baud Rate Divisor"]
            #[inline(always)]
            pub fn spr(&mut self) -> SPR_W {
                SPR_W { w: self }
            }
            #[doc = "Bits 4:6 - SPI Baud Rate Prescale Divisor"]
            #[inline(always)]
            pub fn sppr(&mut self) -> SPPR_W {
                SPPR_W { w: self }
            }
        }
    }
    #[doc = "SPI Status Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [s](s) module"]
    pub type S = crate::Reg<u8, _S>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _S;
    #[doc = "`read()` method returns [s::R](s::R) reader structure"]
    impl crate::Readable for S {}
    #[doc = "`write(|w| ..)` method takes [s::W](s::W) writer structure"]
    impl crate::Writable for S {}
    #[doc = "SPI Status Register"]
    pub mod s {
        #[doc = "Reader of register S"]
        pub type R = crate::R<u8, super::S>;
        #[doc = "Writer for register S"]
        pub type W = crate::W<u8, super::S>;
        #[doc = "Register S `reset()`'s with value 0x20"]
        impl crate::ResetValue for super::S {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x20
            }
        }
        #[doc = "Master Mode Fault Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum MODF_A {
            #[doc = "0: No mode fault error"]
            _0 = 0,
            #[doc = "1: Mode fault error detected"]
            _1 = 1,
        }
        impl From<MODF_A> for bool {
            #[inline(always)]
            fn from(variant: MODF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `MODF`"]
        pub type MODF_R = crate::R<bool, MODF_A>;
        impl MODF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MODF_A {
                match self.bits {
                    false => MODF_A::_0,
                    true => MODF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == MODF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == MODF_A::_1
            }
        }
        #[doc = "SPI Transmit Buffer Empty Flag\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SPTEF_A {
            #[doc = "0: SPI transmit buffer not empty"]
            _0 = 0,
            #[doc = "1: SPI transmit buffer empty"]
            _1 = 1,
        }
        impl From<SPTEF_A> for bool {
            #[inline(always)]
            fn from(variant: SPTEF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SPTEF`"]
        pub type SPTEF_R = crate::R<bool, SPTEF_A>;
        impl SPTEF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SPTEF_A {
                match self.bits {
                    false => SPTEF_A::_0,
                    true => SPTEF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SPTEF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SPTEF_A::_1
            }
        }
        #[doc = "SPI Match Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SPMF_A {
            #[doc = "0: Value in the receive data buffer does not match the value in the M register"]
            _0 = 0,
            #[doc = "1: Value in the receive data buffer matches the value in the M register"]
            _1 = 1,
        }
        impl From<SPMF_A> for bool {
            #[inline(always)]
            fn from(variant: SPMF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SPMF`"]
        pub type SPMF_R = crate::R<bool, SPMF_A>;
        impl SPMF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SPMF_A {
                match self.bits {
                    false => SPMF_A::_0,
                    true => SPMF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SPMF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SPMF_A::_1
            }
        }
        #[doc = "Write proxy for field `SPMF`"]
        pub struct SPMF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPMF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SPMF_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Value in the receive data buffer does not match the value in the M register"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(SPMF_A::_0)
            }
            #[doc = "Value in the receive data buffer matches the value in the M register"]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(SPMF_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "SPI Read Buffer Full Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SPRF_A {
            #[doc = "0: No data available in the receive data buffer"]
            _0 = 0,
            #[doc = "1: Data available in the receive data buffer"]
            _1 = 1,
        }
        impl From<SPRF_A> for bool {
            #[inline(always)]
            fn from(variant: SPRF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SPRF`"]
        pub type SPRF_R = crate::R<bool, SPRF_A>;
        impl SPRF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SPRF_A {
                match self.bits {
                    false => SPRF_A::_0,
                    true => SPRF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == SPRF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == SPRF_A::_1
            }
        }
        impl R {
            #[doc = "Bit 4 - Master Mode Fault Flag"]
            #[inline(always)]
            pub fn modf(&self) -> MODF_R {
                MODF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - SPI Transmit Buffer Empty Flag"]
            #[inline(always)]
            pub fn sptef(&self) -> SPTEF_R {
                SPTEF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SPI Match Flag"]
            #[inline(always)]
            pub fn spmf(&self) -> SPMF_R {
                SPMF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - SPI Read Buffer Full Flag"]
            #[inline(always)]
            pub fn sprf(&self) -> SPRF_R {
                SPRF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 6 - SPI Match Flag"]
            #[inline(always)]
            pub fn spmf(&mut self) -> SPMF_W {
                SPMF_W { w: self }
            }
        }
    }
    #[doc = "SPI Data Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [d](d) module"]
    pub type D = crate::Reg<u8, _D>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _D;
    #[doc = "`read()` method returns [d::R](d::R) reader structure"]
    impl crate::Readable for D {}
    #[doc = "`write(|w| ..)` method takes [d::W](d::W) writer structure"]
    impl crate::Writable for D {}
    #[doc = "SPI Data Register"]
    pub mod d {
        #[doc = "Reader of register D"]
        pub type R = crate::R<u8, super::D>;
        #[doc = "Writer for register D"]
        pub type W = crate::W<u8, super::D>;
        #[doc = "Register D `reset()`'s with value 0"]
        impl crate::ResetValue for super::D {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `Bits`"]
        pub type BITS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `Bits`"]
        pub struct BITS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BITS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Data (low byte)"]
            #[inline(always)]
            pub fn bits_(&self) -> BITS_R {
                BITS_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Data (low byte)"]
            #[inline(always)]
            pub fn bits_(&mut self) -> BITS_W {
                BITS_W { w: self }
            }
        }
    }
    #[doc = "SPI Match Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [m](m) module"]
    pub type M = crate::Reg<u8, _M>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _M;
    #[doc = "`read()` method returns [m::R](m::R) reader structure"]
    impl crate::Readable for M {}
    #[doc = "`write(|w| ..)` method takes [m::W](m::W) writer structure"]
    impl crate::Writable for M {}
    #[doc = "SPI Match Register"]
    pub mod m {
        #[doc = "Reader of register M"]
        pub type R = crate::R<u8, super::M>;
        #[doc = "Writer for register M"]
        pub type W = crate::W<u8, super::M>;
        #[doc = "Register M `reset()`'s with value 0"]
        impl crate::ResetValue for super::M {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `Bits`"]
        pub type BITS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `Bits`"]
        pub struct BITS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BITS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Hardware compare value (low byte)"]
            #[inline(always)]
            pub fn bits_(&self) -> BITS_R {
                BITS_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Hardware compare value (low byte)"]
            #[inline(always)]
            pub fn bits_(&mut self) -> BITS_W {
                BITS_W { w: self }
            }
        }
    }
}
#[doc = "Keyboard interrupts"]
pub struct KBI0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for KBI0 {}
impl KBI0 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const kbi0::RegisterBlock {
        0x4007_9000 as *const _
    }
}
impl Deref for KBI0 {
    type Target = kbi0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*KBI0::ptr() }
    }
}
#[doc = "Keyboard interrupts"]
pub mod kbi0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - KBI Status and Control Register"]
        pub sc: SC,
        #[doc = "0x01 - KBIx Pin Enable Register"]
        pub pe: PE,
        #[doc = "0x02 - KBIx Edge Select Register"]
        pub es: ES,
    }
    #[doc = "KBI Status and Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sc](sc) module"]
    pub type SC = crate::Reg<u8, _SC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SC;
    #[doc = "`read()` method returns [sc::R](sc::R) reader structure"]
    impl crate::Readable for SC {}
    #[doc = "`write(|w| ..)` method takes [sc::W](sc::W) writer structure"]
    impl crate::Writable for SC {}
    #[doc = "KBI Status and Control Register"]
    pub mod sc {
        #[doc = "Reader of register SC"]
        pub type R = crate::R<u8, super::SC>;
        #[doc = "Writer for register SC"]
        pub type W = crate::W<u8, super::SC>;
        #[doc = "Register SC `reset()`'s with value 0"]
        impl crate::ResetValue for super::SC {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "KBI Detection Mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum KBMOD_A {
            #[doc = "0: Keyboard detects edges only."]
            _0 = 0,
            #[doc = "1: Keyboard detects both edges and levels."]
            _1 = 1,
        }
        impl From<KBMOD_A> for bool {
            #[inline(always)]
            fn from(variant: KBMOD_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `KBMOD`"]
        pub type KBMOD_R = crate::R<bool, KBMOD_A>;
        impl KBMOD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> KBMOD_A {
                match self.bits {
                    false => KBMOD_A::_0,
                    true => KBMOD_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == KBMOD_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == KBMOD_A::_1
            }
        }
        #[doc = "Write proxy for field `KBMOD`"]
        pub struct KBMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KBMOD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: KBMOD_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Keyboard detects edges only."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(KBMOD_A::_0)
            }
            #[doc = "Keyboard detects both edges and levels."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(KBMOD_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        #[doc = "KBI Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum KBIE_A {
            #[doc = "0: KBI interrupt not enabled."]
            _0 = 0,
            #[doc = "1: KBI interrupt enabled."]
            _1 = 1,
        }
        impl From<KBIE_A> for bool {
            #[inline(always)]
            fn from(variant: KBIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `KBIE`"]
        pub type KBIE_R = crate::R<bool, KBIE_A>;
        impl KBIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> KBIE_A {
                match self.bits {
                    false => KBIE_A::_0,
                    true => KBIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == KBIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == KBIE_A::_1
            }
        }
        #[doc = "Write proxy for field `KBIE`"]
        pub struct KBIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KBIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: KBIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "KBI interrupt not enabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(KBIE_A::_0)
            }
            #[doc = "KBI interrupt enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(KBIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `KBACK`"]
        pub struct KBACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KBACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "KBI Interrupt Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum KBF_A {
            #[doc = "0: KBI interrupt request not detected."]
            _0 = 0,
            #[doc = "1: KBI interrupt request detected."]
            _1 = 1,
        }
        impl From<KBF_A> for bool {
            #[inline(always)]
            fn from(variant: KBF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `KBF`"]
        pub type KBF_R = crate::R<bool, KBF_A>;
        impl KBF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> KBF_A {
                match self.bits {
                    false => KBF_A::_0,
                    true => KBF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == KBF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == KBF_A::_1
            }
        }
        impl R {
            #[doc = "Bit 0 - KBI Detection Mode"]
            #[inline(always)]
            pub fn kbmod(&self) -> KBMOD_R {
                KBMOD_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - KBI Interrupt Enable"]
            #[inline(always)]
            pub fn kbie(&self) -> KBIE_R {
                KBIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - KBI Interrupt Flag"]
            #[inline(always)]
            pub fn kbf(&self) -> KBF_R {
                KBF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - KBI Detection Mode"]
            #[inline(always)]
            pub fn kbmod(&mut self) -> KBMOD_W {
                KBMOD_W { w: self }
            }
            #[doc = "Bit 1 - KBI Interrupt Enable"]
            #[inline(always)]
            pub fn kbie(&mut self) -> KBIE_W {
                KBIE_W { w: self }
            }
            #[doc = "Bit 2 - KBI Acknowledge"]
            #[inline(always)]
            pub fn kback(&mut self) -> KBACK_W {
                KBACK_W { w: self }
            }
        }
    }
    #[doc = "KBIx Pin Enable Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pe](pe) module"]
    pub type PE = crate::Reg<u8, _PE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PE;
    #[doc = "`read()` method returns [pe::R](pe::R) reader structure"]
    impl crate::Readable for PE {}
    #[doc = "`write(|w| ..)` method takes [pe::W](pe::W) writer structure"]
    impl crate::Writable for PE {}
    #[doc = "KBIx Pin Enable Register"]
    pub mod pe {
        #[doc = "Reader of register PE"]
        pub type R = crate::R<u8, super::PE>;
        #[doc = "Writer for register PE"]
        pub type W = crate::W<u8, super::PE>;
        #[doc = "Register PE `reset()`'s with value 0"]
        impl crate::ResetValue for super::PE {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "KBI Pin Enables\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum KBIPE_A {
            #[doc = "0: Pin is not enabled as KBI interrupt."]
            _0 = 0,
            #[doc = "1: Pin is enabled as KBI interrupt."]
            _1 = 1,
        }
        impl From<KBIPE_A> for u8 {
            #[inline(always)]
            fn from(variant: KBIPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `KBIPE`"]
        pub type KBIPE_R = crate::R<u8, KBIPE_A>;
        impl KBIPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, KBIPE_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(KBIPE_A::_0),
                    1 => Val(KBIPE_A::_1),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == KBIPE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == KBIPE_A::_1
            }
        }
        #[doc = "Write proxy for field `KBIPE`"]
        pub struct KBIPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KBIPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: KBIPE_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Pin is not enabled as KBI interrupt."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(KBIPE_A::_0)
            }
            #[doc = "Pin is enabled as KBI interrupt."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(KBIPE_A::_1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - KBI Pin Enables"]
            #[inline(always)]
            pub fn kbipe(&self) -> KBIPE_R {
                KBIPE_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - KBI Pin Enables"]
            #[inline(always)]
            pub fn kbipe(&mut self) -> KBIPE_W {
                KBIPE_W { w: self }
            }
        }
    }
    #[doc = "KBIx Edge Select Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [es](es) module"]
    pub type ES = crate::Reg<u8, _ES>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ES;
    #[doc = "`read()` method returns [es::R](es::R) reader structure"]
    impl crate::Readable for ES {}
    #[doc = "`write(|w| ..)` method takes [es::W](es::W) writer structure"]
    impl crate::Writable for ES {}
    #[doc = "KBIx Edge Select Register"]
    pub mod es {
        #[doc = "Reader of register ES"]
        pub type R = crate::R<u8, super::ES>;
        #[doc = "Writer for register ES"]
        pub type W = crate::W<u8, super::ES>;
        #[doc = "Register ES `reset()`'s with value 0"]
        impl crate::ResetValue for super::ES {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "KBI Edge Selects\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum KBEDG_A {
            #[doc = "0: Falling edge/low level."]
            _0 = 0,
            #[doc = "1: Rising edge/high level."]
            _1 = 1,
        }
        impl From<KBEDG_A> for u8 {
            #[inline(always)]
            fn from(variant: KBEDG_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `KBEDG`"]
        pub type KBEDG_R = crate::R<u8, KBEDG_A>;
        impl KBEDG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, KBEDG_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(KBEDG_A::_0),
                    1 => Val(KBEDG_A::_1),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == KBEDG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == KBEDG_A::_1
            }
        }
        #[doc = "Write proxy for field `KBEDG`"]
        pub struct KBEDG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KBEDG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: KBEDG_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Falling edge/low level."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(KBEDG_A::_0)
            }
            #[doc = "Rising edge/high level."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(KBEDG_A::_1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - KBI Edge Selects"]
            #[inline(always)]
            pub fn kbedg(&self) -> KBEDG_R {
                KBEDG_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - KBI Edge Selects"]
            #[inline(always)]
            pub fn kbedg(&mut self) -> KBEDG_W {
                KBEDG_W { w: self }
            }
        }
    }
}
#[doc = "Keyboard interrupts"]
pub struct KBI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for KBI1 {}
impl KBI1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const kbi1::RegisterBlock {
        0x4007_a000 as *const _
    }
}
impl Deref for KBI1 {
    type Target = kbi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*KBI1::ptr() }
    }
}
#[doc = "Keyboard interrupts"]
pub mod kbi1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - KBI Status and Control Register"]
        pub sc: SC,
        #[doc = "0x01 - KBIx Pin Enable Register"]
        pub pe: PE,
        #[doc = "0x02 - KBIx Edge Select Register"]
        pub es: ES,
    }
    #[doc = "KBI Status and Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sc](sc) module"]
    pub type SC = crate::Reg<u8, _SC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SC;
    #[doc = "`read()` method returns [sc::R](sc::R) reader structure"]
    impl crate::Readable for SC {}
    #[doc = "`write(|w| ..)` method takes [sc::W](sc::W) writer structure"]
    impl crate::Writable for SC {}
    #[doc = "KBI Status and Control Register"]
    pub mod sc {
        #[doc = "Reader of register SC"]
        pub type R = crate::R<u8, super::SC>;
        #[doc = "Writer for register SC"]
        pub type W = crate::W<u8, super::SC>;
        #[doc = "Register SC `reset()`'s with value 0"]
        impl crate::ResetValue for super::SC {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "KBI Detection Mode\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum KBMOD_A {
            #[doc = "0: Keyboard detects edges only."]
            _0 = 0,
            #[doc = "1: Keyboard detects both edges and levels."]
            _1 = 1,
        }
        impl From<KBMOD_A> for bool {
            #[inline(always)]
            fn from(variant: KBMOD_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `KBMOD`"]
        pub type KBMOD_R = crate::R<bool, KBMOD_A>;
        impl KBMOD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> KBMOD_A {
                match self.bits {
                    false => KBMOD_A::_0,
                    true => KBMOD_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == KBMOD_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == KBMOD_A::_1
            }
        }
        #[doc = "Write proxy for field `KBMOD`"]
        pub struct KBMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KBMOD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: KBMOD_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Keyboard detects edges only."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(KBMOD_A::_0)
            }
            #[doc = "Keyboard detects both edges and levels."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(KBMOD_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        #[doc = "KBI Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum KBIE_A {
            #[doc = "0: KBI interrupt not enabled."]
            _0 = 0,
            #[doc = "1: KBI interrupt enabled."]
            _1 = 1,
        }
        impl From<KBIE_A> for bool {
            #[inline(always)]
            fn from(variant: KBIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `KBIE`"]
        pub type KBIE_R = crate::R<bool, KBIE_A>;
        impl KBIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> KBIE_A {
                match self.bits {
                    false => KBIE_A::_0,
                    true => KBIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == KBIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == KBIE_A::_1
            }
        }
        #[doc = "Write proxy for field `KBIE`"]
        pub struct KBIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KBIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: KBIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "KBI interrupt not enabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(KBIE_A::_0)
            }
            #[doc = "KBI interrupt enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(KBIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `KBACK`"]
        pub struct KBACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KBACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "KBI Interrupt Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum KBF_A {
            #[doc = "0: KBI interrupt request not detected."]
            _0 = 0,
            #[doc = "1: KBI interrupt request detected."]
            _1 = 1,
        }
        impl From<KBF_A> for bool {
            #[inline(always)]
            fn from(variant: KBF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `KBF`"]
        pub type KBF_R = crate::R<bool, KBF_A>;
        impl KBF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> KBF_A {
                match self.bits {
                    false => KBF_A::_0,
                    true => KBF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == KBF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == KBF_A::_1
            }
        }
        impl R {
            #[doc = "Bit 0 - KBI Detection Mode"]
            #[inline(always)]
            pub fn kbmod(&self) -> KBMOD_R {
                KBMOD_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - KBI Interrupt Enable"]
            #[inline(always)]
            pub fn kbie(&self) -> KBIE_R {
                KBIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - KBI Interrupt Flag"]
            #[inline(always)]
            pub fn kbf(&self) -> KBF_R {
                KBF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - KBI Detection Mode"]
            #[inline(always)]
            pub fn kbmod(&mut self) -> KBMOD_W {
                KBMOD_W { w: self }
            }
            #[doc = "Bit 1 - KBI Interrupt Enable"]
            #[inline(always)]
            pub fn kbie(&mut self) -> KBIE_W {
                KBIE_W { w: self }
            }
            #[doc = "Bit 2 - KBI Acknowledge"]
            #[inline(always)]
            pub fn kback(&mut self) -> KBACK_W {
                KBACK_W { w: self }
            }
        }
    }
    #[doc = "KBIx Pin Enable Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pe](pe) module"]
    pub type PE = crate::Reg<u8, _PE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PE;
    #[doc = "`read()` method returns [pe::R](pe::R) reader structure"]
    impl crate::Readable for PE {}
    #[doc = "`write(|w| ..)` method takes [pe::W](pe::W) writer structure"]
    impl crate::Writable for PE {}
    #[doc = "KBIx Pin Enable Register"]
    pub mod pe {
        #[doc = "Reader of register PE"]
        pub type R = crate::R<u8, super::PE>;
        #[doc = "Writer for register PE"]
        pub type W = crate::W<u8, super::PE>;
        #[doc = "Register PE `reset()`'s with value 0"]
        impl crate::ResetValue for super::PE {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "KBI Pin Enables\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum KBIPE_A {
            #[doc = "0: Pin is not enabled as KBI interrupt."]
            _0 = 0,
            #[doc = "1: Pin is enabled as KBI interrupt."]
            _1 = 1,
        }
        impl From<KBIPE_A> for u8 {
            #[inline(always)]
            fn from(variant: KBIPE_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `KBIPE`"]
        pub type KBIPE_R = crate::R<u8, KBIPE_A>;
        impl KBIPE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, KBIPE_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(KBIPE_A::_0),
                    1 => Val(KBIPE_A::_1),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == KBIPE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == KBIPE_A::_1
            }
        }
        #[doc = "Write proxy for field `KBIPE`"]
        pub struct KBIPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KBIPE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: KBIPE_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Pin is not enabled as KBI interrupt."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(KBIPE_A::_0)
            }
            #[doc = "Pin is enabled as KBI interrupt."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(KBIPE_A::_1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - KBI Pin Enables"]
            #[inline(always)]
            pub fn kbipe(&self) -> KBIPE_R {
                KBIPE_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - KBI Pin Enables"]
            #[inline(always)]
            pub fn kbipe(&mut self) -> KBIPE_W {
                KBIPE_W { w: self }
            }
        }
    }
    #[doc = "KBIx Edge Select Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [es](es) module"]
    pub type ES = crate::Reg<u8, _ES>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ES;
    #[doc = "`read()` method returns [es::R](es::R) reader structure"]
    impl crate::Readable for ES {}
    #[doc = "`write(|w| ..)` method takes [es::W](es::W) writer structure"]
    impl crate::Writable for ES {}
    #[doc = "KBIx Edge Select Register"]
    pub mod es {
        #[doc = "Reader of register ES"]
        pub type R = crate::R<u8, super::ES>;
        #[doc = "Writer for register ES"]
        pub type W = crate::W<u8, super::ES>;
        #[doc = "Register ES `reset()`'s with value 0"]
        impl crate::ResetValue for super::ES {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "KBI Edge Selects\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum KBEDG_A {
            #[doc = "0: Falling edge/low level."]
            _0 = 0,
            #[doc = "1: Rising edge/high level."]
            _1 = 1,
        }
        impl From<KBEDG_A> for u8 {
            #[inline(always)]
            fn from(variant: KBEDG_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `KBEDG`"]
        pub type KBEDG_R = crate::R<u8, KBEDG_A>;
        impl KBEDG_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, KBEDG_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(KBEDG_A::_0),
                    1 => Val(KBEDG_A::_1),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == KBEDG_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == KBEDG_A::_1
            }
        }
        #[doc = "Write proxy for field `KBEDG`"]
        pub struct KBEDG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KBEDG_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: KBEDG_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Falling edge/low level."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(KBEDG_A::_0)
            }
            #[doc = "Rising edge/high level."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(KBEDG_A::_1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - KBI Edge Selects"]
            #[inline(always)]
            pub fn kbedg(&self) -> KBEDG_R {
                KBEDG_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - KBI Edge Selects"]
            #[inline(always)]
            pub fn kbedg(&mut self) -> KBEDG_W {
                KBEDG_W { w: self }
            }
        }
    }
}
#[doc = "Power management"]
pub struct PMC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PMC {}
impl PMC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pmc::RegisterBlock {
        0x4007_d000 as *const _
    }
}
impl Deref for PMC {
    type Target = pmc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*PMC::ptr() }
    }
}
#[doc = "Power management"]
pub mod pmc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - System Power Management Status and Control 1 Register"]
        pub spmsc1: SPMSC1,
        #[doc = "0x01 - System Power Management Status and Control 2 Register"]
        pub spmsc2: SPMSC2,
    }
    #[doc = "System Power Management Status and Control 1 Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spmsc1](spmsc1) module"]
    pub type SPMSC1 = crate::Reg<u8, _SPMSC1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SPMSC1;
    #[doc = "`read()` method returns [spmsc1::R](spmsc1::R) reader structure"]
    impl crate::Readable for SPMSC1 {}
    #[doc = "`write(|w| ..)` method takes [spmsc1::W](spmsc1::W) writer structure"]
    impl crate::Writable for SPMSC1 {}
    #[doc = "System Power Management Status and Control 1 Register"]
    pub mod spmsc1 {
        #[doc = "Reader of register SPMSC1"]
        pub type R = crate::R<u8, super::SPMSC1>;
        #[doc = "Writer for register SPMSC1"]
        pub type W = crate::W<u8, super::SPMSC1>;
        #[doc = "Register SPMSC1 `reset()`'s with value 0x1c"]
        impl crate::ResetValue for super::SPMSC1 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x1c
            }
        }
        #[doc = "Bandgap Buffer Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum BGBE_A {
            #[doc = "0: Bandgap buffer is disabled."]
            _0 = 0,
            #[doc = "1: Bandgap buffer is enabled."]
            _1 = 1,
        }
        impl From<BGBE_A> for bool {
            #[inline(always)]
            fn from(variant: BGBE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `BGBE`"]
        pub type BGBE_R = crate::R<bool, BGBE_A>;
        impl BGBE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> BGBE_A {
                match self.bits {
                    false => BGBE_A::_0,
                    true => BGBE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == BGBE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == BGBE_A::_1
            }
        }
        #[doc = "Write proxy for field `BGBE`"]
        pub struct BGBE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BGBE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: BGBE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Bandgap buffer is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(BGBE_A::_0)
            }
            #[doc = "Bandgap buffer is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(BGBE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        #[doc = "Low-Voltage Detect Enable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LVDE_A {
            #[doc = "0: LVD logic is disabled."]
            _0 = 0,
            #[doc = "1: LVD logic is enabled."]
            _1 = 1,
        }
        impl From<LVDE_A> for bool {
            #[inline(always)]
            fn from(variant: LVDE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LVDE`"]
        pub type LVDE_R = crate::R<bool, LVDE_A>;
        impl LVDE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LVDE_A {
                match self.bits {
                    false => LVDE_A::_0,
                    true => LVDE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LVDE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LVDE_A::_1
            }
        }
        #[doc = "Write proxy for field `LVDE`"]
        pub struct LVDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LVDE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LVDE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "LVD logic is disabled."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(LVDE_A::_0)
            }
            #[doc = "LVD logic is enabled."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(LVDE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Low-Voltage Detect Stop Enable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LVDSE_A {
            #[doc = "0: Low-voltage detect is disabled during Stop mode."]
            _0 = 0,
            #[doc = "1: Low-voltage detect is enabled during Stop mode."]
            _1 = 1,
        }
        impl From<LVDSE_A> for bool {
            #[inline(always)]
            fn from(variant: LVDSE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LVDSE`"]
        pub type LVDSE_R = crate::R<bool, LVDSE_A>;
        impl LVDSE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LVDSE_A {
                match self.bits {
                    false => LVDSE_A::_0,
                    true => LVDSE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LVDSE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LVDSE_A::_1
            }
        }
        #[doc = "Write proxy for field `LVDSE`"]
        pub struct LVDSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LVDSE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LVDSE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Low-voltage detect is disabled during Stop mode."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(LVDSE_A::_0)
            }
            #[doc = "Low-voltage detect is enabled during Stop mode."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(LVDSE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u8) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Low-Voltage Detect Reset Enable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LVDRE_A {
            #[doc = "0: LVD events do not generate hardware resets."]
            _0 = 0,
            #[doc = "1: Forces an MCU reset when an enabled low-voltage detect event occurs."]
            _1 = 1,
        }
        impl From<LVDRE_A> for bool {
            #[inline(always)]
            fn from(variant: LVDRE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LVDRE`"]
        pub type LVDRE_R = crate::R<bool, LVDRE_A>;
        impl LVDRE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LVDRE_A {
                match self.bits {
                    false => LVDRE_A::_0,
                    true => LVDRE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LVDRE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LVDRE_A::_1
            }
        }
        #[doc = "Write proxy for field `LVDRE`"]
        pub struct LVDRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LVDRE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LVDRE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "LVD events do not generate hardware resets."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(LVDRE_A::_0)
            }
            #[doc = "Forces an MCU reset when an enabled low-voltage detect event occurs."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(LVDRE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Low-Voltage Warning Interrupt Enable\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LVWIE_A {
            #[doc = "0: Hardware interrupt is disabled (use polling)."]
            _0 = 0,
            #[doc = "1: Requests a hardware interrupt when LVWF = 1."]
            _1 = 1,
        }
        impl From<LVWIE_A> for bool {
            #[inline(always)]
            fn from(variant: LVWIE_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LVWIE`"]
        pub type LVWIE_R = crate::R<bool, LVWIE_A>;
        impl LVWIE_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LVWIE_A {
                match self.bits {
                    false => LVWIE_A::_0,
                    true => LVWIE_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LVWIE_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LVWIE_A::_1
            }
        }
        #[doc = "Write proxy for field `LVWIE`"]
        pub struct LVWIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LVWIE_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LVWIE_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Hardware interrupt is disabled (use polling)."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(LVWIE_A::_0)
            }
            #[doc = "Requests a hardware interrupt when LVWF = 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(LVWIE_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `LVWACK`"]
        pub struct LVWACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LVWACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Low-Voltage Warning Flag\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LVWF_A {
            #[doc = "0: Low-voltage warning is not present."]
            _0 = 0,
            #[doc = "1: Low-voltage warning is present or was present."]
            _1 = 1,
        }
        impl From<LVWF_A> for bool {
            #[inline(always)]
            fn from(variant: LVWF_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LVWF`"]
        pub type LVWF_R = crate::R<bool, LVWF_A>;
        impl LVWF_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LVWF_A {
                match self.bits {
                    false => LVWF_A::_0,
                    true => LVWF_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LVWF_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LVWF_A::_1
            }
        }
        impl R {
            #[doc = "Bit 0 - Bandgap Buffer Enable"]
            #[inline(always)]
            pub fn bgbe(&self) -> BGBE_R {
                BGBE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 2 - Low-Voltage Detect Enable"]
            #[inline(always)]
            pub fn lvde(&self) -> LVDE_R {
                LVDE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Low-Voltage Detect Stop Enable"]
            #[inline(always)]
            pub fn lvdse(&self) -> LVDSE_R {
                LVDSE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Low-Voltage Detect Reset Enable"]
            #[inline(always)]
            pub fn lvdre(&self) -> LVDRE_R {
                LVDRE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Low-Voltage Warning Interrupt Enable"]
            #[inline(always)]
            pub fn lvwie(&self) -> LVWIE_R {
                LVWIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Low-Voltage Warning Flag"]
            #[inline(always)]
            pub fn lvwf(&self) -> LVWF_R {
                LVWF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Bandgap Buffer Enable"]
            #[inline(always)]
            pub fn bgbe(&mut self) -> BGBE_W {
                BGBE_W { w: self }
            }
            #[doc = "Bit 2 - Low-Voltage Detect Enable"]
            #[inline(always)]
            pub fn lvde(&mut self) -> LVDE_W {
                LVDE_W { w: self }
            }
            #[doc = "Bit 3 - Low-Voltage Detect Stop Enable"]
            #[inline(always)]
            pub fn lvdse(&mut self) -> LVDSE_W {
                LVDSE_W { w: self }
            }
            #[doc = "Bit 4 - Low-Voltage Detect Reset Enable"]
            #[inline(always)]
            pub fn lvdre(&mut self) -> LVDRE_W {
                LVDRE_W { w: self }
            }
            #[doc = "Bit 5 - Low-Voltage Warning Interrupt Enable"]
            #[inline(always)]
            pub fn lvwie(&mut self) -> LVWIE_W {
                LVWIE_W { w: self }
            }
            #[doc = "Bit 6 - Low-Voltage Warning Acknowledge"]
            #[inline(always)]
            pub fn lvwack(&mut self) -> LVWACK_W {
                LVWACK_W { w: self }
            }
        }
    }
    #[doc = "System Power Management Status and Control 2 Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [spmsc2](spmsc2) module"]
    pub type SPMSC2 = crate::Reg<u8, _SPMSC2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SPMSC2;
    #[doc = "`read()` method returns [spmsc2::R](spmsc2::R) reader structure"]
    impl crate::Readable for SPMSC2 {}
    #[doc = "`write(|w| ..)` method takes [spmsc2::W](spmsc2::W) writer structure"]
    impl crate::Writable for SPMSC2 {}
    #[doc = "System Power Management Status and Control 2 Register"]
    pub mod spmsc2 {
        #[doc = "Reader of register SPMSC2"]
        pub type R = crate::R<u8, super::SPMSC2>;
        #[doc = "Writer for register SPMSC2"]
        pub type W = crate::W<u8, super::SPMSC2>;
        #[doc = "Register SPMSC2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::SPMSC2 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Low-Voltage Warning Voltage Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum LVWV_A {
            #[doc = "0: Low trip point is selected (VLVW = VLVW1)."]
            _00 = 0,
            #[doc = "1: Middle 1 trip point is selected (VLVW = VLVW2)."]
            _01 = 1,
            #[doc = "2: Middle 2 trip point is selected (VLVW = VLVW3)."]
            _10 = 2,
            #[doc = "3: High trip point is selected (VLVW = VLVW4)."]
            _11 = 3,
        }
        impl From<LVWV_A> for u8 {
            #[inline(always)]
            fn from(variant: LVWV_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `LVWV`"]
        pub type LVWV_R = crate::R<u8, LVWV_A>;
        impl LVWV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LVWV_A {
                match self.bits {
                    0 => LVWV_A::_00,
                    1 => LVWV_A::_01,
                    2 => LVWV_A::_10,
                    3 => LVWV_A::_11,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `_00`"]
            #[inline(always)]
            pub fn is_00(&self) -> bool {
                *self == LVWV_A::_00
            }
            #[doc = "Checks if the value of the field is `_01`"]
            #[inline(always)]
            pub fn is_01(&self) -> bool {
                *self == LVWV_A::_01
            }
            #[doc = "Checks if the value of the field is `_10`"]
            #[inline(always)]
            pub fn is_10(&self) -> bool {
                *self == LVWV_A::_10
            }
            #[doc = "Checks if the value of the field is `_11`"]
            #[inline(always)]
            pub fn is_11(&self) -> bool {
                *self == LVWV_A::_11
            }
        }
        #[doc = "Write proxy for field `LVWV`"]
        pub struct LVWV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LVWV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LVWV_A) -> &'a mut W {
                {
                    self.bits(variant.into())
                }
            }
            #[doc = "Low trip point is selected (VLVW = VLVW1)."]
            #[inline(always)]
            pub fn _00(self) -> &'a mut W {
                self.variant(LVWV_A::_00)
            }
            #[doc = "Middle 1 trip point is selected (VLVW = VLVW2)."]
            #[inline(always)]
            pub fn _01(self) -> &'a mut W {
                self.variant(LVWV_A::_01)
            }
            #[doc = "Middle 2 trip point is selected (VLVW = VLVW3)."]
            #[inline(always)]
            pub fn _10(self) -> &'a mut W {
                self.variant(LVWV_A::_10)
            }
            #[doc = "High trip point is selected (VLVW = VLVW4)."]
            #[inline(always)]
            pub fn _11(self) -> &'a mut W {
                self.variant(LVWV_A::_11)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u8) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Low-Voltage Detect Voltage Select\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum LVDV_A {
            #[doc = "0: Low trip point is selected (VLVD = VLVDL)."]
            _0 = 0,
            #[doc = "1: High trip point is selected (VLVD = VLVDH)."]
            _1 = 1,
        }
        impl From<LVDV_A> for bool {
            #[inline(always)]
            fn from(variant: LVDV_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `LVDV`"]
        pub type LVDV_R = crate::R<bool, LVDV_A>;
        impl LVDV_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LVDV_A {
                match self.bits {
                    false => LVDV_A::_0,
                    true => LVDV_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == LVDV_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == LVDV_A::_1
            }
        }
        #[doc = "Write proxy for field `LVDV`"]
        pub struct LVDV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LVDV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LVDV_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Low trip point is selected (VLVD = VLVDL)."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(LVDV_A::_0)
            }
            #[doc = "High trip point is selected (VLVD = VLVDH)."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(LVDV_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:5 - Low-Voltage Warning Voltage Select"]
            #[inline(always)]
            pub fn lvwv(&self) -> LVWV_R {
                LVWV_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - Low-Voltage Detect Voltage Select"]
            #[inline(always)]
            pub fn lvdv(&self) -> LVDV_R {
                LVDV_R::new(((self.bits >> 6) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 4:5 - Low-Voltage Warning Voltage Select"]
            #[inline(always)]
            pub fn lvwv(&mut self) -> LVWV_W {
                LVWV_W { w: self }
            }
            #[doc = "Bit 6 - Low-Voltage Detect Voltage Select"]
            #[inline(always)]
            pub fn lvdv(&mut self) -> LVDV_W {
                LVDV_W { w: self }
            }
        }
    }
}
#[doc = "General Purpose Input/Output"]
pub struct GPIOA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOA {}
impl GPIOA {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        0x400f_f000 as *const _
    }
}
impl Deref for GPIOA {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOA::ptr() }
    }
}
#[doc = "General Purpose Input/Output"]
pub mod gpioa {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Port Data Output Register"]
        pub pdor: PDOR,
        #[doc = "0x04 - Port Set Output Register"]
        pub psor: PSOR,
        #[doc = "0x08 - Port Clear Output Register"]
        pub pcor: PCOR,
        #[doc = "0x0c - Port Toggle Output Register"]
        pub ptor: PTOR,
        #[doc = "0x10 - Port Data Input Register"]
        pub pdir: PDIR,
        #[doc = "0x14 - Port Data Direction Register"]
        pub pddr: PDDR,
        #[doc = "0x18 - Port Input Disable Register"]
        pub pidr: PIDR,
    }
    #[doc = "Port Data Output Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdor](pdor) module"]
    pub type PDOR = crate::Reg<u32, _PDOR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDOR;
    #[doc = "`read()` method returns [pdor::R](pdor::R) reader structure"]
    impl crate::Readable for PDOR {}
    #[doc = "`write(|w| ..)` method takes [pdor::W](pdor::W) writer structure"]
    impl crate::Writable for PDOR {}
    #[doc = "Port Data Output Register"]
    pub mod pdor {
        #[doc = "Reader of register PDOR"]
        pub type R = crate::R<u32, super::PDOR>;
        #[doc = "Writer for register PDOR"]
        pub type W = crate::W<u32, super::PDOR>;
        #[doc = "Register PDOR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PDOR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO0_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO0_A> for bool {
            #[inline(always)]
            fn from(variant: PDO0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO0`"]
        pub type PDO0_R = crate::R<bool, PDO0_A>;
        impl PDO0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO0_A {
                match self.bits {
                    false => PDO0_A::_0,
                    true => PDO0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO0_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO0`"]
        pub struct PDO0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO0_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO1_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO1_A> for bool {
            #[inline(always)]
            fn from(variant: PDO1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO1`"]
        pub type PDO1_R = crate::R<bool, PDO1_A>;
        impl PDO1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO1_A {
                match self.bits {
                    false => PDO1_A::_0,
                    true => PDO1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO1_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO1`"]
        pub struct PDO1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO1_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO2_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO2_A> for bool {
            #[inline(always)]
            fn from(variant: PDO2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO2`"]
        pub type PDO2_R = crate::R<bool, PDO2_A>;
        impl PDO2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO2_A {
                match self.bits {
                    false => PDO2_A::_0,
                    true => PDO2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO2_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO2`"]
        pub struct PDO2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO2_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO3_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO3_A> for bool {
            #[inline(always)]
            fn from(variant: PDO3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO3`"]
        pub type PDO3_R = crate::R<bool, PDO3_A>;
        impl PDO3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO3_A {
                match self.bits {
                    false => PDO3_A::_0,
                    true => PDO3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO3_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO3`"]
        pub struct PDO3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO3_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO4_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO4_A> for bool {
            #[inline(always)]
            fn from(variant: PDO4_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO4`"]
        pub type PDO4_R = crate::R<bool, PDO4_A>;
        impl PDO4_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO4_A {
                match self.bits {
                    false => PDO4_A::_0,
                    true => PDO4_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO4_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO4_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO4`"]
        pub struct PDO4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO4_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO4_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO5_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO5_A> for bool {
            #[inline(always)]
            fn from(variant: PDO5_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO5`"]
        pub type PDO5_R = crate::R<bool, PDO5_A>;
        impl PDO5_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO5_A {
                match self.bits {
                    false => PDO5_A::_0,
                    true => PDO5_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO5_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO5_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO5`"]
        pub struct PDO5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO5_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO5_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO6_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO6_A> for bool {
            #[inline(always)]
            fn from(variant: PDO6_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO6`"]
        pub type PDO6_R = crate::R<bool, PDO6_A>;
        impl PDO6_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO6_A {
                match self.bits {
                    false => PDO6_A::_0,
                    true => PDO6_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO6_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO6_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO6`"]
        pub struct PDO6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO6_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO6_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO7_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO7_A> for bool {
            #[inline(always)]
            fn from(variant: PDO7_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO7`"]
        pub type PDO7_R = crate::R<bool, PDO7_A>;
        impl PDO7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO7_A {
                match self.bits {
                    false => PDO7_A::_0,
                    true => PDO7_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO7_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO7_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO7`"]
        pub struct PDO7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO7_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO7_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO8_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO8_A> for bool {
            #[inline(always)]
            fn from(variant: PDO8_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO8`"]
        pub type PDO8_R = crate::R<bool, PDO8_A>;
        impl PDO8_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO8_A {
                match self.bits {
                    false => PDO8_A::_0,
                    true => PDO8_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO8_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO8_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO8`"]
        pub struct PDO8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO8_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO8_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO9_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO9_A> for bool {
            #[inline(always)]
            fn from(variant: PDO9_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO9`"]
        pub type PDO9_R = crate::R<bool, PDO9_A>;
        impl PDO9_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO9_A {
                match self.bits {
                    false => PDO9_A::_0,
                    true => PDO9_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO9_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO9_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO9`"]
        pub struct PDO9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO9_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO9_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO10_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO10_A> for bool {
            #[inline(always)]
            fn from(variant: PDO10_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO10`"]
        pub type PDO10_R = crate::R<bool, PDO10_A>;
        impl PDO10_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO10_A {
                match self.bits {
                    false => PDO10_A::_0,
                    true => PDO10_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO10_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO10_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO10`"]
        pub struct PDO10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO10_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO10_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO11_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO11_A> for bool {
            #[inline(always)]
            fn from(variant: PDO11_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO11`"]
        pub type PDO11_R = crate::R<bool, PDO11_A>;
        impl PDO11_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO11_A {
                match self.bits {
                    false => PDO11_A::_0,
                    true => PDO11_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO11_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO11_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO11`"]
        pub struct PDO11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO11_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO11_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO12_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO12_A> for bool {
            #[inline(always)]
            fn from(variant: PDO12_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO12`"]
        pub type PDO12_R = crate::R<bool, PDO12_A>;
        impl PDO12_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO12_A {
                match self.bits {
                    false => PDO12_A::_0,
                    true => PDO12_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO12_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO12_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO12`"]
        pub struct PDO12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO12_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO12_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO13_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO13_A> for bool {
            #[inline(always)]
            fn from(variant: PDO13_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO13`"]
        pub type PDO13_R = crate::R<bool, PDO13_A>;
        impl PDO13_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO13_A {
                match self.bits {
                    false => PDO13_A::_0,
                    true => PDO13_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO13_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO13_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO13`"]
        pub struct PDO13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO13_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO13_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO14_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO14_A> for bool {
            #[inline(always)]
            fn from(variant: PDO14_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO14`"]
        pub type PDO14_R = crate::R<bool, PDO14_A>;
        impl PDO14_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO14_A {
                match self.bits {
                    false => PDO14_A::_0,
                    true => PDO14_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO14_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO14_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO14`"]
        pub struct PDO14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO14_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO14_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO15_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO15_A> for bool {
            #[inline(always)]
            fn from(variant: PDO15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO15`"]
        pub type PDO15_R = crate::R<bool, PDO15_A>;
        impl PDO15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO15_A {
                match self.bits {
                    false => PDO15_A::_0,
                    true => PDO15_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO15_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO15_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO15`"]
        pub struct PDO15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO15_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO15_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO16_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO16_A> for bool {
            #[inline(always)]
            fn from(variant: PDO16_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO16`"]
        pub type PDO16_R = crate::R<bool, PDO16_A>;
        impl PDO16_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO16_A {
                match self.bits {
                    false => PDO16_A::_0,
                    true => PDO16_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO16_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO16_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO16`"]
        pub struct PDO16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO16_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO16_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO17_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO17_A> for bool {
            #[inline(always)]
            fn from(variant: PDO17_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO17`"]
        pub type PDO17_R = crate::R<bool, PDO17_A>;
        impl PDO17_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO17_A {
                match self.bits {
                    false => PDO17_A::_0,
                    true => PDO17_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO17_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO17_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO17`"]
        pub struct PDO17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO17_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO17_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO17_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO18_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO18_A> for bool {
            #[inline(always)]
            fn from(variant: PDO18_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO18`"]
        pub type PDO18_R = crate::R<bool, PDO18_A>;
        impl PDO18_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO18_A {
                match self.bits {
                    false => PDO18_A::_0,
                    true => PDO18_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO18_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO18_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO18`"]
        pub struct PDO18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO18_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO18_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO18_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO19_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO19_A> for bool {
            #[inline(always)]
            fn from(variant: PDO19_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO19`"]
        pub type PDO19_R = crate::R<bool, PDO19_A>;
        impl PDO19_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO19_A {
                match self.bits {
                    false => PDO19_A::_0,
                    true => PDO19_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO19_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO19_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO19`"]
        pub struct PDO19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO19_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO19_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO19_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO20_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO20_A> for bool {
            #[inline(always)]
            fn from(variant: PDO20_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO20`"]
        pub type PDO20_R = crate::R<bool, PDO20_A>;
        impl PDO20_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO20_A {
                match self.bits {
                    false => PDO20_A::_0,
                    true => PDO20_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO20_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO20_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO20`"]
        pub struct PDO20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO20_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO20_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO20_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO21_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO21_A> for bool {
            #[inline(always)]
            fn from(variant: PDO21_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO21`"]
        pub type PDO21_R = crate::R<bool, PDO21_A>;
        impl PDO21_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO21_A {
                match self.bits {
                    false => PDO21_A::_0,
                    true => PDO21_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO21_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO21_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO21`"]
        pub struct PDO21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO21_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO21_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO21_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO22_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO22_A> for bool {
            #[inline(always)]
            fn from(variant: PDO22_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO22`"]
        pub type PDO22_R = crate::R<bool, PDO22_A>;
        impl PDO22_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO22_A {
                match self.bits {
                    false => PDO22_A::_0,
                    true => PDO22_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO22_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO22_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO22`"]
        pub struct PDO22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO22_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO22_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO22_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO23_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO23_A> for bool {
            #[inline(always)]
            fn from(variant: PDO23_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO23`"]
        pub type PDO23_R = crate::R<bool, PDO23_A>;
        impl PDO23_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO23_A {
                match self.bits {
                    false => PDO23_A::_0,
                    true => PDO23_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO23_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO23_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO23`"]
        pub struct PDO23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO23_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO23_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO23_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO23_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO24_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO24_A> for bool {
            #[inline(always)]
            fn from(variant: PDO24_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO24`"]
        pub type PDO24_R = crate::R<bool, PDO24_A>;
        impl PDO24_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO24_A {
                match self.bits {
                    false => PDO24_A::_0,
                    true => PDO24_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO24_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO24_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO24`"]
        pub struct PDO24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO24_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO24_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO24_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO24_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO25_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO25_A> for bool {
            #[inline(always)]
            fn from(variant: PDO25_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO25`"]
        pub type PDO25_R = crate::R<bool, PDO25_A>;
        impl PDO25_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO25_A {
                match self.bits {
                    false => PDO25_A::_0,
                    true => PDO25_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO25_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO25_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO25`"]
        pub struct PDO25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO25_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO25_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO25_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO25_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO26_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO26_A> for bool {
            #[inline(always)]
            fn from(variant: PDO26_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO26`"]
        pub type PDO26_R = crate::R<bool, PDO26_A>;
        impl PDO26_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO26_A {
                match self.bits {
                    false => PDO26_A::_0,
                    true => PDO26_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO26_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO26_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO26`"]
        pub struct PDO26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO26_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO26_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO26_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO26_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO27_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO27_A> for bool {
            #[inline(always)]
            fn from(variant: PDO27_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO27`"]
        pub type PDO27_R = crate::R<bool, PDO27_A>;
        impl PDO27_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO27_A {
                match self.bits {
                    false => PDO27_A::_0,
                    true => PDO27_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO27_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO27_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO27`"]
        pub struct PDO27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO27_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO27_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO27_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO27_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO28_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO28_A> for bool {
            #[inline(always)]
            fn from(variant: PDO28_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO28`"]
        pub type PDO28_R = crate::R<bool, PDO28_A>;
        impl PDO28_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO28_A {
                match self.bits {
                    false => PDO28_A::_0,
                    true => PDO28_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO28_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO28_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO28`"]
        pub struct PDO28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO28_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO28_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO28_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO28_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO29_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO29_A> for bool {
            #[inline(always)]
            fn from(variant: PDO29_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO29`"]
        pub type PDO29_R = crate::R<bool, PDO29_A>;
        impl PDO29_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO29_A {
                match self.bits {
                    false => PDO29_A::_0,
                    true => PDO29_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO29_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO29_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO29`"]
        pub struct PDO29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO29_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO29_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO29_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO29_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO30_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO30_A> for bool {
            #[inline(always)]
            fn from(variant: PDO30_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO30`"]
        pub type PDO30_R = crate::R<bool, PDO30_A>;
        impl PDO30_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO30_A {
                match self.bits {
                    false => PDO30_A::_0,
                    true => PDO30_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO30_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO30_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO30`"]
        pub struct PDO30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO30_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO30_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO30_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO30_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDO31_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO31_A> for bool {
            #[inline(always)]
            fn from(variant: PDO31_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDO31`"]
        pub type PDO31_R = crate::R<bool, PDO31_A>;
        impl PDO31_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDO31_A {
                match self.bits {
                    false => PDO31_A::_0,
                    true => PDO31_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO31_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO31_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO31`"]
        pub struct PDO31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO31_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO31_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO31_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO31_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Port Data Output"]
            #[inline(always)]
            pub fn pdo0(&self) -> PDO0_R {
                PDO0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port Data Output"]
            #[inline(always)]
            pub fn pdo1(&self) -> PDO1_R {
                PDO1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port Data Output"]
            #[inline(always)]
            pub fn pdo2(&self) -> PDO2_R {
                PDO2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port Data Output"]
            #[inline(always)]
            pub fn pdo3(&self) -> PDO3_R {
                PDO3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port Data Output"]
            #[inline(always)]
            pub fn pdo4(&self) -> PDO4_R {
                PDO4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port Data Output"]
            #[inline(always)]
            pub fn pdo5(&self) -> PDO5_R {
                PDO5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port Data Output"]
            #[inline(always)]
            pub fn pdo6(&self) -> PDO6_R {
                PDO6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port Data Output"]
            #[inline(always)]
            pub fn pdo7(&self) -> PDO7_R {
                PDO7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port Data Output"]
            #[inline(always)]
            pub fn pdo8(&self) -> PDO8_R {
                PDO8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port Data Output"]
            #[inline(always)]
            pub fn pdo9(&self) -> PDO9_R {
                PDO9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port Data Output"]
            #[inline(always)]
            pub fn pdo10(&self) -> PDO10_R {
                PDO10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port Data Output"]
            #[inline(always)]
            pub fn pdo11(&self) -> PDO11_R {
                PDO11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port Data Output"]
            #[inline(always)]
            pub fn pdo12(&self) -> PDO12_R {
                PDO12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port Data Output"]
            #[inline(always)]
            pub fn pdo13(&self) -> PDO13_R {
                PDO13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port Data Output"]
            #[inline(always)]
            pub fn pdo14(&self) -> PDO14_R {
                PDO14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Port Data Output"]
            #[inline(always)]
            pub fn pdo15(&self) -> PDO15_R {
                PDO15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Port Data Output"]
            #[inline(always)]
            pub fn pdo16(&self) -> PDO16_R {
                PDO16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Port Data Output"]
            #[inline(always)]
            pub fn pdo17(&self) -> PDO17_R {
                PDO17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Port Data Output"]
            #[inline(always)]
            pub fn pdo18(&self) -> PDO18_R {
                PDO18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Port Data Output"]
            #[inline(always)]
            pub fn pdo19(&self) -> PDO19_R {
                PDO19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Port Data Output"]
            #[inline(always)]
            pub fn pdo20(&self) -> PDO20_R {
                PDO20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Port Data Output"]
            #[inline(always)]
            pub fn pdo21(&self) -> PDO21_R {
                PDO21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Port Data Output"]
            #[inline(always)]
            pub fn pdo22(&self) -> PDO22_R {
                PDO22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Port Data Output"]
            #[inline(always)]
            pub fn pdo23(&self) -> PDO23_R {
                PDO23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Port Data Output"]
            #[inline(always)]
            pub fn pdo24(&self) -> PDO24_R {
                PDO24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Port Data Output"]
            #[inline(always)]
            pub fn pdo25(&self) -> PDO25_R {
                PDO25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Port Data Output"]
            #[inline(always)]
            pub fn pdo26(&self) -> PDO26_R {
                PDO26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Port Data Output"]
            #[inline(always)]
            pub fn pdo27(&self) -> PDO27_R {
                PDO27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Port Data Output"]
            #[inline(always)]
            pub fn pdo28(&self) -> PDO28_R {
                PDO28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Port Data Output"]
            #[inline(always)]
            pub fn pdo29(&self) -> PDO29_R {
                PDO29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Port Data Output"]
            #[inline(always)]
            pub fn pdo30(&self) -> PDO30_R {
                PDO30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Port Data Output"]
            #[inline(always)]
            pub fn pdo31(&self) -> PDO31_R {
                PDO31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Port Data Output"]
            #[inline(always)]
            pub fn pdo0(&mut self) -> PDO0_W {
                PDO0_W { w: self }
            }
            #[doc = "Bit 1 - Port Data Output"]
            #[inline(always)]
            pub fn pdo1(&mut self) -> PDO1_W {
                PDO1_W { w: self }
            }
            #[doc = "Bit 2 - Port Data Output"]
            #[inline(always)]
            pub fn pdo2(&mut self) -> PDO2_W {
                PDO2_W { w: self }
            }
            #[doc = "Bit 3 - Port Data Output"]
            #[inline(always)]
            pub fn pdo3(&mut self) -> PDO3_W {
                PDO3_W { w: self }
            }
            #[doc = "Bit 4 - Port Data Output"]
            #[inline(always)]
            pub fn pdo4(&mut self) -> PDO4_W {
                PDO4_W { w: self }
            }
            #[doc = "Bit 5 - Port Data Output"]
            #[inline(always)]
            pub fn pdo5(&mut self) -> PDO5_W {
                PDO5_W { w: self }
            }
            #[doc = "Bit 6 - Port Data Output"]
            #[inline(always)]
            pub fn pdo6(&mut self) -> PDO6_W {
                PDO6_W { w: self }
            }
            #[doc = "Bit 7 - Port Data Output"]
            #[inline(always)]
            pub fn pdo7(&mut self) -> PDO7_W {
                PDO7_W { w: self }
            }
            #[doc = "Bit 8 - Port Data Output"]
            #[inline(always)]
            pub fn pdo8(&mut self) -> PDO8_W {
                PDO8_W { w: self }
            }
            #[doc = "Bit 9 - Port Data Output"]
            #[inline(always)]
            pub fn pdo9(&mut self) -> PDO9_W {
                PDO9_W { w: self }
            }
            #[doc = "Bit 10 - Port Data Output"]
            #[inline(always)]
            pub fn pdo10(&mut self) -> PDO10_W {
                PDO10_W { w: self }
            }
            #[doc = "Bit 11 - Port Data Output"]
            #[inline(always)]
            pub fn pdo11(&mut self) -> PDO11_W {
                PDO11_W { w: self }
            }
            #[doc = "Bit 12 - Port Data Output"]
            #[inline(always)]
            pub fn pdo12(&mut self) -> PDO12_W {
                PDO12_W { w: self }
            }
            #[doc = "Bit 13 - Port Data Output"]
            #[inline(always)]
            pub fn pdo13(&mut self) -> PDO13_W {
                PDO13_W { w: self }
            }
            #[doc = "Bit 14 - Port Data Output"]
            #[inline(always)]
            pub fn pdo14(&mut self) -> PDO14_W {
                PDO14_W { w: self }
            }
            #[doc = "Bit 15 - Port Data Output"]
            #[inline(always)]
            pub fn pdo15(&mut self) -> PDO15_W {
                PDO15_W { w: self }
            }
            #[doc = "Bit 16 - Port Data Output"]
            #[inline(always)]
            pub fn pdo16(&mut self) -> PDO16_W {
                PDO16_W { w: self }
            }
            #[doc = "Bit 17 - Port Data Output"]
            #[inline(always)]
            pub fn pdo17(&mut self) -> PDO17_W {
                PDO17_W { w: self }
            }
            #[doc = "Bit 18 - Port Data Output"]
            #[inline(always)]
            pub fn pdo18(&mut self) -> PDO18_W {
                PDO18_W { w: self }
            }
            #[doc = "Bit 19 - Port Data Output"]
            #[inline(always)]
            pub fn pdo19(&mut self) -> PDO19_W {
                PDO19_W { w: self }
            }
            #[doc = "Bit 20 - Port Data Output"]
            #[inline(always)]
            pub fn pdo20(&mut self) -> PDO20_W {
                PDO20_W { w: self }
            }
            #[doc = "Bit 21 - Port Data Output"]
            #[inline(always)]
            pub fn pdo21(&mut self) -> PDO21_W {
                PDO21_W { w: self }
            }
            #[doc = "Bit 22 - Port Data Output"]
            #[inline(always)]
            pub fn pdo22(&mut self) -> PDO22_W {
                PDO22_W { w: self }
            }
            #[doc = "Bit 23 - Port Data Output"]
            #[inline(always)]
            pub fn pdo23(&mut self) -> PDO23_W {
                PDO23_W { w: self }
            }
            #[doc = "Bit 24 - Port Data Output"]
            #[inline(always)]
            pub fn pdo24(&mut self) -> PDO24_W {
                PDO24_W { w: self }
            }
            #[doc = "Bit 25 - Port Data Output"]
            #[inline(always)]
            pub fn pdo25(&mut self) -> PDO25_W {
                PDO25_W { w: self }
            }
            #[doc = "Bit 26 - Port Data Output"]
            #[inline(always)]
            pub fn pdo26(&mut self) -> PDO26_W {
                PDO26_W { w: self }
            }
            #[doc = "Bit 27 - Port Data Output"]
            #[inline(always)]
            pub fn pdo27(&mut self) -> PDO27_W {
                PDO27_W { w: self }
            }
            #[doc = "Bit 28 - Port Data Output"]
            #[inline(always)]
            pub fn pdo28(&mut self) -> PDO28_W {
                PDO28_W { w: self }
            }
            #[doc = "Bit 29 - Port Data Output"]
            #[inline(always)]
            pub fn pdo29(&mut self) -> PDO29_W {
                PDO29_W { w: self }
            }
            #[doc = "Bit 30 - Port Data Output"]
            #[inline(always)]
            pub fn pdo30(&mut self) -> PDO30_W {
                PDO30_W { w: self }
            }
            #[doc = "Bit 31 - Port Data Output"]
            #[inline(always)]
            pub fn pdo31(&mut self) -> PDO31_W {
                PDO31_W { w: self }
            }
        }
    }
    #[doc = "Port Set Output Register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psor](psor) module"]
    pub type PSOR = crate::Reg<u32, _PSOR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSOR;
    #[doc = "`write(|w| ..)` method takes [psor::W](psor::W) writer structure"]
    impl crate::Writable for PSOR {}
    #[doc = "Port Set Output Register"]
    pub mod psor {
        #[doc = "Writer for register PSOR"]
        pub type W = crate::W<u32, super::PSOR>;
        #[doc = "Register PSOR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSOR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO0_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO0_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO0_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO0`"]
        pub struct PTSO0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO0_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO0_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO1_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO1_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO1_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO1`"]
        pub struct PTSO1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO1_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO1_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO2_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO2_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO2_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO2`"]
        pub struct PTSO2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO2_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO2_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO3_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO3_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO3_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO3`"]
        pub struct PTSO3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO3_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO3_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO4_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO4_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO4_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO4`"]
        pub struct PTSO4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO4_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO4_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO5_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO5_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO5_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO5`"]
        pub struct PTSO5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO5_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO5_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO6_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO6_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO6_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO6`"]
        pub struct PTSO6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO6_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO6_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO7_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO7_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO7_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO7`"]
        pub struct PTSO7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO7_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO7_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO8_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO8_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO8_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO8`"]
        pub struct PTSO8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO8_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO8_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO9_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO9_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO9_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO9`"]
        pub struct PTSO9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO9_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO9_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO10_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO10_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO10_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO10`"]
        pub struct PTSO10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO10_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO10_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO11_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO11_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO11_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO11`"]
        pub struct PTSO11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO11_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO11_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO12_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO12_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO12_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO12`"]
        pub struct PTSO12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO12_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO12_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO13_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO13_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO13_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO13`"]
        pub struct PTSO13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO13_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO13_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO14_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO14_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO14_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO14`"]
        pub struct PTSO14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO14_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO14_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO15_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO15_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO15_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO15`"]
        pub struct PTSO15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO15_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO15_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO16_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO16_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO16_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO16`"]
        pub struct PTSO16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO16_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO16_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO16_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO17_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO17_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO17_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO17`"]
        pub struct PTSO17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO17_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO17_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO17_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO18_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO18_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO18_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO18`"]
        pub struct PTSO18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO18_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO18_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO18_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO19_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO19_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO19_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO19`"]
        pub struct PTSO19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO19_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO19_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO19_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO20_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO20_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO20_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO20`"]
        pub struct PTSO20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO20_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO20_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO20_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO21_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO21_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO21_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO21`"]
        pub struct PTSO21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO21_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO21_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO21_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO22_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO22_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO22_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO22`"]
        pub struct PTSO22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO22_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO22_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO22_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO23_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO23_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO23_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO23`"]
        pub struct PTSO23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO23_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO23_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO23_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO23_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO24_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO24_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO24_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO24`"]
        pub struct PTSO24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO24_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO24_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO24_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO24_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO25_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO25_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO25_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO25`"]
        pub struct PTSO25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO25_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO25_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO25_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO25_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO26_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO26_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO26_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO26`"]
        pub struct PTSO26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO26_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO26_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO26_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO26_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO27_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO27_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO27_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO27`"]
        pub struct PTSO27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO27_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO27_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO27_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO27_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO28_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO28_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO28_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO28`"]
        pub struct PTSO28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO28_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO28_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO28_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO28_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO29_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO29_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO29_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO29`"]
        pub struct PTSO29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO29_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO29_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO29_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO29_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO30_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO30_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO30_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO30`"]
        pub struct PTSO30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO30_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO30_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO30_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO30_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTSO31_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO31_AW> for bool {
            #[inline(always)]
            fn from(variant: PTSO31_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTSO31`"]
        pub struct PTSO31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO31_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO31_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO31_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO31_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Port Set Output"]
            #[inline(always)]
            pub fn ptso0(&mut self) -> PTSO0_W {
                PTSO0_W { w: self }
            }
            #[doc = "Bit 1 - Port Set Output"]
            #[inline(always)]
            pub fn ptso1(&mut self) -> PTSO1_W {
                PTSO1_W { w: self }
            }
            #[doc = "Bit 2 - Port Set Output"]
            #[inline(always)]
            pub fn ptso2(&mut self) -> PTSO2_W {
                PTSO2_W { w: self }
            }
            #[doc = "Bit 3 - Port Set Output"]
            #[inline(always)]
            pub fn ptso3(&mut self) -> PTSO3_W {
                PTSO3_W { w: self }
            }
            #[doc = "Bit 4 - Port Set Output"]
            #[inline(always)]
            pub fn ptso4(&mut self) -> PTSO4_W {
                PTSO4_W { w: self }
            }
            #[doc = "Bit 5 - Port Set Output"]
            #[inline(always)]
            pub fn ptso5(&mut self) -> PTSO5_W {
                PTSO5_W { w: self }
            }
            #[doc = "Bit 6 - Port Set Output"]
            #[inline(always)]
            pub fn ptso6(&mut self) -> PTSO6_W {
                PTSO6_W { w: self }
            }
            #[doc = "Bit 7 - Port Set Output"]
            #[inline(always)]
            pub fn ptso7(&mut self) -> PTSO7_W {
                PTSO7_W { w: self }
            }
            #[doc = "Bit 8 - Port Set Output"]
            #[inline(always)]
            pub fn ptso8(&mut self) -> PTSO8_W {
                PTSO8_W { w: self }
            }
            #[doc = "Bit 9 - Port Set Output"]
            #[inline(always)]
            pub fn ptso9(&mut self) -> PTSO9_W {
                PTSO9_W { w: self }
            }
            #[doc = "Bit 10 - Port Set Output"]
            #[inline(always)]
            pub fn ptso10(&mut self) -> PTSO10_W {
                PTSO10_W { w: self }
            }
            #[doc = "Bit 11 - Port Set Output"]
            #[inline(always)]
            pub fn ptso11(&mut self) -> PTSO11_W {
                PTSO11_W { w: self }
            }
            #[doc = "Bit 12 - Port Set Output"]
            #[inline(always)]
            pub fn ptso12(&mut self) -> PTSO12_W {
                PTSO12_W { w: self }
            }
            #[doc = "Bit 13 - Port Set Output"]
            #[inline(always)]
            pub fn ptso13(&mut self) -> PTSO13_W {
                PTSO13_W { w: self }
            }
            #[doc = "Bit 14 - Port Set Output"]
            #[inline(always)]
            pub fn ptso14(&mut self) -> PTSO14_W {
                PTSO14_W { w: self }
            }
            #[doc = "Bit 15 - Port Set Output"]
            #[inline(always)]
            pub fn ptso15(&mut self) -> PTSO15_W {
                PTSO15_W { w: self }
            }
            #[doc = "Bit 16 - Port Set Output"]
            #[inline(always)]
            pub fn ptso16(&mut self) -> PTSO16_W {
                PTSO16_W { w: self }
            }
            #[doc = "Bit 17 - Port Set Output"]
            #[inline(always)]
            pub fn ptso17(&mut self) -> PTSO17_W {
                PTSO17_W { w: self }
            }
            #[doc = "Bit 18 - Port Set Output"]
            #[inline(always)]
            pub fn ptso18(&mut self) -> PTSO18_W {
                PTSO18_W { w: self }
            }
            #[doc = "Bit 19 - Port Set Output"]
            #[inline(always)]
            pub fn ptso19(&mut self) -> PTSO19_W {
                PTSO19_W { w: self }
            }
            #[doc = "Bit 20 - Port Set Output"]
            #[inline(always)]
            pub fn ptso20(&mut self) -> PTSO20_W {
                PTSO20_W { w: self }
            }
            #[doc = "Bit 21 - Port Set Output"]
            #[inline(always)]
            pub fn ptso21(&mut self) -> PTSO21_W {
                PTSO21_W { w: self }
            }
            #[doc = "Bit 22 - Port Set Output"]
            #[inline(always)]
            pub fn ptso22(&mut self) -> PTSO22_W {
                PTSO22_W { w: self }
            }
            #[doc = "Bit 23 - Port Set Output"]
            #[inline(always)]
            pub fn ptso23(&mut self) -> PTSO23_W {
                PTSO23_W { w: self }
            }
            #[doc = "Bit 24 - Port Set Output"]
            #[inline(always)]
            pub fn ptso24(&mut self) -> PTSO24_W {
                PTSO24_W { w: self }
            }
            #[doc = "Bit 25 - Port Set Output"]
            #[inline(always)]
            pub fn ptso25(&mut self) -> PTSO25_W {
                PTSO25_W { w: self }
            }
            #[doc = "Bit 26 - Port Set Output"]
            #[inline(always)]
            pub fn ptso26(&mut self) -> PTSO26_W {
                PTSO26_W { w: self }
            }
            #[doc = "Bit 27 - Port Set Output"]
            #[inline(always)]
            pub fn ptso27(&mut self) -> PTSO27_W {
                PTSO27_W { w: self }
            }
            #[doc = "Bit 28 - Port Set Output"]
            #[inline(always)]
            pub fn ptso28(&mut self) -> PTSO28_W {
                PTSO28_W { w: self }
            }
            #[doc = "Bit 29 - Port Set Output"]
            #[inline(always)]
            pub fn ptso29(&mut self) -> PTSO29_W {
                PTSO29_W { w: self }
            }
            #[doc = "Bit 30 - Port Set Output"]
            #[inline(always)]
            pub fn ptso30(&mut self) -> PTSO30_W {
                PTSO30_W { w: self }
            }
            #[doc = "Bit 31 - Port Set Output"]
            #[inline(always)]
            pub fn ptso31(&mut self) -> PTSO31_W {
                PTSO31_W { w: self }
            }
        }
    }
    #[doc = "Port Clear Output Register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcor](pcor) module"]
    pub type PCOR = crate::Reg<u32, _PCOR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PCOR;
    #[doc = "`write(|w| ..)` method takes [pcor::W](pcor::W) writer structure"]
    impl crate::Writable for PCOR {}
    #[doc = "Port Clear Output Register"]
    pub mod pcor {
        #[doc = "Writer for register PCOR"]
        pub type W = crate::W<u32, super::PCOR>;
        #[doc = "Register PCOR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PCOR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO0_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO0_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO0_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO0`"]
        pub struct PTCO0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO0_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO0_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO1_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO1_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO1_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO1`"]
        pub struct PTCO1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO1_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO1_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO2_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO2_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO2_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO2`"]
        pub struct PTCO2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO2_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO2_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO3_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO3_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO3_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO3`"]
        pub struct PTCO3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO3_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO3_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO4_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO4_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO4_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO4`"]
        pub struct PTCO4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO4_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO4_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO5_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO5_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO5_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO5`"]
        pub struct PTCO5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO5_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO5_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO6_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO6_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO6_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO6`"]
        pub struct PTCO6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO6_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO6_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO7_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO7_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO7_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO7`"]
        pub struct PTCO7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO7_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO7_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO8_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO8_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO8_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO8`"]
        pub struct PTCO8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO8_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO8_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO9_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO9_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO9_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO9`"]
        pub struct PTCO9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO9_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO9_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO10_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO10_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO10_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO10`"]
        pub struct PTCO10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO10_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO10_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO11_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO11_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO11_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO11`"]
        pub struct PTCO11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO11_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO11_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO12_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO12_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO12_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO12`"]
        pub struct PTCO12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO12_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO12_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO13_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO13_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO13_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO13`"]
        pub struct PTCO13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO13_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO13_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO14_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO14_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO14_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO14`"]
        pub struct PTCO14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO14_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO14_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO15_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO15_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO15_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO15`"]
        pub struct PTCO15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO15_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO15_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO16_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO16_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO16_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO16`"]
        pub struct PTCO16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO16_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO16_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO16_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO17_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO17_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO17_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO17`"]
        pub struct PTCO17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO17_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO17_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO17_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO18_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO18_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO18_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO18`"]
        pub struct PTCO18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO18_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO18_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO18_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO19_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO19_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO19_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO19`"]
        pub struct PTCO19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO19_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO19_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO19_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO20_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO20_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO20_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO20`"]
        pub struct PTCO20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO20_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO20_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO20_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO21_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO21_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO21_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO21`"]
        pub struct PTCO21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO21_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO21_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO21_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO22_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO22_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO22_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO22`"]
        pub struct PTCO22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO22_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO22_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO22_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO23_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO23_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO23_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO23`"]
        pub struct PTCO23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO23_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO23_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO23_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO23_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO24_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO24_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO24_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO24`"]
        pub struct PTCO24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO24_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO24_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO24_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO24_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO25_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO25_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO25_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO25`"]
        pub struct PTCO25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO25_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO25_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO25_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO25_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO26_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO26_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO26_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO26`"]
        pub struct PTCO26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO26_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO26_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO26_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO26_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO27_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO27_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO27_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO27`"]
        pub struct PTCO27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO27_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO27_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO27_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO27_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO28_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO28_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO28_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO28`"]
        pub struct PTCO28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO28_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO28_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO28_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO28_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO29_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO29_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO29_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO29`"]
        pub struct PTCO29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO29_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO29_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO29_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO29_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO30_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO30_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO30_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO30`"]
        pub struct PTCO30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO30_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO30_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO30_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO30_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTCO31_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO31_AW> for bool {
            #[inline(always)]
            fn from(variant: PTCO31_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTCO31`"]
        pub struct PTCO31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO31_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO31_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO31_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO31_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco0(&mut self) -> PTCO0_W {
                PTCO0_W { w: self }
            }
            #[doc = "Bit 1 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco1(&mut self) -> PTCO1_W {
                PTCO1_W { w: self }
            }
            #[doc = "Bit 2 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco2(&mut self) -> PTCO2_W {
                PTCO2_W { w: self }
            }
            #[doc = "Bit 3 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco3(&mut self) -> PTCO3_W {
                PTCO3_W { w: self }
            }
            #[doc = "Bit 4 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco4(&mut self) -> PTCO4_W {
                PTCO4_W { w: self }
            }
            #[doc = "Bit 5 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco5(&mut self) -> PTCO5_W {
                PTCO5_W { w: self }
            }
            #[doc = "Bit 6 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco6(&mut self) -> PTCO6_W {
                PTCO6_W { w: self }
            }
            #[doc = "Bit 7 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco7(&mut self) -> PTCO7_W {
                PTCO7_W { w: self }
            }
            #[doc = "Bit 8 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco8(&mut self) -> PTCO8_W {
                PTCO8_W { w: self }
            }
            #[doc = "Bit 9 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco9(&mut self) -> PTCO9_W {
                PTCO9_W { w: self }
            }
            #[doc = "Bit 10 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco10(&mut self) -> PTCO10_W {
                PTCO10_W { w: self }
            }
            #[doc = "Bit 11 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco11(&mut self) -> PTCO11_W {
                PTCO11_W { w: self }
            }
            #[doc = "Bit 12 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco12(&mut self) -> PTCO12_W {
                PTCO12_W { w: self }
            }
            #[doc = "Bit 13 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco13(&mut self) -> PTCO13_W {
                PTCO13_W { w: self }
            }
            #[doc = "Bit 14 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco14(&mut self) -> PTCO14_W {
                PTCO14_W { w: self }
            }
            #[doc = "Bit 15 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco15(&mut self) -> PTCO15_W {
                PTCO15_W { w: self }
            }
            #[doc = "Bit 16 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco16(&mut self) -> PTCO16_W {
                PTCO16_W { w: self }
            }
            #[doc = "Bit 17 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco17(&mut self) -> PTCO17_W {
                PTCO17_W { w: self }
            }
            #[doc = "Bit 18 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco18(&mut self) -> PTCO18_W {
                PTCO18_W { w: self }
            }
            #[doc = "Bit 19 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco19(&mut self) -> PTCO19_W {
                PTCO19_W { w: self }
            }
            #[doc = "Bit 20 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco20(&mut self) -> PTCO20_W {
                PTCO20_W { w: self }
            }
            #[doc = "Bit 21 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco21(&mut self) -> PTCO21_W {
                PTCO21_W { w: self }
            }
            #[doc = "Bit 22 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco22(&mut self) -> PTCO22_W {
                PTCO22_W { w: self }
            }
            #[doc = "Bit 23 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco23(&mut self) -> PTCO23_W {
                PTCO23_W { w: self }
            }
            #[doc = "Bit 24 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco24(&mut self) -> PTCO24_W {
                PTCO24_W { w: self }
            }
            #[doc = "Bit 25 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco25(&mut self) -> PTCO25_W {
                PTCO25_W { w: self }
            }
            #[doc = "Bit 26 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco26(&mut self) -> PTCO26_W {
                PTCO26_W { w: self }
            }
            #[doc = "Bit 27 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco27(&mut self) -> PTCO27_W {
                PTCO27_W { w: self }
            }
            #[doc = "Bit 28 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco28(&mut self) -> PTCO28_W {
                PTCO28_W { w: self }
            }
            #[doc = "Bit 29 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco29(&mut self) -> PTCO29_W {
                PTCO29_W { w: self }
            }
            #[doc = "Bit 30 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco30(&mut self) -> PTCO30_W {
                PTCO30_W { w: self }
            }
            #[doc = "Bit 31 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco31(&mut self) -> PTCO31_W {
                PTCO31_W { w: self }
            }
        }
    }
    #[doc = "Port Toggle Output Register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ptor](ptor) module"]
    pub type PTOR = crate::Reg<u32, _PTOR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PTOR;
    #[doc = "`write(|w| ..)` method takes [ptor::W](ptor::W) writer structure"]
    impl crate::Writable for PTOR {}
    #[doc = "Port Toggle Output Register"]
    pub mod ptor {
        #[doc = "Writer for register PTOR"]
        pub type W = crate::W<u32, super::PTOR>;
        #[doc = "Register PTOR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PTOR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO0_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO0_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO0_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO0`"]
        pub struct PTTO0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO0_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO0_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO1_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO1_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO1_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO1`"]
        pub struct PTTO1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO1_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO1_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO2_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO2_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO2_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO2`"]
        pub struct PTTO2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO2_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO2_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO3_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO3_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO3_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO3`"]
        pub struct PTTO3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO3_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO3_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO4_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO4_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO4_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO4`"]
        pub struct PTTO4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO4_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO4_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO5_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO5_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO5_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO5`"]
        pub struct PTTO5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO5_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO5_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO6_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO6_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO6_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO6`"]
        pub struct PTTO6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO6_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO6_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO7_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO7_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO7_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO7`"]
        pub struct PTTO7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO7_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO7_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO8_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO8_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO8_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO8`"]
        pub struct PTTO8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO8_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO8_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO9_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO9_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO9_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO9`"]
        pub struct PTTO9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO9_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO9_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO10_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO10_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO10_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO10`"]
        pub struct PTTO10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO10_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO10_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO11_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO11_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO11_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO11`"]
        pub struct PTTO11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO11_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO11_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO12_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO12_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO12_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO12`"]
        pub struct PTTO12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO12_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO12_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO13_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO13_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO13_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO13`"]
        pub struct PTTO13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO13_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO13_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO14_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO14_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO14_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO14`"]
        pub struct PTTO14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO14_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO14_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO15_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO15_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO15_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO15`"]
        pub struct PTTO15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO15_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO15_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO16_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO16_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO16_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO16`"]
        pub struct PTTO16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO16_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO16_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO16_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO17_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO17_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO17_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO17`"]
        pub struct PTTO17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO17_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO17_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO17_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO18_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO18_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO18_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO18`"]
        pub struct PTTO18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO18_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO18_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO18_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO19_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO19_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO19_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO19`"]
        pub struct PTTO19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO19_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO19_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO19_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO20_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO20_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO20_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO20`"]
        pub struct PTTO20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO20_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO20_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO20_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO21_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO21_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO21_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO21`"]
        pub struct PTTO21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO21_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO21_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO21_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO22_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO22_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO22_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO22`"]
        pub struct PTTO22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO22_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO22_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO22_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO23_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO23_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO23_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO23`"]
        pub struct PTTO23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO23_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO23_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO23_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO23_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO24_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO24_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO24_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO24`"]
        pub struct PTTO24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO24_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO24_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO24_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO24_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO25_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO25_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO25_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO25`"]
        pub struct PTTO25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO25_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO25_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO25_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO25_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO26_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO26_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO26_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO26`"]
        pub struct PTTO26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO26_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO26_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO26_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO26_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO27_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO27_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO27_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO27`"]
        pub struct PTTO27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO27_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO27_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO27_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO27_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO28_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO28_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO28_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO28`"]
        pub struct PTTO28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO28_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO28_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO28_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO28_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO29_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO29_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO29_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO29`"]
        pub struct PTTO29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO29_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO29_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO29_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO29_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO30_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO30_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO30_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO30`"]
        pub struct PTTO30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO30_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO30_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO30_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO30_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PTTO31_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO31_AW> for bool {
            #[inline(always)]
            fn from(variant: PTTO31_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `PTTO31`"]
        pub struct PTTO31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO31_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO31_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO31_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO31_AW::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto0(&mut self) -> PTTO0_W {
                PTTO0_W { w: self }
            }
            #[doc = "Bit 1 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto1(&mut self) -> PTTO1_W {
                PTTO1_W { w: self }
            }
            #[doc = "Bit 2 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto2(&mut self) -> PTTO2_W {
                PTTO2_W { w: self }
            }
            #[doc = "Bit 3 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto3(&mut self) -> PTTO3_W {
                PTTO3_W { w: self }
            }
            #[doc = "Bit 4 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto4(&mut self) -> PTTO4_W {
                PTTO4_W { w: self }
            }
            #[doc = "Bit 5 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto5(&mut self) -> PTTO5_W {
                PTTO5_W { w: self }
            }
            #[doc = "Bit 6 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto6(&mut self) -> PTTO6_W {
                PTTO6_W { w: self }
            }
            #[doc = "Bit 7 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto7(&mut self) -> PTTO7_W {
                PTTO7_W { w: self }
            }
            #[doc = "Bit 8 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto8(&mut self) -> PTTO8_W {
                PTTO8_W { w: self }
            }
            #[doc = "Bit 9 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto9(&mut self) -> PTTO9_W {
                PTTO9_W { w: self }
            }
            #[doc = "Bit 10 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto10(&mut self) -> PTTO10_W {
                PTTO10_W { w: self }
            }
            #[doc = "Bit 11 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto11(&mut self) -> PTTO11_W {
                PTTO11_W { w: self }
            }
            #[doc = "Bit 12 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto12(&mut self) -> PTTO12_W {
                PTTO12_W { w: self }
            }
            #[doc = "Bit 13 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto13(&mut self) -> PTTO13_W {
                PTTO13_W { w: self }
            }
            #[doc = "Bit 14 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto14(&mut self) -> PTTO14_W {
                PTTO14_W { w: self }
            }
            #[doc = "Bit 15 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto15(&mut self) -> PTTO15_W {
                PTTO15_W { w: self }
            }
            #[doc = "Bit 16 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto16(&mut self) -> PTTO16_W {
                PTTO16_W { w: self }
            }
            #[doc = "Bit 17 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto17(&mut self) -> PTTO17_W {
                PTTO17_W { w: self }
            }
            #[doc = "Bit 18 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto18(&mut self) -> PTTO18_W {
                PTTO18_W { w: self }
            }
            #[doc = "Bit 19 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto19(&mut self) -> PTTO19_W {
                PTTO19_W { w: self }
            }
            #[doc = "Bit 20 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto20(&mut self) -> PTTO20_W {
                PTTO20_W { w: self }
            }
            #[doc = "Bit 21 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto21(&mut self) -> PTTO21_W {
                PTTO21_W { w: self }
            }
            #[doc = "Bit 22 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto22(&mut self) -> PTTO22_W {
                PTTO22_W { w: self }
            }
            #[doc = "Bit 23 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto23(&mut self) -> PTTO23_W {
                PTTO23_W { w: self }
            }
            #[doc = "Bit 24 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto24(&mut self) -> PTTO24_W {
                PTTO24_W { w: self }
            }
            #[doc = "Bit 25 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto25(&mut self) -> PTTO25_W {
                PTTO25_W { w: self }
            }
            #[doc = "Bit 26 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto26(&mut self) -> PTTO26_W {
                PTTO26_W { w: self }
            }
            #[doc = "Bit 27 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto27(&mut self) -> PTTO27_W {
                PTTO27_W { w: self }
            }
            #[doc = "Bit 28 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto28(&mut self) -> PTTO28_W {
                PTTO28_W { w: self }
            }
            #[doc = "Bit 29 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto29(&mut self) -> PTTO29_W {
                PTTO29_W { w: self }
            }
            #[doc = "Bit 30 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto30(&mut self) -> PTTO30_W {
                PTTO30_W { w: self }
            }
            #[doc = "Bit 31 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto31(&mut self) -> PTTO31_W {
                PTTO31_W { w: self }
            }
        }
    }
    #[doc = "Port Data Input Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdir](pdir) module"]
    pub type PDIR = crate::Reg<u32, _PDIR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDIR;
    #[doc = "`read()` method returns [pdir::R](pdir::R) reader structure"]
    impl crate::Readable for PDIR {}
    #[doc = "Port Data Input Register"]
    pub mod pdir {
        #[doc = "Reader of register PDIR"]
        pub type R = crate::R<u32, super::PDIR>;
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI0_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI0_A> for bool {
            #[inline(always)]
            fn from(variant: PDI0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI0`"]
        pub type PDI0_R = crate::R<bool, PDI0_A>;
        impl PDI0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI0_A {
                match self.bits {
                    false => PDI0_A::_0,
                    true => PDI0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI0_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI1_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI1_A> for bool {
            #[inline(always)]
            fn from(variant: PDI1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI1`"]
        pub type PDI1_R = crate::R<bool, PDI1_A>;
        impl PDI1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI1_A {
                match self.bits {
                    false => PDI1_A::_0,
                    true => PDI1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI1_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI2_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI2_A> for bool {
            #[inline(always)]
            fn from(variant: PDI2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI2`"]
        pub type PDI2_R = crate::R<bool, PDI2_A>;
        impl PDI2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI2_A {
                match self.bits {
                    false => PDI2_A::_0,
                    true => PDI2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI2_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI3_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI3_A> for bool {
            #[inline(always)]
            fn from(variant: PDI3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI3`"]
        pub type PDI3_R = crate::R<bool, PDI3_A>;
        impl PDI3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI3_A {
                match self.bits {
                    false => PDI3_A::_0,
                    true => PDI3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI3_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI4_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI4_A> for bool {
            #[inline(always)]
            fn from(variant: PDI4_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI4`"]
        pub type PDI4_R = crate::R<bool, PDI4_A>;
        impl PDI4_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI4_A {
                match self.bits {
                    false => PDI4_A::_0,
                    true => PDI4_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI4_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI4_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI5_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI5_A> for bool {
            #[inline(always)]
            fn from(variant: PDI5_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI5`"]
        pub type PDI5_R = crate::R<bool, PDI5_A>;
        impl PDI5_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI5_A {
                match self.bits {
                    false => PDI5_A::_0,
                    true => PDI5_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI5_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI5_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI6_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI6_A> for bool {
            #[inline(always)]
            fn from(variant: PDI6_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI6`"]
        pub type PDI6_R = crate::R<bool, PDI6_A>;
        impl PDI6_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI6_A {
                match self.bits {
                    false => PDI6_A::_0,
                    true => PDI6_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI6_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI6_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI7_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI7_A> for bool {
            #[inline(always)]
            fn from(variant: PDI7_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI7`"]
        pub type PDI7_R = crate::R<bool, PDI7_A>;
        impl PDI7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI7_A {
                match self.bits {
                    false => PDI7_A::_0,
                    true => PDI7_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI7_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI7_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI8_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI8_A> for bool {
            #[inline(always)]
            fn from(variant: PDI8_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI8`"]
        pub type PDI8_R = crate::R<bool, PDI8_A>;
        impl PDI8_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI8_A {
                match self.bits {
                    false => PDI8_A::_0,
                    true => PDI8_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI8_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI8_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI9_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI9_A> for bool {
            #[inline(always)]
            fn from(variant: PDI9_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI9`"]
        pub type PDI9_R = crate::R<bool, PDI9_A>;
        impl PDI9_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI9_A {
                match self.bits {
                    false => PDI9_A::_0,
                    true => PDI9_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI9_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI9_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI10_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI10_A> for bool {
            #[inline(always)]
            fn from(variant: PDI10_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI10`"]
        pub type PDI10_R = crate::R<bool, PDI10_A>;
        impl PDI10_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI10_A {
                match self.bits {
                    false => PDI10_A::_0,
                    true => PDI10_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI10_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI10_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI11_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI11_A> for bool {
            #[inline(always)]
            fn from(variant: PDI11_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI11`"]
        pub type PDI11_R = crate::R<bool, PDI11_A>;
        impl PDI11_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI11_A {
                match self.bits {
                    false => PDI11_A::_0,
                    true => PDI11_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI11_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI11_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI12_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI12_A> for bool {
            #[inline(always)]
            fn from(variant: PDI12_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI12`"]
        pub type PDI12_R = crate::R<bool, PDI12_A>;
        impl PDI12_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI12_A {
                match self.bits {
                    false => PDI12_A::_0,
                    true => PDI12_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI12_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI12_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI13_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI13_A> for bool {
            #[inline(always)]
            fn from(variant: PDI13_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI13`"]
        pub type PDI13_R = crate::R<bool, PDI13_A>;
        impl PDI13_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI13_A {
                match self.bits {
                    false => PDI13_A::_0,
                    true => PDI13_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI13_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI13_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI14_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI14_A> for bool {
            #[inline(always)]
            fn from(variant: PDI14_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI14`"]
        pub type PDI14_R = crate::R<bool, PDI14_A>;
        impl PDI14_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI14_A {
                match self.bits {
                    false => PDI14_A::_0,
                    true => PDI14_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI14_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI14_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI15_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI15_A> for bool {
            #[inline(always)]
            fn from(variant: PDI15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI15`"]
        pub type PDI15_R = crate::R<bool, PDI15_A>;
        impl PDI15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI15_A {
                match self.bits {
                    false => PDI15_A::_0,
                    true => PDI15_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI15_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI15_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI16_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI16_A> for bool {
            #[inline(always)]
            fn from(variant: PDI16_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI16`"]
        pub type PDI16_R = crate::R<bool, PDI16_A>;
        impl PDI16_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI16_A {
                match self.bits {
                    false => PDI16_A::_0,
                    true => PDI16_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI16_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI16_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI17_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI17_A> for bool {
            #[inline(always)]
            fn from(variant: PDI17_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI17`"]
        pub type PDI17_R = crate::R<bool, PDI17_A>;
        impl PDI17_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI17_A {
                match self.bits {
                    false => PDI17_A::_0,
                    true => PDI17_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI17_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI17_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI18_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI18_A> for bool {
            #[inline(always)]
            fn from(variant: PDI18_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI18`"]
        pub type PDI18_R = crate::R<bool, PDI18_A>;
        impl PDI18_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI18_A {
                match self.bits {
                    false => PDI18_A::_0,
                    true => PDI18_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI18_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI18_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI19_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI19_A> for bool {
            #[inline(always)]
            fn from(variant: PDI19_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI19`"]
        pub type PDI19_R = crate::R<bool, PDI19_A>;
        impl PDI19_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI19_A {
                match self.bits {
                    false => PDI19_A::_0,
                    true => PDI19_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI19_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI19_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI20_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI20_A> for bool {
            #[inline(always)]
            fn from(variant: PDI20_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI20`"]
        pub type PDI20_R = crate::R<bool, PDI20_A>;
        impl PDI20_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI20_A {
                match self.bits {
                    false => PDI20_A::_0,
                    true => PDI20_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI20_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI20_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI21_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI21_A> for bool {
            #[inline(always)]
            fn from(variant: PDI21_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI21`"]
        pub type PDI21_R = crate::R<bool, PDI21_A>;
        impl PDI21_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI21_A {
                match self.bits {
                    false => PDI21_A::_0,
                    true => PDI21_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI21_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI21_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI22_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI22_A> for bool {
            #[inline(always)]
            fn from(variant: PDI22_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI22`"]
        pub type PDI22_R = crate::R<bool, PDI22_A>;
        impl PDI22_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI22_A {
                match self.bits {
                    false => PDI22_A::_0,
                    true => PDI22_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI22_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI22_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI23_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI23_A> for bool {
            #[inline(always)]
            fn from(variant: PDI23_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI23`"]
        pub type PDI23_R = crate::R<bool, PDI23_A>;
        impl PDI23_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI23_A {
                match self.bits {
                    false => PDI23_A::_0,
                    true => PDI23_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI23_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI23_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI24_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI24_A> for bool {
            #[inline(always)]
            fn from(variant: PDI24_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI24`"]
        pub type PDI24_R = crate::R<bool, PDI24_A>;
        impl PDI24_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI24_A {
                match self.bits {
                    false => PDI24_A::_0,
                    true => PDI24_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI24_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI24_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI25_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI25_A> for bool {
            #[inline(always)]
            fn from(variant: PDI25_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI25`"]
        pub type PDI25_R = crate::R<bool, PDI25_A>;
        impl PDI25_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI25_A {
                match self.bits {
                    false => PDI25_A::_0,
                    true => PDI25_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI25_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI25_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI26_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI26_A> for bool {
            #[inline(always)]
            fn from(variant: PDI26_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI26`"]
        pub type PDI26_R = crate::R<bool, PDI26_A>;
        impl PDI26_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI26_A {
                match self.bits {
                    false => PDI26_A::_0,
                    true => PDI26_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI26_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI26_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI27_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI27_A> for bool {
            #[inline(always)]
            fn from(variant: PDI27_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI27`"]
        pub type PDI27_R = crate::R<bool, PDI27_A>;
        impl PDI27_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI27_A {
                match self.bits {
                    false => PDI27_A::_0,
                    true => PDI27_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI27_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI27_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI28_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI28_A> for bool {
            #[inline(always)]
            fn from(variant: PDI28_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI28`"]
        pub type PDI28_R = crate::R<bool, PDI28_A>;
        impl PDI28_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI28_A {
                match self.bits {
                    false => PDI28_A::_0,
                    true => PDI28_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI28_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI28_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI29_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI29_A> for bool {
            #[inline(always)]
            fn from(variant: PDI29_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI29`"]
        pub type PDI29_R = crate::R<bool, PDI29_A>;
        impl PDI29_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI29_A {
                match self.bits {
                    false => PDI29_A::_0,
                    true => PDI29_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI29_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI29_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI30_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI30_A> for bool {
            #[inline(always)]
            fn from(variant: PDI30_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI30`"]
        pub type PDI30_R = crate::R<bool, PDI30_A>;
        impl PDI30_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI30_A {
                match self.bits {
                    false => PDI30_A::_0,
                    true => PDI30_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI30_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI30_A::_1
            }
        }
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDI31_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI31_A> for bool {
            #[inline(always)]
            fn from(variant: PDI31_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDI31`"]
        pub type PDI31_R = crate::R<bool, PDI31_A>;
        impl PDI31_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDI31_A {
                match self.bits {
                    false => PDI31_A::_0,
                    true => PDI31_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI31_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI31_A::_1
            }
        }
        impl R {
            #[doc = "Bit 0 - Port Data Input"]
            #[inline(always)]
            pub fn pdi0(&self) -> PDI0_R {
                PDI0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port Data Input"]
            #[inline(always)]
            pub fn pdi1(&self) -> PDI1_R {
                PDI1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port Data Input"]
            #[inline(always)]
            pub fn pdi2(&self) -> PDI2_R {
                PDI2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port Data Input"]
            #[inline(always)]
            pub fn pdi3(&self) -> PDI3_R {
                PDI3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port Data Input"]
            #[inline(always)]
            pub fn pdi4(&self) -> PDI4_R {
                PDI4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port Data Input"]
            #[inline(always)]
            pub fn pdi5(&self) -> PDI5_R {
                PDI5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port Data Input"]
            #[inline(always)]
            pub fn pdi6(&self) -> PDI6_R {
                PDI6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port Data Input"]
            #[inline(always)]
            pub fn pdi7(&self) -> PDI7_R {
                PDI7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port Data Input"]
            #[inline(always)]
            pub fn pdi8(&self) -> PDI8_R {
                PDI8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port Data Input"]
            #[inline(always)]
            pub fn pdi9(&self) -> PDI9_R {
                PDI9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port Data Input"]
            #[inline(always)]
            pub fn pdi10(&self) -> PDI10_R {
                PDI10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port Data Input"]
            #[inline(always)]
            pub fn pdi11(&self) -> PDI11_R {
                PDI11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port Data Input"]
            #[inline(always)]
            pub fn pdi12(&self) -> PDI12_R {
                PDI12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port Data Input"]
            #[inline(always)]
            pub fn pdi13(&self) -> PDI13_R {
                PDI13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port Data Input"]
            #[inline(always)]
            pub fn pdi14(&self) -> PDI14_R {
                PDI14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Port Data Input"]
            #[inline(always)]
            pub fn pdi15(&self) -> PDI15_R {
                PDI15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Port Data Input"]
            #[inline(always)]
            pub fn pdi16(&self) -> PDI16_R {
                PDI16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Port Data Input"]
            #[inline(always)]
            pub fn pdi17(&self) -> PDI17_R {
                PDI17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Port Data Input"]
            #[inline(always)]
            pub fn pdi18(&self) -> PDI18_R {
                PDI18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Port Data Input"]
            #[inline(always)]
            pub fn pdi19(&self) -> PDI19_R {
                PDI19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Port Data Input"]
            #[inline(always)]
            pub fn pdi20(&self) -> PDI20_R {
                PDI20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Port Data Input"]
            #[inline(always)]
            pub fn pdi21(&self) -> PDI21_R {
                PDI21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Port Data Input"]
            #[inline(always)]
            pub fn pdi22(&self) -> PDI22_R {
                PDI22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Port Data Input"]
            #[inline(always)]
            pub fn pdi23(&self) -> PDI23_R {
                PDI23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Port Data Input"]
            #[inline(always)]
            pub fn pdi24(&self) -> PDI24_R {
                PDI24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Port Data Input"]
            #[inline(always)]
            pub fn pdi25(&self) -> PDI25_R {
                PDI25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Port Data Input"]
            #[inline(always)]
            pub fn pdi26(&self) -> PDI26_R {
                PDI26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Port Data Input"]
            #[inline(always)]
            pub fn pdi27(&self) -> PDI27_R {
                PDI27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Port Data Input"]
            #[inline(always)]
            pub fn pdi28(&self) -> PDI28_R {
                PDI28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Port Data Input"]
            #[inline(always)]
            pub fn pdi29(&self) -> PDI29_R {
                PDI29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Port Data Input"]
            #[inline(always)]
            pub fn pdi30(&self) -> PDI30_R {
                PDI30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Port Data Input"]
            #[inline(always)]
            pub fn pdi31(&self) -> PDI31_R {
                PDI31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
    }
    #[doc = "Port Data Direction Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pddr](pddr) module"]
    pub type PDDR = crate::Reg<u32, _PDDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDDR;
    #[doc = "`read()` method returns [pddr::R](pddr::R) reader structure"]
    impl crate::Readable for PDDR {}
    #[doc = "`write(|w| ..)` method takes [pddr::W](pddr::W) writer structure"]
    impl crate::Writable for PDDR {}
    #[doc = "Port Data Direction Register"]
    pub mod pddr {
        #[doc = "Reader of register PDDR"]
        pub type R = crate::R<u32, super::PDDR>;
        #[doc = "Writer for register PDDR"]
        pub type W = crate::W<u32, super::PDDR>;
        #[doc = "Register PDDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PDDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD0_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD0_A> for bool {
            #[inline(always)]
            fn from(variant: PDD0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD0`"]
        pub type PDD0_R = crate::R<bool, PDD0_A>;
        impl PDD0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD0_A {
                match self.bits {
                    false => PDD0_A::_0,
                    true => PDD0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD0_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD0`"]
        pub struct PDD0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD0_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD1_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD1_A> for bool {
            #[inline(always)]
            fn from(variant: PDD1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD1`"]
        pub type PDD1_R = crate::R<bool, PDD1_A>;
        impl PDD1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD1_A {
                match self.bits {
                    false => PDD1_A::_0,
                    true => PDD1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD1_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD1`"]
        pub struct PDD1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD1_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD2_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD2_A> for bool {
            #[inline(always)]
            fn from(variant: PDD2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD2`"]
        pub type PDD2_R = crate::R<bool, PDD2_A>;
        impl PDD2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD2_A {
                match self.bits {
                    false => PDD2_A::_0,
                    true => PDD2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD2_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD2`"]
        pub struct PDD2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD2_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD3_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD3_A> for bool {
            #[inline(always)]
            fn from(variant: PDD3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD3`"]
        pub type PDD3_R = crate::R<bool, PDD3_A>;
        impl PDD3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD3_A {
                match self.bits {
                    false => PDD3_A::_0,
                    true => PDD3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD3_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD3`"]
        pub struct PDD3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD3_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD4_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD4_A> for bool {
            #[inline(always)]
            fn from(variant: PDD4_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD4`"]
        pub type PDD4_R = crate::R<bool, PDD4_A>;
        impl PDD4_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD4_A {
                match self.bits {
                    false => PDD4_A::_0,
                    true => PDD4_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD4_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD4_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD4`"]
        pub struct PDD4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD4_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD4_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD5_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD5_A> for bool {
            #[inline(always)]
            fn from(variant: PDD5_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD5`"]
        pub type PDD5_R = crate::R<bool, PDD5_A>;
        impl PDD5_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD5_A {
                match self.bits {
                    false => PDD5_A::_0,
                    true => PDD5_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD5_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD5_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD5`"]
        pub struct PDD5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD5_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD5_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD6_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD6_A> for bool {
            #[inline(always)]
            fn from(variant: PDD6_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD6`"]
        pub type PDD6_R = crate::R<bool, PDD6_A>;
        impl PDD6_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD6_A {
                match self.bits {
                    false => PDD6_A::_0,
                    true => PDD6_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD6_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD6_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD6`"]
        pub struct PDD6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD6_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD6_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD7_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD7_A> for bool {
            #[inline(always)]
            fn from(variant: PDD7_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD7`"]
        pub type PDD7_R = crate::R<bool, PDD7_A>;
        impl PDD7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD7_A {
                match self.bits {
                    false => PDD7_A::_0,
                    true => PDD7_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD7_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD7_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD7`"]
        pub struct PDD7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD7_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD7_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD8_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD8_A> for bool {
            #[inline(always)]
            fn from(variant: PDD8_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD8`"]
        pub type PDD8_R = crate::R<bool, PDD8_A>;
        impl PDD8_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD8_A {
                match self.bits {
                    false => PDD8_A::_0,
                    true => PDD8_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD8_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD8_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD8`"]
        pub struct PDD8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD8_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD8_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD9_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD9_A> for bool {
            #[inline(always)]
            fn from(variant: PDD9_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD9`"]
        pub type PDD9_R = crate::R<bool, PDD9_A>;
        impl PDD9_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD9_A {
                match self.bits {
                    false => PDD9_A::_0,
                    true => PDD9_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD9_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD9_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD9`"]
        pub struct PDD9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD9_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD9_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD10_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD10_A> for bool {
            #[inline(always)]
            fn from(variant: PDD10_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD10`"]
        pub type PDD10_R = crate::R<bool, PDD10_A>;
        impl PDD10_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD10_A {
                match self.bits {
                    false => PDD10_A::_0,
                    true => PDD10_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD10_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD10_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD10`"]
        pub struct PDD10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD10_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD10_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD11_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD11_A> for bool {
            #[inline(always)]
            fn from(variant: PDD11_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD11`"]
        pub type PDD11_R = crate::R<bool, PDD11_A>;
        impl PDD11_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD11_A {
                match self.bits {
                    false => PDD11_A::_0,
                    true => PDD11_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD11_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD11_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD11`"]
        pub struct PDD11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD11_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD11_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD12_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD12_A> for bool {
            #[inline(always)]
            fn from(variant: PDD12_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD12`"]
        pub type PDD12_R = crate::R<bool, PDD12_A>;
        impl PDD12_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD12_A {
                match self.bits {
                    false => PDD12_A::_0,
                    true => PDD12_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD12_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD12_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD12`"]
        pub struct PDD12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD12_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD12_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD13_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD13_A> for bool {
            #[inline(always)]
            fn from(variant: PDD13_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD13`"]
        pub type PDD13_R = crate::R<bool, PDD13_A>;
        impl PDD13_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD13_A {
                match self.bits {
                    false => PDD13_A::_0,
                    true => PDD13_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD13_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD13_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD13`"]
        pub struct PDD13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD13_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD13_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD14_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD14_A> for bool {
            #[inline(always)]
            fn from(variant: PDD14_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD14`"]
        pub type PDD14_R = crate::R<bool, PDD14_A>;
        impl PDD14_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD14_A {
                match self.bits {
                    false => PDD14_A::_0,
                    true => PDD14_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD14_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD14_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD14`"]
        pub struct PDD14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD14_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD14_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD15_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD15_A> for bool {
            #[inline(always)]
            fn from(variant: PDD15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD15`"]
        pub type PDD15_R = crate::R<bool, PDD15_A>;
        impl PDD15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD15_A {
                match self.bits {
                    false => PDD15_A::_0,
                    true => PDD15_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD15_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD15_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD15`"]
        pub struct PDD15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD15_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD15_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD16_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD16_A> for bool {
            #[inline(always)]
            fn from(variant: PDD16_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD16`"]
        pub type PDD16_R = crate::R<bool, PDD16_A>;
        impl PDD16_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD16_A {
                match self.bits {
                    false => PDD16_A::_0,
                    true => PDD16_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD16_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD16_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD16`"]
        pub struct PDD16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD16_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD16_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD17_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD17_A> for bool {
            #[inline(always)]
            fn from(variant: PDD17_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD17`"]
        pub type PDD17_R = crate::R<bool, PDD17_A>;
        impl PDD17_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD17_A {
                match self.bits {
                    false => PDD17_A::_0,
                    true => PDD17_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD17_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD17_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD17`"]
        pub struct PDD17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD17_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD17_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD17_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD18_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD18_A> for bool {
            #[inline(always)]
            fn from(variant: PDD18_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD18`"]
        pub type PDD18_R = crate::R<bool, PDD18_A>;
        impl PDD18_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD18_A {
                match self.bits {
                    false => PDD18_A::_0,
                    true => PDD18_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD18_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD18_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD18`"]
        pub struct PDD18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD18_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD18_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD18_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD19_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD19_A> for bool {
            #[inline(always)]
            fn from(variant: PDD19_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD19`"]
        pub type PDD19_R = crate::R<bool, PDD19_A>;
        impl PDD19_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD19_A {
                match self.bits {
                    false => PDD19_A::_0,
                    true => PDD19_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD19_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD19_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD19`"]
        pub struct PDD19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD19_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD19_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD19_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD20_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD20_A> for bool {
            #[inline(always)]
            fn from(variant: PDD20_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD20`"]
        pub type PDD20_R = crate::R<bool, PDD20_A>;
        impl PDD20_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD20_A {
                match self.bits {
                    false => PDD20_A::_0,
                    true => PDD20_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD20_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD20_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD20`"]
        pub struct PDD20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD20_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD20_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD20_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD21_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD21_A> for bool {
            #[inline(always)]
            fn from(variant: PDD21_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD21`"]
        pub type PDD21_R = crate::R<bool, PDD21_A>;
        impl PDD21_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD21_A {
                match self.bits {
                    false => PDD21_A::_0,
                    true => PDD21_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD21_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD21_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD21`"]
        pub struct PDD21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD21_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD21_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD21_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD22_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD22_A> for bool {
            #[inline(always)]
            fn from(variant: PDD22_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD22`"]
        pub type PDD22_R = crate::R<bool, PDD22_A>;
        impl PDD22_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD22_A {
                match self.bits {
                    false => PDD22_A::_0,
                    true => PDD22_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD22_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD22_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD22`"]
        pub struct PDD22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD22_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD22_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD22_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD23_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD23_A> for bool {
            #[inline(always)]
            fn from(variant: PDD23_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD23`"]
        pub type PDD23_R = crate::R<bool, PDD23_A>;
        impl PDD23_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD23_A {
                match self.bits {
                    false => PDD23_A::_0,
                    true => PDD23_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD23_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD23_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD23`"]
        pub struct PDD23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD23_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD23_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD23_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD23_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD24_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD24_A> for bool {
            #[inline(always)]
            fn from(variant: PDD24_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD24`"]
        pub type PDD24_R = crate::R<bool, PDD24_A>;
        impl PDD24_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD24_A {
                match self.bits {
                    false => PDD24_A::_0,
                    true => PDD24_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD24_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD24_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD24`"]
        pub struct PDD24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD24_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD24_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD24_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD24_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD25_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD25_A> for bool {
            #[inline(always)]
            fn from(variant: PDD25_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD25`"]
        pub type PDD25_R = crate::R<bool, PDD25_A>;
        impl PDD25_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD25_A {
                match self.bits {
                    false => PDD25_A::_0,
                    true => PDD25_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD25_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD25_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD25`"]
        pub struct PDD25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD25_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD25_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD25_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD25_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD26_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD26_A> for bool {
            #[inline(always)]
            fn from(variant: PDD26_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD26`"]
        pub type PDD26_R = crate::R<bool, PDD26_A>;
        impl PDD26_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD26_A {
                match self.bits {
                    false => PDD26_A::_0,
                    true => PDD26_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD26_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD26_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD26`"]
        pub struct PDD26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD26_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD26_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD26_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD26_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD27_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD27_A> for bool {
            #[inline(always)]
            fn from(variant: PDD27_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD27`"]
        pub type PDD27_R = crate::R<bool, PDD27_A>;
        impl PDD27_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD27_A {
                match self.bits {
                    false => PDD27_A::_0,
                    true => PDD27_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD27_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD27_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD27`"]
        pub struct PDD27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD27_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD27_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD27_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD27_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD28_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD28_A> for bool {
            #[inline(always)]
            fn from(variant: PDD28_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD28`"]
        pub type PDD28_R = crate::R<bool, PDD28_A>;
        impl PDD28_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD28_A {
                match self.bits {
                    false => PDD28_A::_0,
                    true => PDD28_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD28_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD28_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD28`"]
        pub struct PDD28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD28_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD28_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD28_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD28_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD29_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD29_A> for bool {
            #[inline(always)]
            fn from(variant: PDD29_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD29`"]
        pub type PDD29_R = crate::R<bool, PDD29_A>;
        impl PDD29_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD29_A {
                match self.bits {
                    false => PDD29_A::_0,
                    true => PDD29_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD29_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD29_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD29`"]
        pub struct PDD29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD29_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD29_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD29_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD29_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD30_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD30_A> for bool {
            #[inline(always)]
            fn from(variant: PDD30_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD30`"]
        pub type PDD30_R = crate::R<bool, PDD30_A>;
        impl PDD30_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD30_A {
                match self.bits {
                    false => PDD30_A::_0,
                    true => PDD30_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD30_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD30_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD30`"]
        pub struct PDD30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD30_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD30_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD30_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD30_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PDD31_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD31_A> for bool {
            #[inline(always)]
            fn from(variant: PDD31_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PDD31`"]
        pub type PDD31_R = crate::R<bool, PDD31_A>;
        impl PDD31_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PDD31_A {
                match self.bits {
                    false => PDD31_A::_0,
                    true => PDD31_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD31_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD31_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD31`"]
        pub struct PDD31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD31_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD31_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in GPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD31_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD31_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd0(&self) -> PDD0_R {
                PDD0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd1(&self) -> PDD1_R {
                PDD1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd2(&self) -> PDD2_R {
                PDD2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd3(&self) -> PDD3_R {
                PDD3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd4(&self) -> PDD4_R {
                PDD4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd5(&self) -> PDD5_R {
                PDD5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd6(&self) -> PDD6_R {
                PDD6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd7(&self) -> PDD7_R {
                PDD7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd8(&self) -> PDD8_R {
                PDD8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd9(&self) -> PDD9_R {
                PDD9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd10(&self) -> PDD10_R {
                PDD10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd11(&self) -> PDD11_R {
                PDD11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd12(&self) -> PDD12_R {
                PDD12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd13(&self) -> PDD13_R {
                PDD13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd14(&self) -> PDD14_R {
                PDD14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd15(&self) -> PDD15_R {
                PDD15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd16(&self) -> PDD16_R {
                PDD16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd17(&self) -> PDD17_R {
                PDD17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd18(&self) -> PDD18_R {
                PDD18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd19(&self) -> PDD19_R {
                PDD19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd20(&self) -> PDD20_R {
                PDD20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd21(&self) -> PDD21_R {
                PDD21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd22(&self) -> PDD22_R {
                PDD22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd23(&self) -> PDD23_R {
                PDD23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd24(&self) -> PDD24_R {
                PDD24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd25(&self) -> PDD25_R {
                PDD25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd26(&self) -> PDD26_R {
                PDD26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd27(&self) -> PDD27_R {
                PDD27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd28(&self) -> PDD28_R {
                PDD28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd29(&self) -> PDD29_R {
                PDD29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd30(&self) -> PDD30_R {
                PDD30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd31(&self) -> PDD31_R {
                PDD31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd0(&mut self) -> PDD0_W {
                PDD0_W { w: self }
            }
            #[doc = "Bit 1 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd1(&mut self) -> PDD1_W {
                PDD1_W { w: self }
            }
            #[doc = "Bit 2 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd2(&mut self) -> PDD2_W {
                PDD2_W { w: self }
            }
            #[doc = "Bit 3 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd3(&mut self) -> PDD3_W {
                PDD3_W { w: self }
            }
            #[doc = "Bit 4 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd4(&mut self) -> PDD4_W {
                PDD4_W { w: self }
            }
            #[doc = "Bit 5 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd5(&mut self) -> PDD5_W {
                PDD5_W { w: self }
            }
            #[doc = "Bit 6 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd6(&mut self) -> PDD6_W {
                PDD6_W { w: self }
            }
            #[doc = "Bit 7 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd7(&mut self) -> PDD7_W {
                PDD7_W { w: self }
            }
            #[doc = "Bit 8 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd8(&mut self) -> PDD8_W {
                PDD8_W { w: self }
            }
            #[doc = "Bit 9 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd9(&mut self) -> PDD9_W {
                PDD9_W { w: self }
            }
            #[doc = "Bit 10 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd10(&mut self) -> PDD10_W {
                PDD10_W { w: self }
            }
            #[doc = "Bit 11 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd11(&mut self) -> PDD11_W {
                PDD11_W { w: self }
            }
            #[doc = "Bit 12 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd12(&mut self) -> PDD12_W {
                PDD12_W { w: self }
            }
            #[doc = "Bit 13 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd13(&mut self) -> PDD13_W {
                PDD13_W { w: self }
            }
            #[doc = "Bit 14 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd14(&mut self) -> PDD14_W {
                PDD14_W { w: self }
            }
            #[doc = "Bit 15 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd15(&mut self) -> PDD15_W {
                PDD15_W { w: self }
            }
            #[doc = "Bit 16 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd16(&mut self) -> PDD16_W {
                PDD16_W { w: self }
            }
            #[doc = "Bit 17 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd17(&mut self) -> PDD17_W {
                PDD17_W { w: self }
            }
            #[doc = "Bit 18 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd18(&mut self) -> PDD18_W {
                PDD18_W { w: self }
            }
            #[doc = "Bit 19 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd19(&mut self) -> PDD19_W {
                PDD19_W { w: self }
            }
            #[doc = "Bit 20 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd20(&mut self) -> PDD20_W {
                PDD20_W { w: self }
            }
            #[doc = "Bit 21 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd21(&mut self) -> PDD21_W {
                PDD21_W { w: self }
            }
            #[doc = "Bit 22 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd22(&mut self) -> PDD22_W {
                PDD22_W { w: self }
            }
            #[doc = "Bit 23 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd23(&mut self) -> PDD23_W {
                PDD23_W { w: self }
            }
            #[doc = "Bit 24 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd24(&mut self) -> PDD24_W {
                PDD24_W { w: self }
            }
            #[doc = "Bit 25 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd25(&mut self) -> PDD25_W {
                PDD25_W { w: self }
            }
            #[doc = "Bit 26 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd26(&mut self) -> PDD26_W {
                PDD26_W { w: self }
            }
            #[doc = "Bit 27 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd27(&mut self) -> PDD27_W {
                PDD27_W { w: self }
            }
            #[doc = "Bit 28 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd28(&mut self) -> PDD28_W {
                PDD28_W { w: self }
            }
            #[doc = "Bit 29 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd29(&mut self) -> PDD29_W {
                PDD29_W { w: self }
            }
            #[doc = "Bit 30 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd30(&mut self) -> PDD30_W {
                PDD30_W { w: self }
            }
            #[doc = "Bit 31 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd31(&mut self) -> PDD31_W {
                PDD31_W { w: self }
            }
        }
    }
    #[doc = "Port Input Disable Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pidr](pidr) module"]
    pub type PIDR = crate::Reg<u32, _PIDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PIDR;
    #[doc = "`read()` method returns [pidr::R](pidr::R) reader structure"]
    impl crate::Readable for PIDR {}
    #[doc = "`write(|w| ..)` method takes [pidr::W](pidr::W) writer structure"]
    impl crate::Writable for PIDR {}
    #[doc = "Port Input Disable Register"]
    pub mod pidr {
        #[doc = "Reader of register PIDR"]
        pub type R = crate::R<u32, super::PIDR>;
        #[doc = "Writer for register PIDR"]
        pub type W = crate::W<u32, super::PIDR>;
        #[doc = "Register PIDR `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::PIDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID0_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID0_A> for bool {
            #[inline(always)]
            fn from(variant: PID0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID0`"]
        pub type PID0_R = crate::R<bool, PID0_A>;
        impl PID0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID0_A {
                match self.bits {
                    false => PID0_A::_0,
                    true => PID0_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID0_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID0_A::_1
            }
        }
        #[doc = "Write proxy for field `PID0`"]
        pub struct PID0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID0_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID0_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID1_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID1_A> for bool {
            #[inline(always)]
            fn from(variant: PID1_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID1`"]
        pub type PID1_R = crate::R<bool, PID1_A>;
        impl PID1_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID1_A {
                match self.bits {
                    false => PID1_A::_0,
                    true => PID1_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID1_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID1_A::_1
            }
        }
        #[doc = "Write proxy for field `PID1`"]
        pub struct PID1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID1_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID1_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID2_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID2_A> for bool {
            #[inline(always)]
            fn from(variant: PID2_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID2`"]
        pub type PID2_R = crate::R<bool, PID2_A>;
        impl PID2_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID2_A {
                match self.bits {
                    false => PID2_A::_0,
                    true => PID2_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID2_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID2_A::_1
            }
        }
        #[doc = "Write proxy for field `PID2`"]
        pub struct PID2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID2_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID2_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID3_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID3_A> for bool {
            #[inline(always)]
            fn from(variant: PID3_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID3`"]
        pub type PID3_R = crate::R<bool, PID3_A>;
        impl PID3_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID3_A {
                match self.bits {
                    false => PID3_A::_0,
                    true => PID3_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID3_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID3_A::_1
            }
        }
        #[doc = "Write proxy for field `PID3`"]
        pub struct PID3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID3_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID3_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID4_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID4_A> for bool {
            #[inline(always)]
            fn from(variant: PID4_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID4`"]
        pub type PID4_R = crate::R<bool, PID4_A>;
        impl PID4_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID4_A {
                match self.bits {
                    false => PID4_A::_0,
                    true => PID4_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID4_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID4_A::_1
            }
        }
        #[doc = "Write proxy for field `PID4`"]
        pub struct PID4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID4_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID4_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID5_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID5_A> for bool {
            #[inline(always)]
            fn from(variant: PID5_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID5`"]
        pub type PID5_R = crate::R<bool, PID5_A>;
        impl PID5_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID5_A {
                match self.bits {
                    false => PID5_A::_0,
                    true => PID5_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID5_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID5_A::_1
            }
        }
        #[doc = "Write proxy for field `PID5`"]
        pub struct PID5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID5_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID5_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID6_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID6_A> for bool {
            #[inline(always)]
            fn from(variant: PID6_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID6`"]
        pub type PID6_R = crate::R<bool, PID6_A>;
        impl PID6_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID6_A {
                match self.bits {
                    false => PID6_A::_0,
                    true => PID6_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID6_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID6_A::_1
            }
        }
        #[doc = "Write proxy for field `PID6`"]
        pub struct PID6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID6_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID6_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID7_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID7_A> for bool {
            #[inline(always)]
            fn from(variant: PID7_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID7`"]
        pub type PID7_R = crate::R<bool, PID7_A>;
        impl PID7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID7_A {
                match self.bits {
                    false => PID7_A::_0,
                    true => PID7_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID7_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID7_A::_1
            }
        }
        #[doc = "Write proxy for field `PID7`"]
        pub struct PID7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID7_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID7_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID8_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID8_A> for bool {
            #[inline(always)]
            fn from(variant: PID8_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID8`"]
        pub type PID8_R = crate::R<bool, PID8_A>;
        impl PID8_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID8_A {
                match self.bits {
                    false => PID8_A::_0,
                    true => PID8_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID8_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID8_A::_1
            }
        }
        #[doc = "Write proxy for field `PID8`"]
        pub struct PID8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID8_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID8_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID9_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID9_A> for bool {
            #[inline(always)]
            fn from(variant: PID9_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID9`"]
        pub type PID9_R = crate::R<bool, PID9_A>;
        impl PID9_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID9_A {
                match self.bits {
                    false => PID9_A::_0,
                    true => PID9_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID9_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID9_A::_1
            }
        }
        #[doc = "Write proxy for field `PID9`"]
        pub struct PID9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID9_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID9_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID10_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID10_A> for bool {
            #[inline(always)]
            fn from(variant: PID10_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID10`"]
        pub type PID10_R = crate::R<bool, PID10_A>;
        impl PID10_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID10_A {
                match self.bits {
                    false => PID10_A::_0,
                    true => PID10_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID10_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID10_A::_1
            }
        }
        #[doc = "Write proxy for field `PID10`"]
        pub struct PID10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID10_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID10_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID11_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID11_A> for bool {
            #[inline(always)]
            fn from(variant: PID11_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID11`"]
        pub type PID11_R = crate::R<bool, PID11_A>;
        impl PID11_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID11_A {
                match self.bits {
                    false => PID11_A::_0,
                    true => PID11_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID11_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID11_A::_1
            }
        }
        #[doc = "Write proxy for field `PID11`"]
        pub struct PID11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID11_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID11_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID12_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID12_A> for bool {
            #[inline(always)]
            fn from(variant: PID12_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID12`"]
        pub type PID12_R = crate::R<bool, PID12_A>;
        impl PID12_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID12_A {
                match self.bits {
                    false => PID12_A::_0,
                    true => PID12_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID12_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID12_A::_1
            }
        }
        #[doc = "Write proxy for field `PID12`"]
        pub struct PID12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID12_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID12_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID13_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID13_A> for bool {
            #[inline(always)]
            fn from(variant: PID13_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID13`"]
        pub type PID13_R = crate::R<bool, PID13_A>;
        impl PID13_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID13_A {
                match self.bits {
                    false => PID13_A::_0,
                    true => PID13_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID13_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID13_A::_1
            }
        }
        #[doc = "Write proxy for field `PID13`"]
        pub struct PID13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID13_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID13_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID14_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID14_A> for bool {
            #[inline(always)]
            fn from(variant: PID14_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID14`"]
        pub type PID14_R = crate::R<bool, PID14_A>;
        impl PID14_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID14_A {
                match self.bits {
                    false => PID14_A::_0,
                    true => PID14_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID14_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID14_A::_1
            }
        }
        #[doc = "Write proxy for field `PID14`"]
        pub struct PID14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID14_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID14_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID15_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID15_A> for bool {
            #[inline(always)]
            fn from(variant: PID15_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID15`"]
        pub type PID15_R = crate::R<bool, PID15_A>;
        impl PID15_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID15_A {
                match self.bits {
                    false => PID15_A::_0,
                    true => PID15_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID15_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID15_A::_1
            }
        }
        #[doc = "Write proxy for field `PID15`"]
        pub struct PID15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID15_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID15_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID16_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID16_A> for bool {
            #[inline(always)]
            fn from(variant: PID16_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID16`"]
        pub type PID16_R = crate::R<bool, PID16_A>;
        impl PID16_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID16_A {
                match self.bits {
                    false => PID16_A::_0,
                    true => PID16_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID16_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID16_A::_1
            }
        }
        #[doc = "Write proxy for field `PID16`"]
        pub struct PID16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID16_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID16_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID17_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID17_A> for bool {
            #[inline(always)]
            fn from(variant: PID17_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID17`"]
        pub type PID17_R = crate::R<bool, PID17_A>;
        impl PID17_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID17_A {
                match self.bits {
                    false => PID17_A::_0,
                    true => PID17_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID17_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID17_A::_1
            }
        }
        #[doc = "Write proxy for field `PID17`"]
        pub struct PID17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID17_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID17_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID17_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID17_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID18_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID18_A> for bool {
            #[inline(always)]
            fn from(variant: PID18_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID18`"]
        pub type PID18_R = crate::R<bool, PID18_A>;
        impl PID18_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID18_A {
                match self.bits {
                    false => PID18_A::_0,
                    true => PID18_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID18_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID18_A::_1
            }
        }
        #[doc = "Write proxy for field `PID18`"]
        pub struct PID18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID18_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID18_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID18_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID18_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID19_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID19_A> for bool {
            #[inline(always)]
            fn from(variant: PID19_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID19`"]
        pub type PID19_R = crate::R<bool, PID19_A>;
        impl PID19_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID19_A {
                match self.bits {
                    false => PID19_A::_0,
                    true => PID19_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID19_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID19_A::_1
            }
        }
        #[doc = "Write proxy for field `PID19`"]
        pub struct PID19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID19_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID19_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID19_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID20_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID20_A> for bool {
            #[inline(always)]
            fn from(variant: PID20_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID20`"]
        pub type PID20_R = crate::R<bool, PID20_A>;
        impl PID20_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID20_A {
                match self.bits {
                    false => PID20_A::_0,
                    true => PID20_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID20_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID20_A::_1
            }
        }
        #[doc = "Write proxy for field `PID20`"]
        pub struct PID20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID20_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID20_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID20_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID21_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID21_A> for bool {
            #[inline(always)]
            fn from(variant: PID21_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID21`"]
        pub type PID21_R = crate::R<bool, PID21_A>;
        impl PID21_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID21_A {
                match self.bits {
                    false => PID21_A::_0,
                    true => PID21_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID21_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID21_A::_1
            }
        }
        #[doc = "Write proxy for field `PID21`"]
        pub struct PID21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID21_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID21_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID21_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID22_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID22_A> for bool {
            #[inline(always)]
            fn from(variant: PID22_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID22`"]
        pub type PID22_R = crate::R<bool, PID22_A>;
        impl PID22_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID22_A {
                match self.bits {
                    false => PID22_A::_0,
                    true => PID22_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID22_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID22_A::_1
            }
        }
        #[doc = "Write proxy for field `PID22`"]
        pub struct PID22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID22_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID22_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID22_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID23_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID23_A> for bool {
            #[inline(always)]
            fn from(variant: PID23_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID23`"]
        pub type PID23_R = crate::R<bool, PID23_A>;
        impl PID23_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID23_A {
                match self.bits {
                    false => PID23_A::_0,
                    true => PID23_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID23_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID23_A::_1
            }
        }
        #[doc = "Write proxy for field `PID23`"]
        pub struct PID23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID23_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID23_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID23_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID23_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID24_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID24_A> for bool {
            #[inline(always)]
            fn from(variant: PID24_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID24`"]
        pub type PID24_R = crate::R<bool, PID24_A>;
        impl PID24_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID24_A {
                match self.bits {
                    false => PID24_A::_0,
                    true => PID24_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID24_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID24_A::_1
            }
        }
        #[doc = "Write proxy for field `PID24`"]
        pub struct PID24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID24_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID24_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID24_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID24_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID25_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID25_A> for bool {
            #[inline(always)]
            fn from(variant: PID25_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID25`"]
        pub type PID25_R = crate::R<bool, PID25_A>;
        impl PID25_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID25_A {
                match self.bits {
                    false => PID25_A::_0,
                    true => PID25_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID25_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID25_A::_1
            }
        }
        #[doc = "Write proxy for field `PID25`"]
        pub struct PID25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID25_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID25_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID25_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID25_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID26_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID26_A> for bool {
            #[inline(always)]
            fn from(variant: PID26_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID26`"]
        pub type PID26_R = crate::R<bool, PID26_A>;
        impl PID26_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID26_A {
                match self.bits {
                    false => PID26_A::_0,
                    true => PID26_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID26_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID26_A::_1
            }
        }
        #[doc = "Write proxy for field `PID26`"]
        pub struct PID26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID26_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID26_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID26_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID26_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID27_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID27_A> for bool {
            #[inline(always)]
            fn from(variant: PID27_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID27`"]
        pub type PID27_R = crate::R<bool, PID27_A>;
        impl PID27_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID27_A {
                match self.bits {
                    false => PID27_A::_0,
                    true => PID27_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID27_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID27_A::_1
            }
        }
        #[doc = "Write proxy for field `PID27`"]
        pub struct PID27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID27_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID27_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID27_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID27_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID28_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID28_A> for bool {
            #[inline(always)]
            fn from(variant: PID28_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID28`"]
        pub type PID28_R = crate::R<bool, PID28_A>;
        impl PID28_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID28_A {
                match self.bits {
                    false => PID28_A::_0,
                    true => PID28_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID28_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID28_A::_1
            }
        }
        #[doc = "Write proxy for field `PID28`"]
        pub struct PID28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID28_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID28_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID28_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID28_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID29_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID29_A> for bool {
            #[inline(always)]
            fn from(variant: PID29_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID29`"]
        pub type PID29_R = crate::R<bool, PID29_A>;
        impl PID29_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID29_A {
                match self.bits {
                    false => PID29_A::_0,
                    true => PID29_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID29_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID29_A::_1
            }
        }
        #[doc = "Write proxy for field `PID29`"]
        pub struct PID29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID29_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID29_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID29_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID29_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID30_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID30_A> for bool {
            #[inline(always)]
            fn from(variant: PID30_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID30`"]
        pub type PID30_R = crate::R<bool, PID30_A>;
        impl PID30_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID30_A {
                match self.bits {
                    false => PID30_A::_0,
                    true => PID30_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID30_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID30_A::_1
            }
        }
        #[doc = "Write proxy for field `PID30`"]
        pub struct PID30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID30_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID30_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID30_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID30_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum PID31_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID31_A> for bool {
            #[inline(always)]
            fn from(variant: PID31_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `PID31`"]
        pub type PID31_R = crate::R<bool, PID31_A>;
        impl PID31_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> PID31_A {
                match self.bits {
                    false => PID31_A::_0,
                    true => PID31_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID31_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID31_A::_1
            }
        }
        #[doc = "Write proxy for field `PID31`"]
        pub struct PID31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID31_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID31_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID31_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input.Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID31_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Port Input Disable"]
            #[inline(always)]
            pub fn pid0(&self) -> PID0_R {
                PID0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port Input Disable"]
            #[inline(always)]
            pub fn pid1(&self) -> PID1_R {
                PID1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port Input Disable"]
            #[inline(always)]
            pub fn pid2(&self) -> PID2_R {
                PID2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port Input Disable"]
            #[inline(always)]
            pub fn pid3(&self) -> PID3_R {
                PID3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port Input Disable"]
            #[inline(always)]
            pub fn pid4(&self) -> PID4_R {
                PID4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port Input Disable"]
            #[inline(always)]
            pub fn pid5(&self) -> PID5_R {
                PID5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port Input Disable"]
            #[inline(always)]
            pub fn pid6(&self) -> PID6_R {
                PID6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port Input Disable"]
            #[inline(always)]
            pub fn pid7(&self) -> PID7_R {
                PID7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port Input Disable"]
            #[inline(always)]
            pub fn pid8(&self) -> PID8_R {
                PID8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port Input Disable"]
            #[inline(always)]
            pub fn pid9(&self) -> PID9_R {
                PID9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port Input Disable"]
            #[inline(always)]
            pub fn pid10(&self) -> PID10_R {
                PID10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port Input Disable"]
            #[inline(always)]
            pub fn pid11(&self) -> PID11_R {
                PID11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port Input Disable"]
            #[inline(always)]
            pub fn pid12(&self) -> PID12_R {
                PID12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port Input Disable"]
            #[inline(always)]
            pub fn pid13(&self) -> PID13_R {
                PID13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port Input Disable"]
            #[inline(always)]
            pub fn pid14(&self) -> PID14_R {
                PID14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Port Input Disable"]
            #[inline(always)]
            pub fn pid15(&self) -> PID15_R {
                PID15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Port Input Disable"]
            #[inline(always)]
            pub fn pid16(&self) -> PID16_R {
                PID16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Port Input Disable"]
            #[inline(always)]
            pub fn pid17(&self) -> PID17_R {
                PID17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Port Input Disable"]
            #[inline(always)]
            pub fn pid18(&self) -> PID18_R {
                PID18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Port Input Disable"]
            #[inline(always)]
            pub fn pid19(&self) -> PID19_R {
                PID19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Port Input Disable"]
            #[inline(always)]
            pub fn pid20(&self) -> PID20_R {
                PID20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Port Input Disable"]
            #[inline(always)]
            pub fn pid21(&self) -> PID21_R {
                PID21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Port Input Disable"]
            #[inline(always)]
            pub fn pid22(&self) -> PID22_R {
                PID22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Port Input Disable"]
            #[inline(always)]
            pub fn pid23(&self) -> PID23_R {
                PID23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Port Input Disable"]
            #[inline(always)]
            pub fn pid24(&self) -> PID24_R {
                PID24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Port Input Disable"]
            #[inline(always)]
            pub fn pid25(&self) -> PID25_R {
                PID25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Port Input Disable"]
            #[inline(always)]
            pub fn pid26(&self) -> PID26_R {
                PID26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Port Input Disable"]
            #[inline(always)]
            pub fn pid27(&self) -> PID27_R {
                PID27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Port Input Disable"]
            #[inline(always)]
            pub fn pid28(&self) -> PID28_R {
                PID28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Port Input Disable"]
            #[inline(always)]
            pub fn pid29(&self) -> PID29_R {
                PID29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Port Input Disable"]
            #[inline(always)]
            pub fn pid30(&self) -> PID30_R {
                PID30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Port Input Disable"]
            #[inline(always)]
            pub fn pid31(&self) -> PID31_R {
                PID31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Port Input Disable"]
            #[inline(always)]
            pub fn pid0(&mut self) -> PID0_W {
                PID0_W { w: self }
            }
            #[doc = "Bit 1 - Port Input Disable"]
            #[inline(always)]
            pub fn pid1(&mut self) -> PID1_W {
                PID1_W { w: self }
            }
            #[doc = "Bit 2 - Port Input Disable"]
            #[inline(always)]
            pub fn pid2(&mut self) -> PID2_W {
                PID2_W { w: self }
            }
            #[doc = "Bit 3 - Port Input Disable"]
            #[inline(always)]
            pub fn pid3(&mut self) -> PID3_W {
                PID3_W { w: self }
            }
            #[doc = "Bit 4 - Port Input Disable"]
            #[inline(always)]
            pub fn pid4(&mut self) -> PID4_W {
                PID4_W { w: self }
            }
            #[doc = "Bit 5 - Port Input Disable"]
            #[inline(always)]
            pub fn pid5(&mut self) -> PID5_W {
                PID5_W { w: self }
            }
            #[doc = "Bit 6 - Port Input Disable"]
            #[inline(always)]
            pub fn pid6(&mut self) -> PID6_W {
                PID6_W { w: self }
            }
            #[doc = "Bit 7 - Port Input Disable"]
            #[inline(always)]
            pub fn pid7(&mut self) -> PID7_W {
                PID7_W { w: self }
            }
            #[doc = "Bit 8 - Port Input Disable"]
            #[inline(always)]
            pub fn pid8(&mut self) -> PID8_W {
                PID8_W { w: self }
            }
            #[doc = "Bit 9 - Port Input Disable"]
            #[inline(always)]
            pub fn pid9(&mut self) -> PID9_W {
                PID9_W { w: self }
            }
            #[doc = "Bit 10 - Port Input Disable"]
            #[inline(always)]
            pub fn pid10(&mut self) -> PID10_W {
                PID10_W { w: self }
            }
            #[doc = "Bit 11 - Port Input Disable"]
            #[inline(always)]
            pub fn pid11(&mut self) -> PID11_W {
                PID11_W { w: self }
            }
            #[doc = "Bit 12 - Port Input Disable"]
            #[inline(always)]
            pub fn pid12(&mut self) -> PID12_W {
                PID12_W { w: self }
            }
            #[doc = "Bit 13 - Port Input Disable"]
            #[inline(always)]
            pub fn pid13(&mut self) -> PID13_W {
                PID13_W { w: self }
            }
            #[doc = "Bit 14 - Port Input Disable"]
            #[inline(always)]
            pub fn pid14(&mut self) -> PID14_W {
                PID14_W { w: self }
            }
            #[doc = "Bit 15 - Port Input Disable"]
            #[inline(always)]
            pub fn pid15(&mut self) -> PID15_W {
                PID15_W { w: self }
            }
            #[doc = "Bit 16 - Port Input Disable"]
            #[inline(always)]
            pub fn pid16(&mut self) -> PID16_W {
                PID16_W { w: self }
            }
            #[doc = "Bit 17 - Port Input Disable"]
            #[inline(always)]
            pub fn pid17(&mut self) -> PID17_W {
                PID17_W { w: self }
            }
            #[doc = "Bit 18 - Port Input Disable"]
            #[inline(always)]
            pub fn pid18(&mut self) -> PID18_W {
                PID18_W { w: self }
            }
            #[doc = "Bit 19 - Port Input Disable"]
            #[inline(always)]
            pub fn pid19(&mut self) -> PID19_W {
                PID19_W { w: self }
            }
            #[doc = "Bit 20 - Port Input Disable"]
            #[inline(always)]
            pub fn pid20(&mut self) -> PID20_W {
                PID20_W { w: self }
            }
            #[doc = "Bit 21 - Port Input Disable"]
            #[inline(always)]
            pub fn pid21(&mut self) -> PID21_W {
                PID21_W { w: self }
            }
            #[doc = "Bit 22 - Port Input Disable"]
            #[inline(always)]
            pub fn pid22(&mut self) -> PID22_W {
                PID22_W { w: self }
            }
            #[doc = "Bit 23 - Port Input Disable"]
            #[inline(always)]
            pub fn pid23(&mut self) -> PID23_W {
                PID23_W { w: self }
            }
            #[doc = "Bit 24 - Port Input Disable"]
            #[inline(always)]
            pub fn pid24(&mut self) -> PID24_W {
                PID24_W { w: self }
            }
            #[doc = "Bit 25 - Port Input Disable"]
            #[inline(always)]
            pub fn pid25(&mut self) -> PID25_W {
                PID25_W { w: self }
            }
            #[doc = "Bit 26 - Port Input Disable"]
            #[inline(always)]
            pub fn pid26(&mut self) -> PID26_W {
                PID26_W { w: self }
            }
            #[doc = "Bit 27 - Port Input Disable"]
            #[inline(always)]
            pub fn pid27(&mut self) -> PID27_W {
                PID27_W { w: self }
            }
            #[doc = "Bit 28 - Port Input Disable"]
            #[inline(always)]
            pub fn pid28(&mut self) -> PID28_W {
                PID28_W { w: self }
            }
            #[doc = "Bit 29 - Port Input Disable"]
            #[inline(always)]
            pub fn pid29(&mut self) -> PID29_W {
                PID29_W { w: self }
            }
            #[doc = "Bit 30 - Port Input Disable"]
            #[inline(always)]
            pub fn pid30(&mut self) -> PID30_W {
                PID30_W { w: self }
            }
            #[doc = "Bit 31 - Port Input Disable"]
            #[inline(always)]
            pub fn pid31(&mut self) -> PID31_W {
                PID31_W { w: self }
            }
        }
    }
}
#[doc = "System ROM"]
pub struct ROM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ROM {}
impl ROM {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rom::RegisterBlock {
        0xf000_2000 as *const _
    }
}
impl Deref for ROM {
    type Target = rom::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*ROM::ptr() }
    }
}
#[doc = "System ROM"]
pub mod rom {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Entry"]
        pub entry: ENTRY,
        #[doc = "0x04 - End of Table Marker Register"]
        pub tablemark: TABLEMARK,
        _reserved2: [u8; 4036usize],
        #[doc = "0xfcc - System Access Register"]
        pub sysaccess: SYSACCESS,
        #[doc = "0xfd0 - Peripheral ID Register"]
        pub periphid4: PERIPHID,
        #[doc = "0xfd4 - Peripheral ID Register"]
        pub periphid5: PERIPHID,
        #[doc = "0xfd8 - Peripheral ID Register"]
        pub periphid6: PERIPHID,
        #[doc = "0xfdc - Peripheral ID Register"]
        pub periphid7: PERIPHID,
        #[doc = "0xfe0 - Peripheral ID Register"]
        pub periphid0: PERIPHID,
        #[doc = "0xfe4 - Peripheral ID Register"]
        pub periphid1: PERIPHID,
        #[doc = "0xfe8 - Peripheral ID Register"]
        pub periphid2: PERIPHID,
        #[doc = "0xfec - Peripheral ID Register"]
        pub periphid3: PERIPHID,
        #[doc = "0xff0 - Component ID Register"]
        pub compid: [COMPID; 4],
    }
    #[doc = "Entry\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [entry](entry) module"]
    pub type ENTRY = crate::Reg<u32, _ENTRY>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ENTRY;
    #[doc = "`read()` method returns [entry::R](entry::R) reader structure"]
    impl crate::Readable for ENTRY {}
    #[doc = "Entry"]
    pub mod entry {
        #[doc = "Reader of register ENTRY"]
        pub type R = crate::R<u32, super::ENTRY>;
        #[doc = "Reader of field `ENTRY`"]
        pub type ENTRY_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - ENTRY"]
            #[inline(always)]
            pub fn entry(&self) -> ENTRY_R {
                ENTRY_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "End of Table Marker Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tablemark](tablemark) module"]
    pub type TABLEMARK = crate::Reg<u32, _TABLEMARK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TABLEMARK;
    #[doc = "`read()` method returns [tablemark::R](tablemark::R) reader structure"]
    impl crate::Readable for TABLEMARK {}
    #[doc = "End of Table Marker Register"]
    pub mod tablemark {
        #[doc = "Reader of register TABLEMARK"]
        pub type R = crate::R<u32, super::TABLEMARK>;
        #[doc = "Reader of field `MARK`"]
        pub type MARK_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Hardwired to 0x0000_0000"]
            #[inline(always)]
            pub fn mark(&self) -> MARK_R {
                MARK_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "System Access Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sysaccess](sysaccess) module"]
    pub type SYSACCESS = crate::Reg<u32, _SYSACCESS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SYSACCESS;
    #[doc = "`read()` method returns [sysaccess::R](sysaccess::R) reader structure"]
    impl crate::Readable for SYSACCESS {}
    #[doc = "System Access Register"]
    pub mod sysaccess {
        #[doc = "Reader of register SYSACCESS"]
        pub type R = crate::R<u32, super::SYSACCESS>;
        #[doc = "Reader of field `SYSACCESS`"]
        pub type SYSACCESS_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Hardwired to 0x0000_0001"]
            #[inline(always)]
            pub fn sysaccess(&self) -> SYSACCESS_R {
                SYSACCESS_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Peripheral ID Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [periphid](periphid) module"]
    pub type PERIPHID = crate::Reg<u32, _PERIPHID>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PERIPHID;
    #[doc = "`read()` method returns [periphid::R](periphid::R) reader structure"]
    impl crate::Readable for PERIPHID {}
    #[doc = "Peripheral ID Register"]
    pub mod periphid {
        #[doc = "Reader of register PERIPHID%s"]
        pub type R = crate::R<u32, super::PERIPHID>;
        #[doc = "Reader of field `PERIPHID`"]
        pub type PERIPHID_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Peripheral ID1 is hardwired to 0x0000_00E0; ID2 to 0x0000_0008; and all the others to 0x0000_0000."]
            #[inline(always)]
            pub fn periphid(&self) -> PERIPHID_R {
                PERIPHID_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Component ID Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [compid](compid) module"]
    pub type COMPID = crate::Reg<u32, _COMPID>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _COMPID;
    #[doc = "`read()` method returns [compid::R](compid::R) reader structure"]
    impl crate::Readable for COMPID {}
    #[doc = "Component ID Register"]
    pub mod compid {
        #[doc = "Reader of register COMPID%s"]
        pub type R = crate::R<u32, super::COMPID>;
        #[doc = "Reader of field `COMPID`"]
        pub type COMPID_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Component ID"]
            #[inline(always)]
            pub fn compid(&self) -> COMPID_R {
                COMPID_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
}
#[doc = "Core Platform Miscellaneous Control Module"]
pub struct MCM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MCM {}
impl MCM {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mcm::RegisterBlock {
        0xf000_3000 as *const _
    }
}
impl Deref for MCM {
    type Target = mcm::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*MCM::ptr() }
    }
}
#[doc = "Core Platform Miscellaneous Control Module"]
pub mod mcm {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved0: [u8; 8usize],
        #[doc = "0x08 - Crossbar Switch (AXBS) Slave Configuration"]
        pub plasc: PLASC,
        #[doc = "0x0a - Crossbar Switch (AXBS) Master Configuration"]
        pub plamc: PLAMC,
        #[doc = "0x0c - Platform Control Register"]
        pub placr: PLACR,
    }
    #[doc = "Crossbar Switch (AXBS) Slave Configuration\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [plasc](plasc) module"]
    pub type PLASC = crate::Reg<u16, _PLASC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PLASC;
    #[doc = "`read()` method returns [plasc::R](plasc::R) reader structure"]
    impl crate::Readable for PLASC {}
    #[doc = "Crossbar Switch (AXBS) Slave Configuration"]
    pub mod plasc {
        #[doc = "Reader of register PLASC"]
        pub type R = crate::R<u16, super::PLASC>;
        #[doc = "Each bit in the ASC field indicates whether there is a corresponding connection to the crossbar switch's slave input port.\n\nValue on reset: 7"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ASC_A {
            #[doc = "0: A bus slave connection to AXBS input port n is absent."]
            _0 = 0,
            #[doc = "1: A bus slave connection to AXBS input port n is present."]
            _1 = 1,
        }
        impl From<ASC_A> for u8 {
            #[inline(always)]
            fn from(variant: ASC_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `ASC`"]
        pub type ASC_R = crate::R<u8, ASC_A>;
        impl ASC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, ASC_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(ASC_A::_0),
                    1 => Val(ASC_A::_1),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ASC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ASC_A::_1
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Each bit in the ASC field indicates whether there is a corresponding connection to the crossbar switch's slave input port."]
            #[inline(always)]
            pub fn asc(&self) -> ASC_R {
                ASC_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Crossbar Switch (AXBS) Master Configuration\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [plamc](plamc) module"]
    pub type PLAMC = crate::Reg<u16, _PLAMC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PLAMC;
    #[doc = "`read()` method returns [plamc::R](plamc::R) reader structure"]
    impl crate::Readable for PLAMC {}
    #[doc = "Crossbar Switch (AXBS) Master Configuration"]
    pub mod plamc {
        #[doc = "Reader of register PLAMC"]
        pub type R = crate::R<u16, super::PLAMC>;
        #[doc = "Each bit in the AMC field indicates whether there is a corresponding connection to the AXBS master input port.\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum AMC_A {
            #[doc = "0: A bus master connection to AXBS input port n is absent"]
            _0 = 0,
            #[doc = "1: A bus master connection to AXBS input port n is present"]
            _1 = 1,
        }
        impl From<AMC_A> for u8 {
            #[inline(always)]
            fn from(variant: AMC_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `AMC`"]
        pub type AMC_R = crate::R<u8, AMC_A>;
        impl AMC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, AMC_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(AMC_A::_0),
                    1 => Val(AMC_A::_1),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == AMC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == AMC_A::_1
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Each bit in the AMC field indicates whether there is a corresponding connection to the AXBS master input port."]
            #[inline(always)]
            pub fn amc(&self) -> AMC_R {
                AMC_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Platform Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [placr](placr) module"]
    pub type PLACR = crate::Reg<u32, _PLACR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PLACR;
    #[doc = "`read()` method returns [placr::R](placr::R) reader structure"]
    impl crate::Readable for PLACR {}
    #[doc = "`write(|w| ..)` method takes [placr::W](placr::W) writer structure"]
    impl crate::Writable for PLACR {}
    #[doc = "Platform Control Register"]
    pub mod placr {
        #[doc = "Reader of register PLACR"]
        pub type R = crate::R<u32, super::PLACR>;
        #[doc = "Writer for register PLACR"]
        pub type W = crate::W<u32, super::PLACR>;
        #[doc = "Register PLACR `reset()`'s with value 0x0800"]
        impl crate::ResetValue for super::PLACR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0800
            }
        }
        #[doc = "Write proxy for field `CFCC`"]
        pub struct CFCC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CFCC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Disable Flash Controller Data Caching\n\nValue on reset: 1"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DFCDA_A {
            #[doc = "0: Enable flash controller data caching"]
            _0 = 0,
            #[doc = "1: Disable flash controller data caching."]
            _1 = 1,
        }
        impl From<DFCDA_A> for bool {
            #[inline(always)]
            fn from(variant: DFCDA_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DFCDA`"]
        pub type DFCDA_R = crate::R<bool, DFCDA_A>;
        impl DFCDA_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DFCDA_A {
                match self.bits {
                    false => DFCDA_A::_0,
                    true => DFCDA_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DFCDA_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DFCDA_A::_1
            }
        }
        #[doc = "Write proxy for field `DFCDA`"]
        pub struct DFCDA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DFCDA_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DFCDA_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Enable flash controller data caching"]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DFCDA_A::_0)
            }
            #[doc = "Disable flash controller data caching."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DFCDA_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Disable Flash Controller Instruction Caching\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DFCIC_A {
            #[doc = "0: Enable flash controller instruction caching."]
            _0 = 0,
            #[doc = "1: Disable flash controller instruction caching."]
            _1 = 1,
        }
        impl From<DFCIC_A> for bool {
            #[inline(always)]
            fn from(variant: DFCIC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DFCIC`"]
        pub type DFCIC_R = crate::R<bool, DFCIC_A>;
        impl DFCIC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DFCIC_A {
                match self.bits {
                    false => DFCIC_A::_0,
                    true => DFCIC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DFCIC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DFCIC_A::_1
            }
        }
        #[doc = "Write proxy for field `DFCIC`"]
        pub struct DFCIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DFCIC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DFCIC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Enable flash controller instruction caching."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DFCIC_A::_0)
            }
            #[doc = "Disable flash controller instruction caching."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DFCIC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Disable Flash Controller Cache\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DFCC_A {
            #[doc = "0: Enable flash controller cache."]
            _0 = 0,
            #[doc = "1: Disable flash controller cache."]
            _1 = 1,
        }
        impl From<DFCC_A> for bool {
            #[inline(always)]
            fn from(variant: DFCC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DFCC`"]
        pub type DFCC_R = crate::R<bool, DFCC_A>;
        impl DFCC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DFCC_A {
                match self.bits {
                    false => DFCC_A::_0,
                    true => DFCC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DFCC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DFCC_A::_1
            }
        }
        #[doc = "Write proxy for field `DFCC`"]
        pub struct DFCC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DFCC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DFCC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Enable flash controller cache."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DFCC_A::_0)
            }
            #[doc = "Disable flash controller cache."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DFCC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Enable Flash Data Speculation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EFDS_A {
            #[doc = "0: Disable flash data speculation."]
            _0 = 0,
            #[doc = "1: Enable flash data speculation."]
            _1 = 1,
        }
        impl From<EFDS_A> for bool {
            #[inline(always)]
            fn from(variant: EFDS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EFDS`"]
        pub type EFDS_R = crate::R<bool, EFDS_A>;
        impl EFDS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EFDS_A {
                match self.bits {
                    false => EFDS_A::_0,
                    true => EFDS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == EFDS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == EFDS_A::_1
            }
        }
        #[doc = "Write proxy for field `EFDS`"]
        pub struct EFDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFDS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EFDS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Disable flash data speculation."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(EFDS_A::_0)
            }
            #[doc = "Enable flash data speculation."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(EFDS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Disable Flash Controller Speculation\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum DFCS_A {
            #[doc = "0: Enable flash controller speculation."]
            _0 = 0,
            #[doc = "1: Disable flash controller speculation."]
            _1 = 1,
        }
        impl From<DFCS_A> for bool {
            #[inline(always)]
            fn from(variant: DFCS_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `DFCS`"]
        pub type DFCS_R = crate::R<bool, DFCS_A>;
        impl DFCS_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DFCS_A {
                match self.bits {
                    false => DFCS_A::_0,
                    true => DFCS_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == DFCS_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == DFCS_A::_1
            }
        }
        #[doc = "Write proxy for field `DFCS`"]
        pub struct DFCS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DFCS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DFCS_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Enable flash controller speculation."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(DFCS_A::_0)
            }
            #[doc = "Disable flash controller speculation."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(DFCS_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Enable Stalling Flash Controller\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum ESFC_A {
            #[doc = "0: Disable stalling flash controller when flash is busy."]
            _0 = 0,
            #[doc = "1: Enable stalling flash controller when flash is busy."]
            _1 = 1,
        }
        impl From<ESFC_A> for bool {
            #[inline(always)]
            fn from(variant: ESFC_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `ESFC`"]
        pub type ESFC_R = crate::R<bool, ESFC_A>;
        impl ESFC_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ESFC_A {
                match self.bits {
                    false => ESFC_A::_0,
                    true => ESFC_A::_1,
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == ESFC_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == ESFC_A::_1
            }
        }
        #[doc = "Write proxy for field `ESFC`"]
        pub struct ESFC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ESFC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ESFC_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Disable stalling flash controller when flash is busy."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(ESFC_A::_0)
            }
            #[doc = "Enable stalling flash controller when flash is busy."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(ESFC_A::_1)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 11 - Disable Flash Controller Data Caching"]
            #[inline(always)]
            pub fn dfcda(&self) -> DFCDA_R {
                DFCDA_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Disable Flash Controller Instruction Caching"]
            #[inline(always)]
            pub fn dfcic(&self) -> DFCIC_R {
                DFCIC_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Disable Flash Controller Cache"]
            #[inline(always)]
            pub fn dfcc(&self) -> DFCC_R {
                DFCC_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Enable Flash Data Speculation"]
            #[inline(always)]
            pub fn efds(&self) -> EFDS_R {
                EFDS_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Disable Flash Controller Speculation"]
            #[inline(always)]
            pub fn dfcs(&self) -> DFCS_R {
                DFCS_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Enable Stalling Flash Controller"]
            #[inline(always)]
            pub fn esfc(&self) -> ESFC_R {
                ESFC_R::new(((self.bits >> 16) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 10 - Clear Flash Controller Cache"]
            #[inline(always)]
            pub fn cfcc(&mut self) -> CFCC_W {
                CFCC_W { w: self }
            }
            #[doc = "Bit 11 - Disable Flash Controller Data Caching"]
            #[inline(always)]
            pub fn dfcda(&mut self) -> DFCDA_W {
                DFCDA_W { w: self }
            }
            #[doc = "Bit 12 - Disable Flash Controller Instruction Caching"]
            #[inline(always)]
            pub fn dfcic(&mut self) -> DFCIC_W {
                DFCIC_W { w: self }
            }
            #[doc = "Bit 13 - Disable Flash Controller Cache"]
            #[inline(always)]
            pub fn dfcc(&mut self) -> DFCC_W {
                DFCC_W { w: self }
            }
            #[doc = "Bit 14 - Enable Flash Data Speculation"]
            #[inline(always)]
            pub fn efds(&mut self) -> EFDS_W {
                EFDS_W { w: self }
            }
            #[doc = "Bit 15 - Disable Flash Controller Speculation"]
            #[inline(always)]
            pub fn dfcs(&mut self) -> DFCS_W {
                DFCS_W { w: self }
            }
            #[doc = "Bit 16 - Enable Stalling Flash Controller"]
            #[inline(always)]
            pub fn esfc(&mut self) -> ESFC_W {
                ESFC_W { w: self }
            }
        }
    }
}
#[doc = "General Purpose Input/Output"]
pub struct FGPIOA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FGPIOA {}
impl FGPIOA {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const fgpioa::RegisterBlock {
        0xf800_0000 as *const _
    }
}
impl Deref for FGPIOA {
    type Target = fgpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*FGPIOA::ptr() }
    }
}
#[doc = "General Purpose Input/Output"]
pub mod fgpioa {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Port Data Output Register"]
        pub pdor: PDOR,
        #[doc = "0x04 - Port Set Output Register"]
        pub psor: PSOR,
        #[doc = "0x08 - Port Clear Output Register"]
        pub pcor: PCOR,
        #[doc = "0x0c - Port Toggle Output Register"]
        pub ptor: PTOR,
        #[doc = "0x10 - Port Data Input Register"]
        pub pdir: PDIR,
        #[doc = "0x14 - Port Data Direction Register"]
        pub pddr: PDDR,
        #[doc = "0x18 - Port Input Disable Register"]
        pub pidr: PIDR,
    }
    #[doc = "Port Data Output Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdor](pdor) module"]
    pub type PDOR = crate::Reg<u32, _PDOR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDOR;
    #[doc = "`read()` method returns [pdor::R](pdor::R) reader structure"]
    impl crate::Readable for PDOR {}
    #[doc = "`write(|w| ..)` method takes [pdor::W](pdor::W) writer structure"]
    impl crate::Writable for PDOR {}
    #[doc = "Port Data Output Register"]
    pub mod pdor {
        #[doc = "Reader of register PDOR"]
        pub type R = crate::R<u32, super::PDOR>;
        #[doc = "Writer for register PDOR"]
        pub type W = crate::W<u32, super::PDOR>;
        #[doc = "Register PDOR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PDOR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port Data Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u32)]
        pub enum PDO_A {
            #[doc = "0: Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            _0 = 0,
            #[doc = "1: Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            _1 = 1,
        }
        impl From<PDO_A> for u32 {
            #[inline(always)]
            fn from(variant: PDO_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PDO`"]
        pub type PDO_R = crate::R<u32, PDO_A>;
        impl PDO_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u32, PDO_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(PDO_A::_0),
                    1 => Val(PDO_A::_1),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDO_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDO_A::_1
            }
        }
        #[doc = "Write proxy for field `PDO`"]
        pub struct PDO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDO_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDO_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Logic level 0 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDO_A::_0)
            }
            #[doc = "Logic level 1 is driven on pin, provided pin is configured for general-purpose output."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDO_A::_1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Port Data Output"]
            #[inline(always)]
            pub fn pdo(&self) -> PDO_R {
                PDO_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Port Data Output"]
            #[inline(always)]
            pub fn pdo(&mut self) -> PDO_W {
                PDO_W { w: self }
            }
        }
    }
    #[doc = "Port Set Output Register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psor](psor) module"]
    pub type PSOR = crate::Reg<u32, _PSOR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSOR;
    #[doc = "`write(|w| ..)` method takes [psor::W](psor::W) writer structure"]
    impl crate::Writable for PSOR {}
    #[doc = "Port Set Output Register"]
    pub mod psor {
        #[doc = "Writer for register PSOR"]
        pub type W = crate::W<u32, super::PSOR>;
        #[doc = "Register PSOR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSOR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port Set Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u32)]
        pub enum PTSO_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to logic 1."]
            _1 = 1,
        }
        impl From<PTSO_AW> for u32 {
            #[inline(always)]
            fn from(variant: PTSO_AW) -> Self {
                variant as _
            }
        }
        #[doc = "Write proxy for field `PTSO`"]
        pub struct PTSO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTSO_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTSO_AW) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTSO_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to logic 1."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTSO_AW::_1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Port Set Output"]
            #[inline(always)]
            pub fn ptso(&mut self) -> PTSO_W {
                PTSO_W { w: self }
            }
        }
    }
    #[doc = "Port Clear Output Register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcor](pcor) module"]
    pub type PCOR = crate::Reg<u32, _PCOR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PCOR;
    #[doc = "`write(|w| ..)` method takes [pcor::W](pcor::W) writer structure"]
    impl crate::Writable for PCOR {}
    #[doc = "Port Clear Output Register"]
    pub mod pcor {
        #[doc = "Writer for register PCOR"]
        pub type W = crate::W<u32, super::PCOR>;
        #[doc = "Register PCOR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PCOR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port Clear Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u32)]
        pub enum PTCO_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is cleared to logic 0."]
            _1 = 1,
        }
        impl From<PTCO_AW> for u32 {
            #[inline(always)]
            fn from(variant: PTCO_AW) -> Self {
                variant as _
            }
        }
        #[doc = "Write proxy for field `PTCO`"]
        pub struct PTCO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTCO_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTCO_AW) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTCO_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is cleared to logic 0."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTCO_AW::_1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Port Clear Output"]
            #[inline(always)]
            pub fn ptco(&mut self) -> PTCO_W {
                PTCO_W { w: self }
            }
        }
    }
    #[doc = "Port Toggle Output Register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ptor](ptor) module"]
    pub type PTOR = crate::Reg<u32, _PTOR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PTOR;
    #[doc = "`write(|w| ..)` method takes [ptor::W](ptor::W) writer structure"]
    impl crate::Writable for PTOR {}
    #[doc = "Port Toggle Output Register"]
    pub mod ptor {
        #[doc = "Writer for register PTOR"]
        pub type W = crate::W<u32, super::PTOR>;
        #[doc = "Register PTOR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PTOR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port Toggle Output\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u32)]
        pub enum PTTO_AW {
            #[doc = "0: Corresponding bit in PDORn does not change."]
            _0 = 0,
            #[doc = "1: Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            _1 = 1,
        }
        impl From<PTTO_AW> for u32 {
            #[inline(always)]
            fn from(variant: PTTO_AW) -> Self {
                variant as _
            }
        }
        #[doc = "Write proxy for field `PTTO`"]
        pub struct PTTO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTTO_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PTTO_AW) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Corresponding bit in PDORn does not change."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PTTO_AW::_0)
            }
            #[doc = "Corresponding bit in PDORn is set to the inverse of its existing logic state."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PTTO_AW::_1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Port Toggle Output"]
            #[inline(always)]
            pub fn ptto(&mut self) -> PTTO_W {
                PTTO_W { w: self }
            }
        }
    }
    #[doc = "Port Data Input Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdir](pdir) module"]
    pub type PDIR = crate::Reg<u32, _PDIR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDIR;
    #[doc = "`read()` method returns [pdir::R](pdir::R) reader structure"]
    impl crate::Readable for PDIR {}
    #[doc = "Port Data Input Register"]
    pub mod pdir {
        #[doc = "Reader of register PDIR"]
        pub type R = crate::R<u32, super::PDIR>;
        #[doc = "Port Data Input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u32)]
        pub enum PDI_A {
            #[doc = "0: Pin logic level is logic 0, or is not configured for use by digital function."]
            _0 = 0,
            #[doc = "1: Pin logic level is logic 1."]
            _1 = 1,
        }
        impl From<PDI_A> for u32 {
            #[inline(always)]
            fn from(variant: PDI_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PDI`"]
        pub type PDI_R = crate::R<u32, PDI_A>;
        impl PDI_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u32, PDI_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(PDI_A::_0),
                    1 => Val(PDI_A::_1),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDI_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDI_A::_1
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Port Data Input"]
            #[inline(always)]
            pub fn pdi(&self) -> PDI_R {
                PDI_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Port Data Direction Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pddr](pddr) module"]
    pub type PDDR = crate::Reg<u32, _PDDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDDR;
    #[doc = "`read()` method returns [pddr::R](pddr::R) reader structure"]
    impl crate::Readable for PDDR {}
    #[doc = "`write(|w| ..)` method takes [pddr::W](pddr::W) writer structure"]
    impl crate::Writable for PDDR {}
    #[doc = "Port Data Direction Register"]
    pub mod pddr {
        #[doc = "Reader of register PDDR"]
        pub type R = crate::R<u32, super::PDDR>;
        #[doc = "Writer for register PDDR"]
        pub type W = crate::W<u32, super::PDDR>;
        #[doc = "Register PDDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PDDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Port Data Direction\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u32)]
        pub enum PDD_A {
            #[doc = "0: Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in FPIOx_PIDR register."]
            _0 = 0,
            #[doc = "1: Pin is configured as general-purpose output, for the GPIO function."]
            _1 = 1,
        }
        impl From<PDD_A> for u32 {
            #[inline(always)]
            fn from(variant: PDD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PDD`"]
        pub type PDD_R = crate::R<u32, PDD_A>;
        impl PDD_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u32, PDD_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(PDD_A::_0),
                    1 => Val(PDD_A::_1),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PDD_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PDD_A::_1
            }
        }
        #[doc = "Write proxy for field `PDD`"]
        pub struct PDD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PDD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PDD_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Pin is configured as general-purpose input, for the GPIO function. The pin will be high-Z if the port input is disabled in FPIOx_PIDR register."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PDD_A::_0)
            }
            #[doc = "Pin is configured as general-purpose output, for the GPIO function."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PDD_A::_1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd(&self) -> PDD_R {
                PDD_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Port Data Direction"]
            #[inline(always)]
            pub fn pdd(&mut self) -> PDD_W {
                PDD_W { w: self }
            }
        }
    }
    #[doc = "Port Input Disable Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pidr](pidr) module"]
    pub type PIDR = crate::Reg<u32, _PIDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PIDR;
    #[doc = "`read()` method returns [pidr::R](pidr::R) reader structure"]
    impl crate::Readable for PIDR {}
    #[doc = "`write(|w| ..)` method takes [pidr::W](pidr::W) writer structure"]
    impl crate::Writable for PIDR {}
    #[doc = "Port Input Disable Register"]
    pub mod pidr {
        #[doc = "Reader of register PIDR"]
        pub type R = crate::R<u32, super::PIDR>;
        #[doc = "Writer for register PIDR"]
        pub type W = crate::W<u32, super::PIDR>;
        #[doc = "Register PIDR `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::PIDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Port Input Disable\n\nValue on reset: 4294967295"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u32)]
        pub enum PID_A {
            #[doc = "0: Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            _0 = 0,
            #[doc = "1: Pin is not configured as General Purpose Input. Corresponding Port Data Input Register bit will read zero."]
            _1 = 1,
        }
        impl From<PID_A> for u32 {
            #[inline(always)]
            fn from(variant: PID_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `PID`"]
        pub type PID_R = crate::R<u32, PID_A>;
        impl PID_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u32, PID_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(PID_A::_0),
                    1 => Val(PID_A::_1),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `_0`"]
            #[inline(always)]
            pub fn is_0(&self) -> bool {
                *self == PID_A::_0
            }
            #[doc = "Checks if the value of the field is `_1`"]
            #[inline(always)]
            pub fn is_1(&self) -> bool {
                *self == PID_A::_1
            }
        }
        #[doc = "Write proxy for field `PID`"]
        pub struct PID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PID_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: PID_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Pin is configured for General Purpose Input, provided the pin is configured for any digital function."]
            #[inline(always)]
            pub fn _0(self) -> &'a mut W {
                self.variant(PID_A::_0)
            }
            #[doc = "Pin is not configured as General Purpose Input. Corresponding Port Data Input Register bit will read zero."]
            #[inline(always)]
            pub fn _1(self) -> &'a mut W {
                self.variant(PID_A::_1)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Port Input Disable"]
            #[inline(always)]
            pub fn pid(&self) -> PID_R {
                PID_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Port Input Disable"]
            #[inline(always)]
            pub fn pid(&mut self) -> PID_W {
                PID_W { w: self }
            }
        }
    }
}
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r"All the peripherals"]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "FTMRE"]
    pub FTMRE: FTMRE,
    #[doc = "IRQ"]
    pub IRQ: IRQ,
    #[doc = "CRC"]
    pub CRC: CRC,
    #[doc = "PWT"]
    pub PWT: PWT,
    #[doc = "PIT"]
    pub PIT: PIT,
    #[doc = "FTM0"]
    pub FTM0: FTM0,
    #[doc = "FTM2"]
    pub FTM2: FTM2,
    #[doc = "ADC"]
    pub ADC: ADC,
    #[doc = "RTC"]
    pub RTC: RTC,
    #[doc = "SIM"]
    pub SIM: SIM,
    #[doc = "PORT"]
    pub PORT: PORT,
    #[doc = "WDOG"]
    pub WDOG: WDOG,
    #[doc = "ICS"]
    pub ICS: ICS,
    #[doc = "OSC"]
    pub OSC: OSC,
    #[doc = "I2C0"]
    pub I2C0: I2C0,
    #[doc = "UART0"]
    pub UART0: UART0,
    #[doc = "ACMP0"]
    pub ACMP0: ACMP0,
    #[doc = "ACMP1"]
    pub ACMP1: ACMP1,
    #[doc = "SPI0"]
    pub SPI0: SPI0,
    #[doc = "KBI0"]
    pub KBI0: KBI0,
    #[doc = "KBI1"]
    pub KBI1: KBI1,
    #[doc = "PMC"]
    pub PMC: PMC,
    #[doc = "GPIOA"]
    pub GPIOA: GPIOA,
    #[doc = "ROM"]
    pub ROM: ROM,
    #[doc = "MCM"]
    pub MCM: MCM,
    #[doc = "FGPIOA"]
    pub FGPIOA: FGPIOA,
}
impl Peripherals {
    #[doc = r"Returns all the peripherals *once*"]
    #[inline]
    pub fn take() -> Option<Self> {
        cortex_m::interrupt::free(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                None
            } else {
                Some(unsafe { Peripherals::steal() })
            }
        })
    }
    #[doc = r"Unchecked version of `Peripherals::take`"]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            FTMRE: FTMRE {
                _marker: PhantomData,
            },
            IRQ: IRQ {
                _marker: PhantomData,
            },
            CRC: CRC {
                _marker: PhantomData,
            },
            PWT: PWT {
                _marker: PhantomData,
            },
            PIT: PIT {
                _marker: PhantomData,
            },
            FTM0: FTM0 {
                _marker: PhantomData,
            },
            FTM2: FTM2 {
                _marker: PhantomData,
            },
            ADC: ADC {
                _marker: PhantomData,
            },
            RTC: RTC {
                _marker: PhantomData,
            },
            SIM: SIM {
                _marker: PhantomData,
            },
            PORT: PORT {
                _marker: PhantomData,
            },
            WDOG: WDOG {
                _marker: PhantomData,
            },
            ICS: ICS {
                _marker: PhantomData,
            },
            OSC: OSC {
                _marker: PhantomData,
            },
            I2C0: I2C0 {
                _marker: PhantomData,
            },
            UART0: UART0 {
                _marker: PhantomData,
            },
            ACMP0: ACMP0 {
                _marker: PhantomData,
            },
            ACMP1: ACMP1 {
                _marker: PhantomData,
            },
            SPI0: SPI0 {
                _marker: PhantomData,
            },
            KBI0: KBI0 {
                _marker: PhantomData,
            },
            KBI1: KBI1 {
                _marker: PhantomData,
            },
            PMC: PMC {
                _marker: PhantomData,
            },
            GPIOA: GPIOA {
                _marker: PhantomData,
            },
            ROM: ROM {
                _marker: PhantomData,
            },
            MCM: MCM {
                _marker: PhantomData,
            },
            FGPIOA: FGPIOA {
                _marker: PhantomData,
            },
        }
    }
}
